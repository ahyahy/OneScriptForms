// Скрипт читает файлы справки в C:\444\OneScriptFormsru\ и создает *.cs файлы в каталоге C:\444\ВыгруженныеОбъекты\
// Из каталога C:\444\ВыгруженныеОбъекты\ файлы *.cs можно скопировать в каталог проекта.

Перем СтрДирективы, СтрШапка, СтрРазделОбъявленияПеременных, СтрКонструктор, СтрBase_obj, СтрСвойства, СтрМетоды, СтрПодвал, СтрВыгрузкиПеречислений;
Перем СтрРазделОбъявленияПеременныхДляПеречисления, СтрСвойстваДляПеречисления, СтрМетодовСистема, СписокСтрМетодовСистема;
Перем СписокЗамен, ИменаКалассовПеречислений;

Перем КаталогСправки, КаталогВыгрузки;

Функция ОтобратьФайлы(Фильтр)
	// Фильтр = Класс Конструктор Члены Свойства Свойство Методы Метод Перечисление
	М_Фильтр = Новый Массив;
	ВыбранныеФайлы = НайтиФайлы(КаталогСправки, "*.html", Истина);
	Найдено1 = 0;
	Для А = 0 По ВыбранныеФайлы.ВГраница() Цикл
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ВыбранныеФайлы[А].ПолноеИмя);
		Стр = ТекстДок.ПолучитьТекст();
		М = СтрНайтиМежду(Стр, "<H1 class=dtH1", "/H1>", , );
		Если М.Количество() > 0 Тогда
			СтрЗаголовка= М[0];
			Если (СтрНайти(СтрЗаголовка, Фильтр + "<") > 0) или (СтрНайти(СтрЗаголовка, Фильтр + " <") > 0) Тогда
				Найдено1 = Найдено1 + 1;
				// // // Сообщить("================================================================================================");
				// // // Сообщить("" + ВыбранныеФайлы[А].ПолноеИмя + "=" + СтрЗаголовка);
				// Сообщить("" + СтрЗаголовка);
				М_Фильтр.Добавить(ВыбранныеФайлы[А].ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Сообщить("Найдено1 (" + Фильтр + ") = " + Найдено1);
	Возврат М_Фильтр;
КонецФункции

Функция РазобратьСтроку(Строка, Разделитель)
	Стр = СтрЗаменить(Строка, Разделитель, Символы.ПС);
	М = Новый Массив;
	Если ПустаяСтрока(Стр) Тогда
		Возврат М;
	КонецЕсли;
	Для Ч = 1 По СтрЧислоСтрок(Стр) Цикл
		М.Добавить(СтрПолучитьСтроку(Стр, Ч));
	КонецЦикла;
	Возврат М;
КонецФункции

Процедура СортироватьСтрРазделОбъявленияПеременных()//в строке СтрРазделОбъявленияПеременных должно быть не меньше трёх слов разделенных двумя пробелами
	СписокСортировки = Новый СписокЗначений;
	Для Счетчик = 1 По СтрЧислоСтрок(СтрРазделОбъявленияПеременных) Цикл
		ТекСтрока = СтрПолучитьСтроку(СтрРазделОбъявленияПеременных, Счетчик);
		ТекСтрокаДляРазбора = ТекСтрока;
		ТекСтрокаДляРазбора = СтрЗаменить(ТекСтрокаДляРазбора, "static ", "");
		М = РазобратьСтроку(СокрЛП(ТекСтрокаДляРазбора), " ");
		Если М.Количество() > 2 Тогда
			СписокСортировки.Добавить(М[2], ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	СтрРазделОбъявленияПеременных = "";
	СписокСортировки.СортироватьПоЗначению();
	Для А = 0 По СписокСортировки.Количество() - 1 Цикл
		СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + СписокСортировки.Получить(А).Представление + Символы.ПС;
	КонецЦикла;
КонецПроцедуры

Процедура СортироватьСтрРазделОбъявленияПеременныхДляПеречисления()
	СписокСортировки = Новый СписокЗначений;
	Для Счетчик = 1 По СтрЧислоСтрок(СтрРазделОбъявленияПеременныхДляПеречисления) Цикл
		ТекСтрока = СтрПолучитьСтроку(СтрРазделОбъявленияПеременныхДляПеречисления, Счетчик);
		Если Не (СокрЛП(ТекСтрока) = "") Тогда
			М = РазобратьСтроку(СокрЛП(ТекСтрока), " ");
			ЗначениеСортировки = М[6];
			ЗначениеСортировки = СтрЗаменить(ЗначениеСортировки, ";", "");
			ЗначениеСортировки = Число(ЗначениеСортировки);
			СписокСортировки.Добавить(ЗначениеСортировки, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	СтрРазделОбъявленияПеременныхДляПеречисления = "" + Символы.ПС;
	СписокСортировки.СортироватьПоЗначению();
	Для А = 0 По СписокСортировки.Количество() - 1 Цикл
		Если А = (СписокСортировки.Количество() - 1) Тогда
			СтрРазделОбъявленияПеременныхДляПеречисления = СтрРазделОбъявленияПеременныхДляПеречисления + СписокСортировки.Получить(А).Представление;
		Иначе
			СтрРазделОбъявленияПеременныхДляПеречисления = СтрРазделОбъявленияПеременныхДляПеречисления + СписокСортировки.Получить(А).Представление + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры//СортироватьСтрРазделОбъявленияПеременныхДляПеречисления

Функция Директивы(ИмяКонтекстКлассаАнгл)
	Если ИмяКонтекстКлассаАнгл = "OneScriptForms"  Тогда
		Стр = 
		"using System;
		|using System.Collections;
		|using System.Collections.Generic;
		|using System.Linq;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Reflection;
		|using System.Runtime.InteropServices;
		|using ScriptEngine.HostedScript.Library;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridViewColumnSortMode" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxDisplayStyle" Тогда
		Стр = 
		"using System;
		|using Microsoft.VisualBasic;
		|using ScriptEngine.HostedScript.Library;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Collections.Generic;
		|using System.Collections;
		|using System.Linq;
		|using System.Reflection;
		|using System.Runtime.CompilerServices;
		|using System.Runtime.InteropServices;
		|using System.Windows.Forms;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridViewRowCollection" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewElement" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewCellEventArgs" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewCellMouseEventArgs" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewCellCancelEventArgs" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewCellStyle" или 
		ИмяКонтекстКлассаАнгл = "AnchorStyles" или 
		ИмяКонтекстКлассаАнгл = "DockStyle" или 
		ИмяКонтекстКлассаАнгл = "DockPaddingEdges" или 
		ИмяКонтекстКлассаАнгл = "Padding" или 
		ИмяКонтекстКлассаАнгл = "DialogResult" или 
		ИмяКонтекстКлассаАнгл = "Day" или 
		ИмяКонтекстКлассаАнгл = "DataType" или 
		ИмяКонтекстКлассаАнгл = "DataRowState" или 
		ИмяКонтекстКлассаАнгл = "DataGridCell" или 
		ИмяКонтекстКлассаАнгл = "DataGridBoolColumn" или 
		ИмяКонтекстКлассаАнгл = "Cursors" или 
		ИмяКонтекстКлассаАнгл = "Cursor" или 
		ИмяКонтекстКлассаАнгл = "ContentAlignment" или 
		ИмяКонтекстКлассаАнгл = "ComboBoxStyle" или 
		ИмяКонтекстКлассаАнгл = "ColumnHeaderStyle" или 
		ИмяКонтекстКлассаАнгл = "ColumnHeader" или 
		ИмяКонтекстКлассаАнгл = "ColorDepth" или 
		ИмяКонтекстКлассаАнгл = "CloseReason" или 
		ИмяКонтекстКлассаАнгл = "BitmapData" или 
		ИмяКонтекстКлассаАнгл = "CheckState" или 
		ИмяКонтекстКлассаАнгл = "CharacterCasing" или 
		ИмяКонтекстКлассаАнгл = "BorderStyle" или 
		ИмяКонтекстКлассаАнгл = "DrawMode" или 
		ИмяКонтекстКлассаАнгл = "Encoding" или 
		ИмяКонтекстКлассаАнгл = "FontStyle" или 
		ИмяКонтекстКлассаАнгл = "FormatDateTimePicker" или 
		ИмяКонтекстКлассаАнгл = "FormBorderStyle" или 
		ИмяКонтекстКлассаАнгл = "FormStartPosition" или 
		ИмяКонтекстКлассаАнгл = "FormWindowState" или 
		ИмяКонтекстКлассаАнгл = "GridItemType" или 
		ИмяКонтекстКлассаАнгл = "HatchBrush" или 
		ИмяКонтекстКлассаАнгл = "HatchStyle" или 
		ИмяКонтекстКлассаАнгл = "HorizontalAlignment" или 
		ИмяКонтекстКлассаАнгл = "ImageCollection" или 
		ИмяКонтекстКлассаАнгл = "ImageFormat" или 
		ИмяКонтекстКлассаАнгл = "ImageLayout" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewImageCellLayout" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewAutoSizeColumnMode" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewAutoSizeColumnsMode" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewAutoSizeRowsMode" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewAutoSizeRowMode" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewSelectionMode" или 
		ИмяКонтекстКлассаАнгл = "ImageList" или 
		ИмяКонтекстКлассаАнгл = "ItemActivation" или 
		ИмяКонтекстКлассаАнгл = "Keys" или 
		ИмяКонтекстКлассаАнгл = "LeftRightAlignment" или 
		ИмяКонтекстКлассаАнгл = "LinkArea" или 
		ИмяКонтекстКлассаАнгл = "LinkLabelLinkBehavior" или 
		ИмяКонтекстКлассаАнгл = "ListViewAlignment" или 
		ИмяКонтекстКлассаАнгл = "ListViewCheckedItemCollection" или 
		ИмяКонтекстКлассаАнгл = "ListViewItem" или 
		ИмяКонтекстКлассаАнгл = "ListViewSelectedItemCollection" или 
		ИмяКонтекстКлассаАнгл = "ListViewSubItem" или 
		ИмяКонтекстКлассаАнгл = "MenuItemCollection" или 
		ИмяКонтекстКлассаАнгл = "MenuMerge" или 
		ИмяКонтекстКлассаАнгл = "MessageBox" или 
		ИмяКонтекстКлассаАнгл = "MessageBoxButtons" или 
		ИмяКонтекстКлассаАнгл = "MessageBoxIcon" или 
		ИмяКонтекстКлассаАнгл = "MouseButtons" или 
		ИмяКонтекстКлассаАнгл = "MouseFlags" или 
		ИмяКонтекстКлассаАнгл = "NotifyFilters" или 
		ИмяКонтекстКлассаАнгл = "Pen" или 
		ИмяКонтекстКлассаАнгл = "PictureBoxSizeMode" или 
		ИмяКонтекстКлассаАнгл = "PixelFormat" или 
		ИмяКонтекстКлассаАнгл = "Point" или 
		ИмяКонтекстКлассаАнгл = "Process" или 
		ИмяКонтекстКлассаАнгл = "ProcessWindowStyle" или 
		ИмяКонтекстКлассаАнгл = "PropertySort" или 
		ИмяКонтекстКлассаАнгл = "Rectangle" или 
		ИмяКонтекстКлассаАнгл = "RichTextBoxFinds" или 
		ИмяКонтекстКлассаАнгл = "RichTextBoxStreamType" или 
		ИмяКонтекстКлассаАнгл = "Screen" или 
		ИмяКонтекстКлассаАнгл = "ScrollBars" или 
		ИмяКонтекстКлассаАнгл = "ScrollEventType" или 
		ИмяКонтекстКлассаАнгл = "ScrollOrientation" или 
		ИмяКонтекстКлассаАнгл = "SeekOrigin" или 
		ИмяКонтекстКлассаАнгл = "SelectionMode" или 
		ИмяКонтекстКлассаАнгл = "Shortcut" или 
		ИмяКонтекстКлассаАнгл = "Size" или 
		ИмяКонтекстКлассаАнгл = "SolidBrush" или 
		ИмяКонтекстКлассаАнгл = "SortOrder" или 
		ИмяКонтекстКлассаАнгл = "SortType" или 
		ИмяКонтекстКлассаАнгл = "Sounds" или 
		ИмяКонтекстКлассаАнгл = "SpecialFolder" или 
		ИмяКонтекстКлассаАнгл = "StatusBarPanel" или 
		ИмяКонтекстКлассаАнгл = "StatusBarPanelAutoSize" или 
		ИмяКонтекстКлассаАнгл = "StatusBarPanelBorderStyle" или 
		ИмяКонтекстКлассаАнгл = "StatusBarPanelCollection" или 
		ИмяКонтекстКлассаАнгл = "StreamReader" или 
		ИмяКонтекстКлассаАнгл = "TabAlignment" или 
		ИмяКонтекстКлассаАнгл = "TabAppearance" или 
		ИмяКонтекстКлассаАнгл = "TabSizeMode" или 
		ИмяКонтекстКлассаАнгл = "TextureBrush" или 
		ИмяКонтекстКлассаАнгл = "ToolBarAppearance" или 
		ИмяКонтекстКлассаАнгл = "ToolBarButton" или 
		ИмяКонтекстКлассаАнгл = "ToolBarButtonCollection" или 
		ИмяКонтекстКлассаАнгл = "ToolBarButtonStyle" или 
		ИмяКонтекстКлассаАнгл = "ToolBarTextAlign" или 
		ИмяКонтекстКлассаАнгл = "TreeViewAction" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewTriState" или 
		ИмяКонтекстКлассаАнгл = "Version" или 
		ИмяКонтекстКлассаАнгл = "WatcherChangeTypes" или 
		ИмяКонтекстКлассаАнгл = "ControlStyles" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewRowHeadersWidthSizeMode" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewContentAlignment" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewGrouperStyle" или 
		ИмяКонтекстКлассаАнгл = "Appearance" Тогда
		Стр = 
		"using ScriptEngine.Machine.Contexts;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridViewCellCollection" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewColumn" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewButtonColumn" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxColumn" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxColumn" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewImageColumn" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewLinkColumn" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewTextBoxColumn" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewRow" или 
		ИмяКонтекстКлассаАнгл = "AnnuallyBoldedDates" или
		ИмяКонтекстКлассаАнгл = "DataTable" или
		ИмяКонтекстКлассаАнгл = "DataSet" или
		ИмяКонтекстКлассаАнгл = "DataRowView" или
		ИмяКонтекстКлассаАнгл = "DataRow" или
		ИмяКонтекстКлассаАнгл = "DataItem" или
		ИмяКонтекстКлассаАнгл = "DataColumn" или
		ИмяКонтекстКлассаАнгл = "ContextMenu" или
		ИмяКонтекстКлассаАнгл = "Collection" или
		ИмяКонтекстКлассаАнгл = "BoldedDates" или
		ИмяКонтекстКлассаАнгл = "Font" или
		ИмяКонтекстКлассаАнгл = "Graphics" или
		ИмяКонтекстКлассаАнгл = "GridColumnStylesCollection" или
		ИмяКонтекстКлассаАнгл = "GridItemCollection" или
		ИмяКонтекстКлассаАнгл = "LinkCollection" или
		ИмяКонтекстКлассаАнгл = "ListItem" или
		ИмяКонтекстКлассаАнгл = "ListViewColumnHeaderCollection" или
		ИмяКонтекстКлассаАнгл = "ListViewItemCollection" или
		ИмяКонтекстКлассаАнгл = "ListViewSubItemCollection" или
		ИмяКонтекстКлассаАнгл = "MainMenu" или
		ИмяКонтекстКлассаАнгл = "Menu" или
		ИмяКонтекстКлассаАнгл = "MonthlyBoldedDates" или
		ИмяКонтекстКлассаАнгл = "SelectionRange" или
		ИмяКонтекстКлассаАнгл = "TreeNodeCollection" или
		ИмяКонтекстКлассаАнгл = "Bitmap" или 
		ИмяКонтекстКлассаАнгл = "KeyPressEventArgs" или 
		ИмяКонтекстКлассаАнгл = "FileSystemWatcher" Тогда
		Стр = 
		"using System;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Application" или 
		ИмяКонтекстКлассаАнгл = "Environment" Тогда
		Стр = 
		"using ScriptEngine.Machine.Contexts;
		|using System.Reflection;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ArrayList" или 
		ИмяКонтекстКлассаАнгл = "HashTable" Тогда
		Стр = 
		"using System.Collections;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Brush" или 
		ИмяКонтекстКлассаАнгл = "FileDialog" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewBand" или 
		ИмяКонтекстКлассаАнгл = "DataGridColumnStyle" или 
		ИмяКонтекстКлассаАнгл = "ContainerControl" или 
		ИмяКонтекстКлассаАнгл = "Component" или 
		ИмяКонтекстКлассаАнгл = "CommonDialog" или 
		ИмяКонтекстКлассаАнгл = "Image" или 
		ИмяКонтекстКлассаАнгл = "ListControl" или 
		ИмяКонтекстКлассаАнгл = "ScrollableControl" или 
		ИмяКонтекстКлассаАнгл = "TextBoxBase" или 
		ИмяКонтекстКлассаАнгл = "UpDownBase" или 
		ИмяКонтекстКлассаАнгл = "ButtonBase" Тогда
		Стр = 
		"
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Button" или 
		ИмяКонтекстКлассаАнгл = "DateTimePicker" или 
		ИмяКонтекстКлассаАнгл = "DataGrid" или 
		ИмяКонтекстКлассаАнгл = "EventArgs" или 
		ИмяКонтекстКлассаАнгл = "ComboBoxObjectCollection" или 
		ИмяКонтекстКлассаАнгл = "Color" или 
		ИмяКонтекстКлассаАнгл = "GroupBox" или 
		ИмяКонтекстКлассаАнгл = "HScrollBar" или 
		ИмяКонтекстКлассаАнгл = "Label" или 
		ИмяКонтекстКлассаАнгл = "LinkLabel" или 
		ИмяКонтекстКлассаАнгл = "MonthCalendar" или 
		ИмяКонтекстКлассаАнгл = "NumericUpDown" или 
		ИмяКонтекстКлассаАнгл = "Panel" или 
		ИмяКонтекстКлассаАнгл = "PictureBox" или 
		ИмяКонтекстКлассаАнгл = "ProgressBar" или 
		ИмяКонтекстКлассаАнгл = "PropertyGrid" или 
		ИмяКонтекстКлассаАнгл = "RadioButton" или 
		ИмяКонтекстКлассаАнгл = "Splitter" или 
		ИмяКонтекстКлассаАнгл = "StatusBar" или 
		ИмяКонтекстКлассаАнгл = "TabControl" или 
		ИмяКонтекстКлассаАнгл = "TabPage" или 
		ИмяКонтекстКлассаАнгл = "TextBox" или 
		ИмяКонтекстКлассаАнгл = "ToolBar" или 
		ИмяКонтекстКлассаАнгл = "TreeView" или 
		ИмяКонтекстКлассаАнгл = "UserControl" или 
		ИмяКонтекстКлассаАнгл = "VScrollBar" или 
		ИмяКонтекстКлассаАнгл = "CheckBox" Тогда
		Стр = 
		"using System;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Reflection;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Clipboard" Тогда
		Стр = 
		"using System;
		|using ScriptEngine.Machine.Contexts;
		|using System.Windows.Forms;
		|using System.Threading;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "CollectionBase" или 
		ИмяКонтекстКлассаАнгл = "ScrollBar" Тогда
		Стр = 
		"using System;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ColorDialog" или 
		ИмяКонтекстКлассаАнгл = "FontDialog" или 
		ИмяКонтекстКлассаАнгл = "OpenFileDialog" или 
		ИмяКонтекстКлассаАнгл = "SaveFileDialog" или 
		ИмяКонтекстКлассаАнгл = "FolderBrowserDialog" Тогда
		Стр = 
		"using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Threading;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ComboBox" или 
		ИмяКонтекстКлассаАнгл = "DataGridView" Тогда
		Стр = 
		"using System;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Windows.Forms;
		|using System.Reflection;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Control" Тогда
		Стр = 
		"using System;
		|using System.Linq;
		|using System.Reflection;
		|using System.Runtime.InteropServices;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridViewColumnCollection" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewCell" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewButtonCell" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxCell" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxCell" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewImageCell" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewLinkCell" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewTextBoxCell" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewHeaderCell" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewColumnHeaderCell" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewRowHeaderCell" или 
		ИмяКонтекстКлассаАнгл = "ControlEventArgs" или 
		ИмяКонтекстКлассаАнгл = "DictionaryEntry" или 
		ИмяКонтекстКлассаАнгл = "DataGridTableStyle" или 
		ИмяКонтекстКлассаАнгл = "DataGridTextBoxColumn" или 
		ИмяКонтекстКлассаАнгл = "GridItem" или 
		ИмяКонтекстКлассаАнгл = "Link" или 
		ИмяКонтекстКлассаАнгл = "ListBoxSelectedObjectCollection" или 
		ИмяКонтекстКлассаАнгл = "ManagedProperty" или 
		ИмяКонтекстКлассаАнгл = "Math" или 
		ИмяКонтекстКлассаАнгл = "MenuItem" или 
		ИмяКонтекстКлассаАнгл = "NotifyIcon" или 
		ИмяКонтекстКлассаАнгл = "PropertyValueChangedEventArgs" или 
		ИмяКонтекстКлассаАнгл = "SelectedGridItemChangedEventArgs" или
		ИмяКонтекстКлассаАнгл = "Timer" или 
		ИмяКонтекстКлассаАнгл = "ToolTip" или
		ИмяКонтекстКлассаАнгл = "TreeNode" или
		ИмяКонтекстКлассаАнгл = "CancelEventArgs" или 
		ИмяКонтекстКлассаАнгл = "ColumnClickEventArgs" или 
		ИмяКонтекстКлассаАнгл = "FileSystemEventArgs" или 
		ИмяКонтекстКлассаАнгл = "FormClosingEventArgs" или 
		ИмяКонтекстКлассаАнгл = "ItemCheckEventArgs" или 
		ИмяКонтекстКлассаАнгл = "KeyEventArgs" или 
		ИмяКонтекстКлассаАнгл = "LabelEditEventArgs" или 
		ИмяКонтекстКлассаАнгл = "LinkClickedEventArgs" или 
		ИмяКонтекстКлассаАнгл = "LinkLabelLinkClickedEventArgs" или 
		ИмяКонтекстКлассаАнгл = "MouseEventArgs" или 
		ИмяКонтекстКлассаАнгл = "NodeLabelEditEventArgs" или 
		ИмяКонтекстКлассаАнгл = "PaintEventArgs" или 
		ИмяКонтекстКлассаАнгл = "RenamedEventArgs" или 
		ИмяКонтекстКлассаАнгл = "ScrollEventArgs" или 
		ИмяКонтекстКлассаАнгл = "ToolBarButtonClickEventArgs" или 
		ИмяКонтекстКлассаАнгл = "TreeViewCancelEventArgs" или 
		ИмяКонтекстКлассаАнгл = "TreeViewEventArgs" или 
		ИмяКонтекстКлассаАнгл = "Action" Тогда
		Стр = 
		"using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataColumnCollection" или 
		ИмяКонтекстКлассаАнгл = "TabPageCollection" или 
		ИмяКонтекстКлассаАнгл = "DataTableCollection" Тогда
		Стр = 
		"using System;
		|using System.Collections;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridComboBoxColumnStyle" Тогда
		Стр = 
		"using System;
		|using ScriptEngine.Machine.Contexts;
		|using System.Windows.Forms;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ControlCollection" Тогда
		Стр = 
		"using System.Collections.Generic;
		|using System.Collections;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridTextBox" или 
		ИмяКонтекстКлассаАнгл = "GridTableStylesCollection" или 
		ИмяКонтекстКлассаАнгл = "Icon" или 
		ИмяКонтекстКлассаАнгл = "ListBoxSelectedIndexCollection" или 
		ИмяКонтекстКлассаАнгл = "Stream" Тогда
		Стр = 
		"using System;
		|using ScriptEngine.Machine.Contexts;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataRowCollection" Тогда
		Стр = 
		"using System;
		|using System.Collections;
		|using ScriptEngine.Machine.Contexts;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataView" Тогда
		Стр = 
		"using System.Collections;
		|using ScriptEngine.Machine.Contexts;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "FormsCollection" Тогда
		Стр = 
		"using System.Collections;
		|using System.Collections.Generic;
		|using ScriptEngine.Machine.Contexts;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ExtractIconClass" Тогда
		Стр = 
		"using System;
		|using System.Runtime.InteropServices;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "FlatStyle" или 
		ИмяКонтекстКлассаАнгл = "View" Тогда
		Стр = 
		"using ScriptEngine.Machine.Contexts;
		|using System.Windows.Forms;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Form" Тогда
		Стр = 
		"using System;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Windows.Forms;
		|using System.Reflection;
		|using System.Runtime.InteropServices;
		|using System.Threading;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "InputBox" Тогда
		Стр = 
		"using ScriptEngine.Machine.Contexts;
		|using System.Threading;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListBox" Тогда
		Стр = 
		"using System;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Windows.Forms;
		|using System.Drawing;
		|using System.Reflection;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListBoxObjectCollection" или 
		ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxCellObjectCollection" или 
		ИмяКонтекстКлассаАнгл = "Type" Тогда
		Стр = 
		"using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Reflection;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListView" Тогда
		Стр = 
		"using System;
		|using System.Collections;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Reflection;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ProcessStartInfo" Тогда
		Стр = 
		"using System;
		|using ScriptEngine.Machine.Contexts;
		|using Microsoft.VisualBasic;
		|using System.Security;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "RichTextBox" Тогда
		Стр = 
		"using System;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Reflection;
		|using System.Runtime.InteropServices;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "SortedList" Тогда
		Стр = 
		"using System.Collections;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|using System.Runtime.CompilerServices;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Sound" Тогда
		Стр = 
		"using ScriptEngine.Machine.Contexts;
		|using System.Runtime.InteropServices;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridViewGrouper" Тогда
		Стр = 
		"using System;
		|using System.Windows.Forms;
		|using System.Windows.Forms.Design;
		|using System.Text;
		|using System.Text.RegularExpressions;
		|using System.Runtime.Serialization;
		|using System.Reflection;
		|using System.Linq;
		|using System.Linq.Expressions;
		|using System.IO;
		|using System.Drawing;
		|using System.Drawing.Design;
		|using System.Diagnostics;
		|using System.Data;
		|using System.ComponentModel;
		|using System.Collections;
		|using System.Collections.Generic;
		|using Subro.IO;
		|using ScriptEngine.Machine;
		|using ScriptEngine.Machine.Contexts;
		|
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridViewGrouperControl" Тогда
		Стр = 
		"using System;
		|using System.Collections.Generic;
		|using System.ComponentModel;
		|using System.Drawing;
		|using System.Windows.Forms;
		|using ScriptEngine.Machine.Contexts;
		|using ScriptEngine.Machine;
		|
		|";
		Возврат Стр;
	КонецЕсли;
	
КонецФункции//Директивы

Функция Шапка(ИмяКонтекстКлассаАнгл, ИмяКонтекстКлассаРус)
	Стр = "";
	Если ИмяКонтекстКлассаАнгл = "OneScriptForms" Тогда
		Стр = Стр + 
		"
		|    [ContextClass(""" + ИмяКонтекстКлассаРус + """, """ + ИмяКонтекстКлассаАнгл + """)]
		|    public class " + ИмяКонтекстКлассаАнгл + " : AutoContext<" + ИмяКонтекстКлассаАнгл + ">
		|    {";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ControlCollection" Тогда
		Стр = Стр + 
		"
		|    [ContextClass(""Кл" + ИмяКонтекстКлассаРус + """, ""Cl" + ИмяКонтекстКлассаАнгл + """)]
		|    public class Cl" + ИмяКонтекстКлассаАнгл + " : AutoContext<Cl" + ИмяКонтекстКлассаАнгл + ">, ICollectionContext, IEnumerable<IValue>
		|    {";
	Иначе
		Стр = Стр + 
		"
		|    [ContextClass(""Кл" + ИмяКонтекстКлассаРус + """, ""Cl" + ИмяКонтекстКлассаАнгл + """)]
		|    public class Cl" + ИмяКонтекстКлассаАнгл + " : AutoContext<Cl" + ИмяКонтекстКлассаАнгл + ">
		|    {";
	КонецЕсли;
	Возврат Стр;
КонецФункции

Функция РазделОбъявленияПеременных(ИмяФайлаЧленов, ИмяКласса)
	Если ИмяКласса = "OneScriptForms" Тогда
		Стр = 
		"        [DllImport(""user32"", CharSet = CharSet.Ansi, SetLastError = true)] public static extern int WaitMessage();
		|        [DllImport(""User32.dll"")] static extern void mouse_event(uint dwFlags, int dx, int dy, int dwData, UIntPtr dwExtraInfo);
		|        public static ClForm FirstForm = null;
		|        public static IValue Event = null;
		|        public static string EventString = """";
		|        public static System.Collections.Hashtable hashtable = new Hashtable();
		|        public static System.Random Random = new Random();
		|        public static DateTime gridMouseDownTime = System.DateTime.Now;// для срабатывания двойного клика в ячейке DataGridTextBoxColumn сетки данных
		|		
		|        public static bool useMainForm = true;
		|        public static bool handleEvents = false;
		|        public static FormsCollection formsCollection;
		|        private static OneScriptForms instance;
		|        private static object syncRoot = new Object();
		|		
		|        public static bool goOn = true;";
	ИначеЕсли ИмяКласса = "ManagedProperty" Тогда
		Стр = 
		"        private IValue managedObject;
		|        private string managedProperty;
		|        private IValue ratio;";
	ИначеЕсли ИмяКласса = "ListBoxObjectCollection" или
			  ИмяКласса = "ListBoxSelectedObjectCollection" Тогда
		Стр = 
		"        public ClListBox M_obj;";
	ИначеЕсли ИмяКласса = "BoldedDates" или 
			ИмяКласса = "AnnuallyBoldedDates" или 
			ИмяКласса = "MonthlyBoldedDates" Тогда
		Стр = 
		"        public osf.MonthCalendar M_MonthCalendar;";
	ИначеЕсли ИмяКласса = "MonthCalendar" Тогда
		Стр = 
		"        private ClAnnuallyBoldedDates annuallyBoldedDates;
		|        private ClBoldedDates boldedDates;
		|        private ClMonthlyBoldedDates monthlyBoldedDates;";
	ИначеЕсли ИмяКласса = "ComboBox" Тогда
		Стр = 
		"        private ClComboBoxObjectCollection items;
		|        private ClArrayList heights = new ClArrayList();";
	ИначеЕсли ИмяКласса = "ComboBoxObjectCollection" Тогда
		Стр = 
		"        public ArrayList heightItems;
		|        public ClComboBox m_obj;";
		
		
		
	Иначе
		Стр = "";
	КонецЕсли;
	Возврат Стр;
КонецФункции//РазделОбъявленияПеременных

Функция Конструктор(ИмяФайлаЧленов, ИмяКласса)
	Если ИмяКласса = "OneScriptForms" Тогда
		Стр = 
		"        public static OneScriptForms getInstance()
		|        {
		|            if (instance == null)
		|            {
		|                lock (syncRoot)
		|                {
		|                    if (instance == null)
		|                    {
		|                        instance = new OneScriptForms();
		|                        formsCollection = new FormsCollection();
		|                    }
		|                }
		|            }
		|            return instance;
		|        }
		|
		|        [ScriptConstructor]
		|        public static IRuntimeContextInstance Constructor()
		|        {
		|            return getInstance();
		|        }
		|";
	ИначеЕсли ИмяКласса = "DataGridViewGrouperControl" Тогда
		Стр = 
		"        public ClDataGridViewGrouperControl()
		|        {
		|            DataGridViewGrouperControl DataGridViewGrouperControl1 = new DataGridViewGrouperControl();
		|            DataGridViewGrouperControl1.dll_obj = this;
		|            Base_obj = DataGridViewGrouperControl1;
		|        }
		|		
		|        public ClDataGridViewGrouperControl(Subro.Controls.DataGridViewGrouper p1)
		|        {
		|            DataGridViewGrouperControl DataGridViewGrouperControl1 = new DataGridViewGrouperControl();
		|            DataGridViewGrouperControl1.dll_obj = this;
		|            Base_obj = DataGridViewGrouperControl1;
		|
		|            DataGridViewGrouperControl1.Grouper = p1;
		|            var prop = DataGridViewGrouperControl1.FindProperty(p1.GroupOn);
		|            DataGridViewGrouperControl1.CmbFields.SelectedItem = prop;
		|            if (prop == null)
		|            {
		|                // Значит колонка группировки не задана. Нужно усановить группировку по первой колонке и снять флажок Группировать
		|                DataGridViewGrouperControl1.Grouper.SetGroupOn(DataGridViewGrouperControl1.Grouper.DataGridView.Columns[0]);
		|                DataGridViewGrouperControl1.Chk.CheckState = CheckState.Unchecked;
		|            }
		|        }
		|		
		|        public ClDataGridViewGrouperControl(DataGridViewGrouperControl p1)
		|        {
		|            DataGridViewGrouperControl DataGridViewGrouperControl1 = p1;
		|            DataGridViewGrouperControl1.dll_obj = this;
		|            Base_obj = DataGridViewGrouperControl1;
		|        }
		|";
	ИначеЕсли ИмяКласса = "DataGridViewGrouper" Тогда
		Стр = 
		"        public ClDataGridViewGrouper()
		|        {
		|            DataGridViewGrouper DataGridViewGrouper1 = new DataGridViewGrouper();
		|            DataGridViewGrouper1.dll_obj = this;
		|            Base_obj = DataGridViewGrouper1;
		|        }
		|		
		|        public ClDataGridViewGrouper(osf.ClDataGridView p1)
		|        {
		|            DataGridViewGrouper DataGridViewGrouper1 = new DataGridViewGrouper(p1.Base_obj.M_DataGridView);
		|            DataGridViewGrouper1.dll_obj = this;
		|            Base_obj = DataGridViewGrouper1;
		|        }
		|
		|        public ClDataGridViewGrouper(DataGridViewGrouper p1)
		|        {
		|            DataGridViewGrouper DataGridViewGrouper1 = p1;
		|            DataGridViewGrouper1.dll_obj = this;
		|            Base_obj = DataGridViewGrouper1;
		|        }
		|";
	ИначеЕсли ИмяКласса = "DataRowView" Тогда
		Стр = 
		"        public ClDataRowView()
		|        {
		|            DataRowView DataRowView1 = new DataRowView();
		|            DataRowView1.dll_obj = this;
		|            Base_obj = DataRowView1;
		|        }//end_constr
		|		
		|        public ClDataRowView(DataRowView p1)
		|        {
		|            DataRowView DataRowView1 = p1;
		|            DataRowView1.dll_obj = this;
		|            Base_obj = DataRowView1;
		|        }//end_constr
		|
		|        public ClDataRowView(System.Data.DataRowView p1)
		|        {
		|            DataRowView DataRowView1 = new DataRowView(p1);
		|            DataRowView1.dll_obj = this;
		|            Base_obj = DataRowView1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "DataView" Тогда
		Стр = 
		"        public ClDataView()
		|        {
		|            DataView DataView1 = new DataView();
		|            DataView1.dll_obj = this;
		|            Base_obj = DataView1;
		|        }//end_constr
		|		
		|        public ClDataView(DataView p1)
		|        {
		|            DataView DataView1 = p1;
		|            DataView1.dll_obj = this;
		|            Base_obj = DataView1;
		|        }//end_constr
		|        
		|        public ClDataView(System.Data.DataView p1)
		|        {
		|            DataView DataView1 = new DataView(p1);
		|            DataView1.dll_obj = this;
		|            Base_obj = DataView1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "DataGridComboBoxColumnStyle" Тогда
		Стр = 
		"        public ClDataGridComboBoxColumnStyle()
		|        {
		|            DataGridComboBoxColumn DataGridComboBoxColumnStyle1 = new DataGridComboBoxColumn();
		|            DataGridComboBoxColumnStyle1.dll_obj = this;
		|            Base_obj = DataGridComboBoxColumnStyle1;
		|        }//end_constr
		|
		|        public ClDataGridComboBoxColumnStyle(DataGridComboBoxColumn p1)
		|        {
		|            DataGridComboBoxColumn DataGridComboBoxColumnStyle1 = p1;
		|            DataGridComboBoxColumnStyle1.dll_obj = this;
		|            Base_obj = DataGridComboBoxColumnStyle1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "DictionaryEntry" Тогда
		Стр = 
		"        public ClDictionaryEntry(IValue p1, IValue p2)
		|        {
		|            DictionaryEntry DictionaryEntry1 = new DictionaryEntry(p1, p2);
		|            DictionaryEntry1.dll_obj = this;
		|            Base_obj = DictionaryEntry1;
		|        }//end_constr
		|		
		|        public ClDictionaryEntry(DictionaryEntry p1)
		|        {
		|            DictionaryEntry DictionaryEntry1 = p1;
		|            DictionaryEntry1.dll_obj = this;
		|            Base_obj = DictionaryEntry1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "HatchBrush" Тогда
		Стр = 
		"        public ClHatchBrush(int p1, osf.Color p2, osf.Color p3 = null)
		|        {
		|            HatchBrush HatchBrush1 = new HatchBrush(p1, p2, p3);
		|            HatchBrush1.dll_obj = this;
		|            Base_obj = HatchBrush1;
		|        }//end_constr
		|		
		|        public ClHatchBrush(HatchBrush p1)
		|        {
		|            HatchBrush HatchBrush1 = p1;
		|            HatchBrush1.dll_obj = this;
		|            Base_obj = HatchBrush1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ImageList" Тогда
		Стр = 
		"        public ClImageList()
		|        {
		|            ImageList ImageList1 = new ImageList();
		|            ImageList1.dll_obj = this;
		|            Base_obj = ImageList1;
		|        }//end_constr
		|		
		|        public ClImageList(ImageList p1)
		|        {
		|            ImageList ImageList1 = p1;
		|            ImageList1.dll_obj = this;
		|            Base_obj = ImageList1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "DataGridCell" Тогда
		Стр = 
		"        public ClDataGridCell(int p1, int p2)
		|        {
		|            DataGridCell DataGridCell1 = new DataGridCell(p1, p2);
		|            DataGridCell1.dll_obj = this;
		|            Base_obj = DataGridCell1;
		|        }//end_constr
		|		
		|        public ClDataGridCell(DataGridCell p1)
		|        {
		|            DataGridCell DataGridCell1 = p1;
		|            DataGridCell1.dll_obj = this;
		|            Base_obj = DataGridCell1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "DataColumn" Тогда
		Стр = 
		"        public ClDataColumn()
		|        {
		|            DataColumn DataColumn1 = new DataColumn();
		|            DataColumn1.dll_obj = this;
		|            Base_obj = DataColumn1;
		|        }//end_constr
		|
		|        public ClDataColumn(string p1)
		|        {
		|            DataColumn DataColumn1 = new DataColumn(p1);
		|            DataColumn1.dll_obj = this;
		|            Base_obj = DataColumn1;
		|        }//end_constr
		|		
		|        public ClDataColumn(string p1, System.Type p2)
		|        {
		|            DataColumn DataColumn1 = new DataColumn(p1, p2);
		|            DataColumn1.dll_obj = this;
		|            Base_obj = DataColumn1;
		|        }//end_constr
		|
		|        public ClDataColumn(DataColumn p1)
		|        {
		|            DataColumn DataColumn1 = p1;
		|            DataColumn1.dll_obj = this;
		|            Base_obj = DataColumn1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "DataTable" Тогда
		Стр = 
		"        public ClDataTable()
		|        {
		|            DataTable DataTable1 = new DataTable();
		|            DataTable1.dll_obj = this;
		|            Base_obj = DataTable1;
		|        }//end_constr
		|		
		|        public ClDataTable(string p1)
		|        {
		|            DataTable DataTable1 = new DataTable(p1);
		|            DataTable1.dll_obj = this;
		|            Base_obj = DataTable1;
		|        }//end_constr
		|
		|        public ClDataTable(DataTable p1)
		|        {
		|            DataTable DataTable1 = p1;
		|            DataTable1.dll_obj = this;
		|            Base_obj = DataTable1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "LinkArea" Тогда
		Стр = 
		"        public ClLinkArea(int p1, int p2)
		|        {
		|            LinkArea LinkArea1 = new LinkArea(p1, p2);
		|            LinkArea1.dll_obj = this;
		|            Base_obj = LinkArea1;
		|        }//end_constr
		|		
		|        public ClLinkArea(LinkArea p1)
		|        {
		|            LinkArea LinkArea1 = p1;
		|            LinkArea1.dll_obj = this;
		|            Base_obj = LinkArea1;
		|        }//end_constr
		|		
		|        public ClLinkArea(System.Windows.Forms.LinkArea p1)
		|        {
		|            LinkArea LinkArea1 = new LinkArea(p1);
		|            LinkArea1.dll_obj = this;
		|            Base_obj = LinkArea1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Link" Тогда
		Стр = 
		"        public ClLink()
		|        {
		|            Link Link1 = new Link();
		|            Link1.dll_obj = this;
		|            Base_obj = Link1;
		|        }//end_constr
		|		
		|        public ClLink(Link p1)
		|        {
		|            Link Link1 = p1;
		|            Link1.dll_obj = this;
		|            Base_obj = Link1;
		|        }//end_constr
		|        
		|        public ClLink(System.Windows.Forms.LinkLabel.Link p1)
		|        {
		|            Link Link1 = new Link(p1);
		|            Link1.dll_obj = this;
		|            Base_obj = Link1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Form" Тогда
		Стр = 
		"        public System.Windows.Forms.ContainerControl M_ContainerControl;
		|        private IRuntimeContextInstance script = null;
		|		
		|        public ClForm()
		|        {
		|            Form Form1 = new Form();
		|            Form1.dll_obj = this;
		|            Base_obj = Form1;
		|		
		|            OneScriptForms.formsCollection.Add(this);
		|            if (OneScriptForms.useMainForm)
		|            {
		|                if (OneScriptForms.FirstForm == null)
		|                {
		|                    OneScriptForms.FirstForm = this;
		|                }
		|            }
		|        }//end_constr
		|        ";
	ИначеЕсли ИмяКласса = "FormClosingEventArgs" Тогда
		Стр = 
		"        public ClFormClosingEventArgs()
		|        {
		|            FormClosingEventArgs FormClosingEventArgs1 = new FormClosingEventArgs(System.Windows.Forms.CloseReason.None, true);
		|            FormClosingEventArgs1.dll_obj = this;
		|            Base_obj = FormClosingEventArgs1;
		|        }//end_constr
		|
		|        public ClFormClosingEventArgs(FormClosingEventArgs p1)
		|        {
		|            FormClosingEventArgs FormClosingEventArgs1 = p1;
		|            FormClosingEventArgs1.dll_obj = this;
		|            Base_obj = FormClosingEventArgs1;
		|        }//end_constr
		|";		
	ИначеЕсли ИмяКласса = "Pen" Тогда
		Стр = 
		"        public ClPen(ClColor p1, float p2 = 1.0f)
		|        {
		|            Pen Pen1 = new Pen(p1.Base_obj.M_Color, p2);
		|            Pen1.dll_obj = this;
		|            Base_obj = Pen1;
		|        }//end_constr
		|		
		|        public ClPen(Pen p1)
		|        {
		|            Pen Pen1 = p1;
		|            Pen1.dll_obj = this;
		|            Base_obj = Pen1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Size" Тогда
		Стр = 
		"        public ClSize(int width, int height)
		|        {
		|            Size Size1 = new Size(width, height);
		|            Size1.dll_obj = this;
		|            Base_obj = Size1;
		|        }//end_constr
		|
		|        public ClSize(Size p1)
		|        {
		|            Size Size1 = p1;
		|            Size1.dll_obj = this;
		|            Base_obj = Size1;
		|        }//end_constr
		|		
		|        public ClSize(System.Drawing.Size p1)
		|        {
		|            Size Size1 = new Size(p1);
		|            Size1.dll_obj = this;
		|            Base_obj = Size1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Point" Тогда
		Стр = 
		"        public ClPoint(int x, int y)
		|        {
		|            Point Point1 = new Point(x, y);
		|            Point1.dll_obj = this;
		|            Base_obj = Point1;
		|        }//end_constr
		|
		|        public ClPoint(Point p1)
		|        {
		|            Point Point1 = p1;
		|            Point1.dll_obj = this;
		|            Base_obj = Point1;
		|        }//end_constr
		|		
		|        public ClPoint(System.Drawing.Point p1)
		|        {
		|            Point Point1 = new Point(p1);
		|            Point1.dll_obj = this;
		|            Base_obj = Point1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Rectangle" Тогда
		Стр = 
		"        public ClRectangle(int x = 0, int y = 0, int width = 0, int height = 0)
		|        {
		|            Rectangle Rectangle1 = new Rectangle(x, y, width, height);
		|            Rectangle1.dll_obj = this;
		|            Base_obj = Rectangle1;
		|            X = x;
		|            Y = y;
		|            Width = width;
		|            Height = height;
		|        }//end_constr
		|		
		|        public ClRectangle(Rectangle p1)
		|        {
		|            Rectangle Rectangle1 = p1;
		|            Rectangle1.dll_obj = this;
		|            Base_obj = Rectangle1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Clipboard"  или 
			ИмяКласса = "Math" или 
			ИмяКласса = "InputBox" Тогда
		Стр = "";
	ИначеЕсли ИмяКласса = "BoldedDates" Тогда
		Стр = 
		"        public System.DateTime[] M_Object
		|        {
		|            get { return M_MonthCalendar.BoldedDates; }
		|            set { M_MonthCalendar.BoldedDates = value; }
		|        }//end_constr
		|		";
	ИначеЕсли ИмяКласса = "AnnuallyBoldedDates" Тогда
		Стр = 
		"        public System.DateTime[] M_Object
		|        {
		|            get { return M_MonthCalendar.AnnuallyBoldedDates; }
		|            set { M_MonthCalendar.AnnuallyBoldedDates = value; }
		|        }//end_constr
		|		";
	ИначеЕсли ИмяКласса = "MonthlyBoldedDates" Тогда
		Стр = 
		"        public System.DateTime[] M_Object
		|        {
		|            get { return M_MonthCalendar.MonthlyBoldedDates; }
		|            set { M_MonthCalendar.MonthlyBoldedDates = value; }
		|        }//end_constr
		|		";
	ИначеЕсли ИмяКласса = "SolidBrush" Тогда
		Стр = 
		"        public ClSolidBrush(Color p1)
		|        {
		|            SolidBrush SolidBrush1 = new SolidBrush(p1.M_Color);
		|            SolidBrush1.dll_obj = this;
		|            Base_obj = SolidBrush1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "TextureBrush" Тогда
		Стр = 
		"        public ClTextureBrush(Image p1)
		|        {
		|            TextureBrush TextureBrush1 = new TextureBrush(p1.M_Image);
		|            TextureBrush1.dll_obj = this;
		|            Base_obj = TextureBrush1;
		|        }//end_constr
		|		
		|        public ClTextureBrush(TextureBrush p1)
		|        {
		|            TextureBrush TextureBrush1 = p1;
		|            TextureBrush1.dll_obj = this;
		|            Base_obj = TextureBrush1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Type" Тогда
		Стр = 
		"        public ClType(IValue p1)
		|        {
		|            dynamic Type1 = null;
		|            if (p1.SystemType.Name == ""Строка"")
		|            {
		|                string p2 = p1.AsString();
		|                try
		|                {
		|                    if (p2 == ""System.Drawing.Bitmap"")
		|                    {
		|                        Type1 = (new System.Drawing.Bitmap(10, 10)).GetType();
		|                    }
		|                    else
		|                    {
		|                        Type1 = osf.OneScriptForms.GetTypeFromName(p2);
		|                    }
		|                }
		|                catch { }
		|                if (Type1 != null)
		|                {
		|                    Base_obj = Type1;
		|                    return;
		|                }
		|                if (p2.Contains(""osf.""))
		|                {
		|                    try
		|                    {
		|                        var a = Assembly.GetExecutingAssembly();
		|                        var allTypes = a.GetTypes();
		|                        foreach (var type1 in allTypes)
		|                        {
		|                            string str1 = """";
		|                            string str2 = """";
		|                            try
		|                            {
		|                                str1 = type1.GetCustomAttribute<ContextClassAttribute>().GetName();
		|                                str2 = type1.GetCustomAttribute<ContextClassAttribute>().GetAlias();
		|                            }
		|                            catch { }
		|                            if ( type1.ToString() == p2)
		|                            {
		|                                Type1 = new Type(type1);
		|                                break;
		|                            }
		|                            else
		|                            {
		|                            }
		|                        }
		|                    }
		|                    catch { }
		|                }
		|                else
		|                {
		|                    try
		|                    {
		|                        var a = Assembly.GetExecutingAssembly();
		|                        var allTypes = a.GetTypes();
		|                        foreach (var type1 in allTypes)
		|                        {
		|                            string str1 = """";
		|                            string str2 = """";
		|                            try
		|                            {
		|                                str1 = type1.GetCustomAttribute<ContextClassAttribute>().GetName();
		|                                str2 = type1.GetCustomAttribute<ContextClassAttribute>().GetAlias();
		|                            }
		|                            catch { }
		|                            if (str1.Replace(""Кл"", """") == p2 || str2.Replace(""Cl"", """") == p2)
		|                            {
		|                                Type1 = new Type(type1);
		|                                break;
		|                            }
		|                            else
		|                            {
		|                            }
		|                        }
		|                    }
		|                    catch { }
		|                }
		|            }
		|            else
		|            {
		|                Type1 = new Type(p1.GetType());
		|            }
		|            Base_obj = Type1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Bitmap" Тогда
		Стр = 
		"        public ClBitmap(ClSize p1)
		|        {
		|            Bitmap Bitmap1 = new Bitmap(p1.Base_obj);
		|            Bitmap1.dll_obj = this;
		|            Base_obj = Bitmap1;
		|        }//end_constr
		|
		|        public ClBitmap(Image p1)
		|        {
		|            Bitmap Bitmap1 = new Bitmap(p1);
		|            Bitmap1.dll_obj = this;
		|            Base_obj = Bitmap1;
		|        }//end_constr
		|
		|        public ClBitmap(Image p1, ClSize p2)
		|        {
		|            Bitmap Bitmap1 = new Bitmap(p1, p2.Base_obj);
		|            Bitmap1.dll_obj = this;
		|            Base_obj = Bitmap1;
		|        }//end_constr
		|
		|        public ClBitmap(string p1)
		|        {
		|            Bitmap Bitmap1 = new Bitmap(p1);
		|            Bitmap1.dll_obj = this;
		|            Base_obj = Bitmap1;
		|        }//end_constr
		|
		|        public ClBitmap(ClStream p1)
		|        {
		|            Bitmap Bitmap1 = new Bitmap(p1.Base_obj);
		|            Bitmap1.dll_obj = this;
		|            Base_obj = Bitmap1;
		|        }//end_constr
		|
		|        public ClBitmap(ClBitmap p1)
		|        {
		|            Bitmap Bitmap1 = p1.Base_obj;
		|            Bitmap1.dll_obj = this;
		|            Base_obj = Bitmap1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "MenuItem" Тогда
		Стр = 
		"        public ClMenuItem()
		|        {
		|            MenuItem MenuItem1 = new MenuItem();
		|            MenuItem1.dll_obj = this;
		|            Base_obj = MenuItem1;
		|        }//end_constr
		|		
		|        public ClMenuItem(MenuItem p1)
		|        {
		|            MenuItem MenuItem1 = p1;
		|            MenuItem1.dll_obj = p1.dll_obj;
		|            Base_obj = MenuItem1;
		|            try
		|            {
		|                Click = p1.dll_obj.Click;
		|            }
		|            catch { }
		|        }//end_constr
		|
		|        public ClMenuItem(string p1 = """", IValue p2 = null, int p3 = 0)
		|        {
		|            MenuItem MenuItem1 = new MenuItem(p1, """", (System.Windows.Forms.Shortcut)p3);
		|            MenuItem1.dll_obj = this;
		|            Base_obj = MenuItem1;
		|		
		|            if (p2 != null)
		|            {
		|                Click = p2;
		|            }
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Font" Тогда
		Стр = 
		"        public ClFont(string p1 = null, float p2 = 6.0f, int p3 = 0)
		|        {
		|            Font Font1 = new Font(p1, p2, (System.Drawing.FontStyle)p3);
		|            Font1.dll_obj = this;
		|            Base_obj = Font1;
		|        }//end_constr
		|		
		|        public ClFont(Font p1)
		|        {
		|            Font Font1 = p1;
		|            Font1.dll_obj = this;
		|            Base_obj = Font1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ManagedProperty" Тогда
		Стр = 
		"        public ClManagedProperty(IValue p1, string p2, IValue p3 = null)
		|        {
		|            managedObject = p1;
		|            managedProperty = p2;
		|            ratio = p3;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "TabPage" Тогда
		Стр = 
		"        public ClTabPage(string p1 = null)
		|        {
		|            TabPage TabPage1 = new TabPage(p1);
		|            TabPage1.dll_obj = this;
		|            Base_obj = TabPage1;
		|        }//end_constr
		|		
		|        public ClTabPage(TabPage p1)
		|        {
		|            TabPage TabPage1 = p1;
		|            TabPage1.dll_obj = this;
		|            Base_obj = TabPage1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ListItem" Тогда
		Стр = 
		"        public ClListItem(string p1 = null, IValue p2 = null)
		|        {
		|            dynamic p3 = p2;
		|            if (p2 != null)
		|            {
		|                if (p2.GetType().ToString().Contains(""osf.""))
		|                {
		|                    p3 = ((dynamic)p2).Base_obj;
		|                }
		|            }
		|            ListItem ListItem1 = new ListItem(p1, p3);
		|            ListItem1.dll_obj = this;
		|            Base_obj = ListItem1;
		|        }//end_constr
		|		
		|        public ClListItem(ListItem p1)
		|        {
		|            ListItem ListItem1 = p1;
		|            ListItem1.dll_obj = this;
		|            Base_obj = ListItem1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Icon" Тогда
		Стр = 
		"    public ClIcon(string p1)
		|        {
		|            Icon Icon1 = new Icon(p1);
		|            Icon1.dll_obj = this;
		|            Base_obj = Icon1;
		|        }//end_constr
		|
		|        public ClIcon(string p1, int p2)
		|        {
		|            Icon Icon1 = new Icon(p1, p2);
		|            Icon1.dll_obj = this;
		|            Base_obj = Icon1;
		|        }//end_constr
		|
		|        public ClIcon(Icon p1)
		|        {
		|            Icon Icon1 = p1;
		|            Icon1.dll_obj = this;
		|            Base_obj = Icon1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ColumnHeader" Тогда
		Стр = 
		"        public ClColumnHeader()
		|        {
		|            ColumnHeader ColumnHeader1 = new ColumnHeader();
		|            ColumnHeader1.dll_obj = this;
		|            Base_obj = ColumnHeader1;
		|        }//end_constr
		|
		|        public ClColumnHeader(ColumnHeader p1)
		|        {
		|            ColumnHeader ColumnHeader1 = p1;
		|            ColumnHeader1.dll_obj = this;
		|            Base_obj = ColumnHeader1;
		|        }//end_constr
		|
		|        public ClColumnHeader(string p1, int p2, int p3)
		|        {
		|            ColumnHeader ColumnHeader1 = new ColumnHeader(p1, p2, (System.Windows.Forms.HorizontalAlignment)p3);
		|            ColumnHeader1.dll_obj = this;
		|            Base_obj = ColumnHeader1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ListViewItem" Тогда
		Стр = 
		"        public ClListViewItem(string p1 = """", int p2 = -1)
		|        {
		|            ListViewItem ListViewItem1 = new ListViewItem(p1, p2);
		|            ListViewItem1.dll_obj = this;
		|            Base_obj = ListViewItem1;
		|        }//end_constr
		|		
		|        public ClListViewItem(ListViewItem p1)
		|        {
		|            ListViewItem ListViewItem1 = p1;
		|            ListViewItem1.dll_obj = this;
		|            Base_obj = ListViewItem1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ListViewSubItem" Тогда
		Стр = 
		"        public ClListViewSubItem(string text = """")
		|        {
		|            ListViewSubItem ListViewSubItem1 = new ListViewSubItem(text);
		|            ListViewSubItem1.dll_obj = this;
		|            Base_obj = ListViewSubItem1;
		|        }//end_constr
		|
		|        public ClListViewSubItem(ListViewSubItem p1)
		|        {
		|            ListViewSubItem ListViewSubItem1 = p1;
		|            ListViewSubItem1.dll_obj = this;
		|            Base_obj = ListViewSubItem1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ProcessStartInfo" Тогда
		Стр = 
		"        public ClProcessStartInfo(string p1 = null, string p2 = null)
		|        {
		|            ProcessStartInfo ProcessStartInfo1 = new ProcessStartInfo(p1, p2);
		|            ProcessStartInfo1.dll_obj = this;
		|            Base_obj = ProcessStartInfo1;
		|        }//end_constr
		|
		|        public ClProcessStartInfo(ProcessStartInfo p1)
		|        {
		|            ProcessStartInfo ProcessStartInfo1 = p1;
		|            ProcessStartInfo1.dll_obj = this;
		|            Base_obj = ProcessStartInfo1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ProgressBar" Тогда
		Стр = 
		"        public ClProgressBar(bool p1)
		|        {
		|            ProgressBar ProgressBar1 = new ProgressBar(p1);
		|            ProgressBar1.dll_obj = this;
		|            Base_obj = ProgressBar1;
		|            if (p1)
		|            {
		|                ProgressBar1.M_ProgressBarV.dll_obj = this;
		|            }
		|            else
		|            {
		|                ProgressBar1.M_ProgressBarH.dll_obj = this;
		|            }
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "SelectionRange" Тогда
		Стр = 
		"        public ClSelectionRange()
		|        {
		|            SelectionRange SelectionRange1 = new SelectionRange();
		|            SelectionRange1.dll_obj = this;
		|            Base_obj = SelectionRange1;
		|        }//end_constr
		|		
		|        public ClSelectionRange(IValue p1, IValue p2)
		|        {
		|            SelectionRange SelectionRange1 = new SelectionRange(p1.AsDate(), p2.AsDate());
		|            SelectionRange1.dll_obj = this;
		|            Base_obj = SelectionRange1;
		|        }//end_constr
		|		
		|        public ClSelectionRange(SelectionRange p1)
		|        {
		|            SelectionRange SelectionRange1 = p1;
		|            SelectionRange1.dll_obj = this;
		|            Base_obj = SelectionRange1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "MonthCalendar" Тогда
		Стр = 
		"        public ClMonthCalendar()
		|        {
		|            MonthCalendar MonthCalendar1 = new MonthCalendar();
		|            MonthCalendar1.dll_obj = this;
		|            Base_obj = MonthCalendar1;
		|            boldedDates = new ClBoldedDates();
		|            boldedDates.M_MonthCalendar = Base_obj;
		|            annuallyBoldedDates = new ClAnnuallyBoldedDates();
		|            annuallyBoldedDates.M_MonthCalendar = Base_obj;
		|            monthlyBoldedDates = new ClMonthlyBoldedDates();
		|            monthlyBoldedDates.M_MonthCalendar = Base_obj;
		|        }//end_constr
		|
		|        public ClMonthCalendar(MonthCalendar p1)
		|        {
		|            MonthCalendar MonthCalendar1 = p1;
		|            MonthCalendar1.dll_obj = this;
		|            Base_obj = MonthCalendar1;
		|            boldedDates = new ClBoldedDates();
		|            boldedDates.M_MonthCalendar = Base_obj;
		|            annuallyBoldedDates = new ClAnnuallyBoldedDates();
		|            annuallyBoldedDates.M_MonthCalendar = Base_obj;
		|            monthlyBoldedDates = new ClMonthlyBoldedDates();
		|            monthlyBoldedDates.M_MonthCalendar = Base_obj;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "TreeNode" Тогда
		Стр = 
		"        public ClTreeNode()
		|        {
		|            TreeNode TreeNode1 = new TreeNode();
		|            TreeNode1.dll_obj = this;
		|            Base_obj = TreeNode1;
		|        }//end_constr
		|		
		|        public ClTreeNode(string p1)
		|        {
		|            TreeNode TreeNode1 = new TreeNode(p1);
		|            TreeNode1.dll_obj = this;
		|            Base_obj = TreeNode1;
		|        }//end_constr
		|		
		|        public ClTreeNode(TreeNode p1)
		|        {
		|            TreeNode TreeNode1 = p1;
		|            TreeNode1.dll_obj = this;
		|            Base_obj = TreeNode1;
		|        }//end_constr
		|		
		|        public ClTreeNode(System.Windows.Forms.TreeNode p1)
		|        {
		|            TreeNode TreeNode1 = new TreeNode(p1);
		|            TreeNode1.dll_obj = this;
		|            Base_obj = TreeNode1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ToolBarButton" Тогда
		Стр = 
		"        public ClToolBarButton(string p1 = null)
		|        {
		|            ToolBarButton ToolBarButton1 = new ToolBarButton(p1);
		|            ToolBarButton1.dll_obj = this;
		|            Base_obj = ToolBarButton1;
		|        }//end_constr
		|		
		|        public ClToolBarButton(ToolBarButton p1)
		|        {
		|            ToolBarButton ToolBarButton1 = p1;
		|            ToolBarButton1.dll_obj = this;
		|            Base_obj = ToolBarButton1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "NotifyIcon" Тогда
		Стр = 
		"        public ClNotifyIcon()
		|        {
		|            NotifyIcon NotifyIcon1 = new NotifyIcon();
		|            NotifyIcon1.dll_obj = this;
		|            Base_obj = NotifyIcon1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "GridItemCollection" Тогда
		Стр = 
		"        public ClGridItemCollection(GridItemCollection p1)
		|        {
		|            GridItemCollection GridItemCollection1 = p1;
		|            GridItemCollection1.dll_obj = this;
		|            Base_obj = GridItemCollection1;
		|        }//end_constr
		|
		|        public ClGridItemCollection(System.Windows.Forms.GridItemCollection p1)
		|        {
		|            GridItemCollection GridItemCollection1 = new GridItemCollection(p1);
		|            GridItemCollection1.dll_obj = this;
		|            Base_obj = GridItemCollection1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ListBoxSelectedObjectCollection" Тогда
		Стр = 
		"        public ClListBoxSelectedObjectCollection(ListBoxSelectedObjectCollection p1, ClListBox p2)
		|        {
		|            ListBoxSelectedObjectCollection ListBoxSelectedObjectCollection1 = p1;
		|            ListBoxSelectedObjectCollection1.dll_obj = this;
		|            Base_obj = ListBoxSelectedObjectCollection1;
		|            M_obj = p2;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Version" Тогда
		Стр = 
		"        public ClVersion(Version p1)
		|        {
		|            Version Version1 = p1;
		|            Version1.dll_obj = this;
		|            Base_obj = Version1;
		|        }//end_constr
		|
		|        public ClVersion(System.Version p1)
		|        {
		|            Version Version1 = new Version(p1);
		|            Version1.dll_obj = this;
		|            Base_obj = Version1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "StreamReader" Тогда
		Стр = 
		"        public ClStreamReader(string p1)
		|        {
		|            StreamReader StreamReader1 = new StreamReader(p1);
		|            StreamReader1.dll_obj = this;
		|            Base_obj = StreamReader1;
		|        }//end_constr
		|		
		|        public ClStreamReader(StreamReader p1)
		|        {
		|            StreamReader StreamReader1 = p1;
		|            StreamReader1.dll_obj = this;
		|            Base_obj = StreamReader1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Padding" Тогда
		Стр = 
		"        public ClPadding()
		|        {
		|            Padding Padding1 = new Padding();
		|            Padding1.dll_obj = this;
		|            Base_obj = Padding1;
		|        }//end_constr
		|		
		|        public ClPadding(int p1)
		|        {
		|            Padding Padding1 = new Padding(p1);
		|            Padding1.dll_obj = this;
		|            Base_obj = Padding1;
		|        }//end_constr
		|
		|        public ClPadding(int p1, int p2, int p3, int p4)
		|        {
		|            Padding Padding1 = new Padding(p1, p2, p3, p4);
		|            Padding1.dll_obj = this;
		|            Base_obj = Padding1;
		|        }//end_constr
		|
		|        public ClPadding(Padding p1)
		|        {
		|            Padding Padding1 = p1;
		|            Padding1.dll_obj = this;
		|            Base_obj = Padding1;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "Action" Тогда
		Стр = 
		"        public ClAction(IRuntimeContextInstance script, string methodName, IValue param = null)
		|        {
		|            Script = script;
		|            MethodName = methodName;
		|            Parameter = param;
		|        }//end_constr
		|";
	ИначеЕсли ИмяКласса = "ControlCollection" Тогда
		Стр = 
		"        public ClControlCollection()
		|        {
		|            ControlCollection ControlCollection1 = new ControlCollection();
		|            ControlCollection1.dll_obj = this;
		|            Base_obj = ControlCollection1;
		|        }//end_constr
		|		
		|        public ClControlCollection(ControlCollection p1)
		|        {
		|            ControlCollection ControlCollection1 = p1;
		|            ControlCollection1.dll_obj = this;
		|            Base_obj = ControlCollection1;
		|        }//end_constr
		|
		|        public int Count()
		|        {
		|            return CountControl;
		|        }
		|
		|        public CollectionEnumerator GetManagedIterator()
		|        {
		|            return new CollectionEnumerator(this);
		|        }
		|
		|        IEnumerator IEnumerable.GetEnumerator()
		|        {
		|            return ((IEnumerable<IValue>)this).GetEnumerator();
		|        }
		|
		|        IEnumerator<IValue> IEnumerable<IValue>.GetEnumerator()
		|        {
		|            foreach (var item in Base_obj.M_ControlCollection)
		|            {
		|                yield return (((dynamic)item).M_Object.dll_obj as IValue);
		|            }
		|        }
		|";
	ИначеЕсли ИмяКласса = "RichTextBox" Тогда
		Стр = 
		"        public ClRichTextBox()
		|        {
		|            RichTextBox RichTextBox1 = new RichTextBox();
		|            RichTextBox1.dll_obj = this;
		|            Base_obj = RichTextBox1;
		|            ContextMenu = EnableContextMenu(this);
		|        }//end_constr
		|
		|        public ClRichTextBox(RichTextBox p1)
		|        {
		|            RichTextBox RichTextBox1 = p1;
		|            RichTextBox1.dll_obj = this;
		|            Base_obj = RichTextBox1;
		|            ContextMenu = EnableContextMenu(this);
		|        }//end_constr
		|		
		|        public ClContextMenu EnableContextMenu(ClRichTextBox rtb)
		|        {
		|            ClContextMenu cm = new ClContextMenu();
		|            ClMenuItem Undo = new ClMenuItem(""Отменить"");
		|            Undo.Base_obj.M_MenuItem.Click += (sender, e) => rtb.Undo();
		|            cm.MenuItems.Add(Undo);
		|
		|            ClMenuItem Redo = new ClMenuItem(""Вернуть"");
		|            Redo.Base_obj.M_MenuItem.Click += (sender, e) => rtb.Redo();
		|            cm.MenuItems.Add(Redo);
		|
		|            cm.MenuItems.Add(new ClMenuItem(""-""));
		|
		|            ClMenuItem Cut = new ClMenuItem(""Вырезать"");
		|            Cut.Base_obj.M_MenuItem.Click += (sender, e) => rtb.Cut();
		|            cm.MenuItems.Add(Cut);
		|
		|            ClMenuItem Copy = new ClMenuItem(""Копировать"");
		|            Copy.Base_obj.M_MenuItem.Click += (sender, e) => rtb.Copy();
		|            cm.MenuItems.Add(Copy);
		|
		|            ClMenuItem Paste = new ClMenuItem(""Вставить"");
		|            Paste.Base_obj.M_MenuItem.Click += (sender, e) => rtb.Paste();
		|            cm.MenuItems.Add(Paste);
		|
		|            ClMenuItem Delete = new ClMenuItem(""Удалить"");
		|            Delete.Base_obj.M_MenuItem.Click += (sender, e) => rtb.SelectedText = """";
		|            cm.MenuItems.Add(Delete);
		|
		|            cm.MenuItems.Add(new ClMenuItem(""-""));
		|
		|            ClMenuItem SelectAll = new ClMenuItem(""Выбрать всё"");
		|            SelectAll.Base_obj.M_MenuItem.Click += (sender, e) => rtb.SelectAll();
		|            cm.MenuItems.Add(SelectAll);
		|
		|            cm.Base_obj.M_ContextMenu.Popup += (sender, e) =>
		|            {
		|                Undo.Enabled = !rtb.ReadOnly && rtb.CanUndo;
		|                Redo.Enabled = !rtb.ReadOnly && rtb.CanRedo;
		|                Cut.Enabled = !rtb.ReadOnly && rtb.SelectionLength > 0;
		|                Copy.Enabled = rtb.SelectionLength > 0;
		|                Paste.Enabled = !rtb.ReadOnly && (new osf.ClClipboard()).ContainsData();
		|                Delete.Enabled = !rtb.ReadOnly && rtb.SelectionLength > 0;
		|                SelectAll.Enabled = rtb.TextLength > 0 && rtb.SelectionLength < rtb.TextLength;
		|            };
		|            return cm;
		|        }
		|";
	ИначеЕсли ИмяКласса = "ComboBox" Тогда
		Стр = 
		"        public ClComboBox()
		|        {
		|            ComboBox ComboBox1 = new ComboBox();
		|            ComboBox1.dll_obj = this;
		|            Base_obj = ComboBox1;
		|            items = new ClComboBoxObjectCollection(Base_obj.Items);
		|        }//end_constr
		|		
		|        public ClComboBox(osf.NoKeyUpComboBoxEx p1)
		|        {
		|            ComboBox ComboBox1 = new ComboBox(p1);
		|            ComboBox1.dll_obj = this;
		|            Base_obj = ComboBox1;
		|            items = new ClComboBoxObjectCollection(Base_obj.Items);
		|        }//end_constr
		|		
		|        public ClComboBox(ComboBox p1)
		|        {
		|            ComboBox ComboBox1 = p1;
		|            ComboBox1.dll_obj = this;
		|            Base_obj = ComboBox1;
		|            items = new ClComboBoxObjectCollection(Base_obj.Items);
		|        }//end_constr
		|		
		|        public ClArrayList _HeightItems
		|        {
		|            get { return heights; }
		|            set { heights = value; }
		|        }
		|";
	ИначеЕсли ИмяКласса = "TabPageCollection" или
			  ИмяКласса = "ListViewSelectedItemCollection" или
			  ИмяКласса = "Graphics" или
			  ИмяКласса = "DockPaddingEdges" или
			  ИмяКласса = "LinkCollection" или
			  ИмяКласса = "DataColumnCollection" или
			  ИмяКласса = "DataTableCollection" или
			  ИмяКласса = "DataRow" или
			  ИмяКласса = "DataRowCollection" или
			  ИмяКласса = "GridTableStylesCollection" или
			  ИмяКласса = "GridColumnStylesCollection" или
			  ИмяКласса = "ComboBoxObjectCollection" или
			  ИмяКласса = "BitmapData" или
			  ИмяКласса = "GridItem" Тогда
		Стр = 
		"        public Cl" + ИмяКласса + "(" + ИмяКласса + " p1)
		|        {
		|            " + ИмяКласса + " " + ИмяКласса + "1 = p1;
		|            " + ИмяКласса + "1.dll_obj = this;
		|            Base_obj = " + ИмяКласса + "1;
		|        }//end_constr
		|";
		
		
		


	Иначе
		Стр = 
		"        public Cl" + ИмяКласса + "()
		|        {
		|            " + ИмяКласса + " " + ИмяКласса + "1 = new " + ИмяКласса + "();
		|            " + ИмяКласса + "1.dll_obj = this;
		|            Base_obj = " + ИмяКласса + "1;
		|        }//end_constr
		|		
		|        public Cl" + ИмяКласса + "(" + ИмяКласса + " p1)
		|        {
		|            " + ИмяКласса + " " + ИмяКласса + "1 = p1;
		|            " + ИмяКласса + "1.dll_obj = this;
		|            Base_obj = " + ИмяКласса + "1;
		|        }//end_constr
		|        ";
	КонецЕсли;
	Возврат Стр;
КонецФункции//Конструктор

Функция Base_obj(ИмяКласса)
	Если ИмяКласса = "OneScriptForms" или
		ИмяКласса = "ManagedProperty" или
		ИмяКласса = "BoldedDates" или
		ИмяКласса = "AnnuallyBoldedDates" или
		ИмяКласса = "Clipboard" или
		ИмяКласса = "Math" или
		ИмяКласса = "InputBox" или
		ИмяКласса = "Action" или
		ИмяКласса = "MonthlyBoldedDates" Тогда
		Возврат "";
	ИначеЕсли ИмяКласса = "ComboBox" Тогда
		Стр = 
		"        public dynamic Base_obj;
		|";
		Возврат Стр;
	ИначеЕсли ИмяКласса = "DataGridComboBoxColumnStyle" Тогда
		Стр = 
		"        public DataGridComboBoxColumn Base_obj;
		|";
		Возврат Стр;
	ИначеЕсли ИмяКласса = "Type" Тогда
		Стр = 
		"        public dynamic Base_obj;
		|";
		Возврат Стр;
	КонецЕсли;
	Стр = 
	"        public " + ИмяКласса + " Base_obj;
	|";
	Возврат Стр;
КонецФункции//Base_obj

Функция Свойства(ИмяФайлаЧленов, ИмяКонтекстКлассаАнгл)
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(КаталогСправки + "\OneScriptForms.html");
	Стр = ТекстДок.ПолучитьТекст();
	//находим текст таблицы
	СтрТаблица = СтрНайтиМежду(Стр, "<H3 class=dtH3>Перечисления</H3>", "</TBODY></TABLE>", Ложь, );
	// Сообщить("==================" + СтрТаблица[0]);
	Массив1 = СтрНайтиМежду(СтрТаблица[0], "<TD width=""50%""><A href", "</A></TD>", , );
	// Сообщить("Массив1.Количество = " + Массив1.Количество());
	Если Массив1.Количество() > 0 Тогда
		СписокСтрПеречислений = Новый СписокЗначений;
		Для А = 0 По Массив1.ВГраница() Цикл
			СтрХ = Массив1[А];
			// Сообщить("=СтрХ=================" + СтрХ);
			СтрХ = СтрЗаменить(СтрХ, "&nbsp;", " ");
			ПеречислениеАнгл = СтрНайтиМежду(СтрХ, "(", ")", , )[0];
			СписокСтрПеречислений.Добавить(ПеречислениеАнгл);
		КонецЦикла;
	КонецЕсли;
	СтрПеречислений = "";
	СписокСтрПеречислений.СортироватьПоЗначению();
	Для А = 0 По СписокСтрПеречислений.Количество() - 1 Цикл
		Если А = (СписокСтрПеречислений.Количество() - 1) Тогда
			СтрПеречислений = СтрПеречислений + СписокСтрПеречислений.Получить(А).Значение;
		Иначе
			СтрПеречислений = СтрПеречислений + СписокСтрПеречислений.Получить(А).Значение + ",";
		КонецЕсли;
	КонецЦикла;
	
	М_СтрПеречислений = РазобратьСтроку(СтрПеречислений, ",");
	
	ТекстДокЧленов = Новый ТекстовыйДокумент;
	КаталогНаДиске = Новый Файл(ИмяФайлаЧленов);
    Если Не (КаталогНаДиске.Существует()) Тогда
        Стр = 
		"        //Свойства============================================================" + Символы.ПС;
			
		Возврат Стр;
	КонецЕсли;
	ТекстДокЧленов.Прочитать(ИмяФайлаЧленов);
	СтрТекстДокЧленов = ТекстДокЧленов.ПолучитьТекст();
	Если Не (СтрНайтиМежду(СтрТекстДокЧленов, "<H4 class=dtH4>Свойства</H4>", "</TBODY></TABLE>", Ложь, ).Количество() > 0) Тогда
		Стр = 
		"        //Свойства============================================================" + Символы.ПС;
		Возврат Стр;
	КонецЕсли;
	СтрТаблицаЧленов = СтрНайтиМежду(СтрТекстДокЧленов, "<H4 class=dtH4>Свойства</H4>", "</TBODY></TABLE>", Ложь, )[0];
	Массив1 = СтрНайтиМежду(СтрТаблицаЧленов, "<TR vAlign=top>", "</TD></TR>", Ложь, );
	// Сообщить("Массив1.Количество()=" + Массив1.Количество());
	Если Массив1.Количество() > 0 Тогда
		Стр = "        //Свойства============================================================" + Символы.ПС;
		Для А = 0 По Массив1.ВГраница() Цикл
			//найдем первую ячейку строки таблицы
			М07 = СтрНайтиМежду(Массив1[А], "<TD width=""50%"">", "</TD>", Ложь, );
			СтрХ = М07[0];
			СтрХ = СтрЗаменить(СтрХ, "&nbsp;", " ");
			
			ИмяФайлаСвойства = КаталогСправки + "\" + СтрНайтиМежду(СтрХ, "<A href=""", """>", , )[0];
			ТекстДокСвойства = Новый ТекстовыйДокумент;
			ТекстДокСвойства.Прочитать(ИмяФайлаСвойства);
			СтрТекстДокСвойства = ТекстДокСвойства.ПолучитьТекст();
			СтрРаздела = СтрНайтиМежду(СтрТекстДокСвойства, "<H4 class=dtH4>Использование</H4>", "<H4 class=dtH4>Значение</H4>", , )[0];
			СтрИспользование = СтрНайтиМежду(СтрРаздела, "<P>", "</P>", , )[0];

			СвойствоАнгл = СтрНайтиМежду(СтрХ, "(", ")", , )[0];
			СвойствоРус = СтрНайтиМежду(СтрХ, ".html"">", " (", , )[0];
			Если (СвойствоРус = "Сборка") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextProperty(""Сборка"", ""Build"")]
				|        public int Build
				|        {
				|            get { return Assembly.GetExecutingAssembly().GetName().Version.Build; }
				|        }				
				|        
				|";
			ИначеЕсли (СвойствоРус = "РазрешитьСобытия") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextProperty(""РазрешитьСобытия"", ""AllowEvents"")]
				|        public bool HandleEvents
				|        {
				|            get { return handleEvents; }
				|            set { handleEvents = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "КоллекцияФорм") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextProperty(""КоллекцияФорм"", ""FormsCollection"")]
				|        public FormsCollection FormsCollection
				|        {
				|            get { return formsCollection; }
				|        }
		
				|        
				|";
			ИначеЕсли (СвойствоРус = "ИспользоватьГлавнуюФорму") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextProperty(""ИспользоватьГлавнуюФорму"", ""UseMainForm"")]
				|        public bool UseMainForm
				|        {
				|            get { return useMainForm; }
				|            set { useMainForm = value; }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "РазмерШрифта" Тогда
				Стр = Стр +
				"        [ContextProperty(""РазмерШрифта"", ""FontSize"")]
				|        public int FontSize
				|        {
				|            get { return Convert.ToInt32(Base_obj.FontSize); }
				|            set { Base_obj.FontSize = value; }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "ВысотаШрифта" Тогда
				Стр = Стр +
				"        [ContextProperty(""ВысотаШрифта"", ""FontHeight"")]
				|        public int FontHeight
				|        {
				|            get { return Convert.ToInt32(Base_obj.FontHeight); }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "ПозицияМыши" Тогда
				Стр = Стр +
				"        [ContextProperty(""ПозицияМыши"", ""MousePosition"")]
				|        public ClPoint MousePosition
				|        {
				|            get { return new ClPoint(System.Windows.Forms.Control.MousePosition); }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "АргументыСобытия" Тогда
				Стр = Стр +
				"        [ContextProperty(""АргументыСобытия"", ""EventArgs"")]
				|        public IValue EventArgs
				|        {
				|            get { return Event; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ВерсияПродукта") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextProperty(""ВерсияПродукта"", ""ProductVersion"")]
				|        public ClVersion ProductVersion
				|        {
				|            get { return new ClVersion(Assembly.GetExecutingAssembly().GetName().Version); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Сценарий") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				Стр = Стр +
				"        [ContextProperty(""Сценарий"", ""Script"")]
				|        public IRuntimeContextInstance Script
				|        {
				|            get { return script; }
				|            set { script = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Сценарий") и (ИмяКонтекстКлассаАнгл = "Action") Тогда
				Стр = Стр +
				"        [ContextProperty(""Сценарий"", ""Script"")]
				|        public IRuntimeContextInstance Script { get; set; }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ИмяМетода") и (ИмяКонтекстКлассаАнгл = "Action") Тогда
				Стр = Стр +
				"        [ContextProperty(""ИмяМетода"", ""MethodName"")]
				|        public string MethodName { get; set; }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Параметр") и (ИмяКонтекстКлассаАнгл = "Action") Тогда
				Стр = Стр +
				"        [ContextProperty(""Параметр"", ""Parameter"")]
				|        public IValue Parameter { get; set; }
				|        
				|";
			ИначеЕсли СвойствоРус = "АктивнаяФорма" Тогда
				Стр = Стр +
				"        [ContextProperty(""АктивнаяФорма"", ""ActiveForm"")]
				|        public ClForm ActiveForm
				|        {
				|            get
				|            {
				|                if (System.Windows.Forms.Form.ActiveForm != null)
				|                {
				|                    return ((Form)((FormEx)System.Windows.Forms.Form.ActiveForm).M_Object).dll_obj;
				|                }
				|                return null;
				|            }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "АктивныйЭлемент" Тогда
				Стр = Стр +
				"        [ContextProperty(""АктивныйЭлемент"", ""ActiveControl"")]
				|        public IValue ActiveControl
				|        {
				|            get { return ((dynamic)Base_obj.ActiveControl).dll_obj; }
				|            set { Base_obj.ActiveControl = ((dynamic)value).Base_obj; }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "ИмяПродукта" Тогда
				Стр = Стр +
				"        [ContextProperty(""ИмяПродукта"", ""ProductName"")]
				|        public string ProductName
				|        {
				|            get { return ((AssemblyTitleAttribute)Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false)[0]).Title.ToString(); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Заполнение") и (ИмяКонтекстКлассаАнгл = "DataGridViewCellStyle") Тогда
				Стр = Стр +
				"        [ContextProperty(""Заполнение"", ""Padding"")]
				|        public ClPadding Padding
				|        {
				|            get { return new ClPadding(Base_obj.Padding); }
				|            set { Base_obj.Padding = value.Base_obj; }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "ВесЗаполнения" Тогда
				Стр = Стр +
				"        [ContextProperty(""ВесЗаполнения"", ""FillWeight"")]
				|        public IValue FillWeight
				|        {
				|            get { return ValueFactory.Create((Convert.ToDecimal(Base_obj.FillWeight))); }
				|            set { Base_obj.FillWeight = Convert.ToSingle(value.AsNumber()); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Отправитель") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextProperty(""Отправитель"", ""Sender"")]
				|        public IValue Sender
				|        {
				|            get { return OneScriptForms.RevertObj(((dynamic)Event).Base_obj.Sender); }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "Отправитель" Тогда
				Стр = Стр +
				"        [ContextProperty(""Отправитель"", ""Sender"")]
				|        public IValue Sender
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Sender); }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "ПричинаЗакрытия" Тогда
				Стр = Стр +
				"        [ContextProperty(""ПричинаЗакрытия"", ""CloseReason"")]
				|        public int CloseReason
				|        {
				|            get { return (int)Base_obj.CloseReason; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Размер") и (ИмяКонтекстКлассаАнгл = "Font") Тогда
				Стр = Стр +
				"        [ContextProperty(""Размер"", ""Size"")]
				|        public IValue Size
				|        {
				|            get { return ValueFactory.Create((Convert.ToDecimal(Base_obj.Size))); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Закрыта") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        private IValue _FormClosed;";
				Стр = Стр +
				"        [ContextProperty(""Закрыта"", ""FormClosed"")]
				|        public IValue FormClosed
				|        {
				|            get { return _FormClosed; }
				|            set
				|            {
				|                if (value.GetType() == typeof(ScriptEngine.HostedScript.Library.DelegateAction))
				|                {
				|                    _FormClosed = (ScriptEngine.HostedScript.Library.DelegateAction)value.AsObject();
				|                    Base_obj.Closed = ""DelegateActionClosed"";
				|                }
				|                else
				|                {
				|                    _FormClosed = value;
				|                    Base_obj.Closed = ""osfActionClosed"";
				|                }
				|            }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ПриЗакрытии") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        private IValue _FormClosing;";
				Стр = Стр +
				"        [ContextProperty(""ПриЗакрытии"", ""FormClosing"")]
				|        public IValue FormClosing
				|        {
				|            get { return _FormClosing; }
				|            set
				|            {
				|                if (value.GetType() == typeof(ScriptEngine.HostedScript.Library.DelegateAction))
				|                {
				|                    _FormClosing = (ScriptEngine.HostedScript.Library.DelegateAction)value.AsObject();
				|                    Base_obj.Closing = ""DelegateActionClosing"";
				|                }
				|                else
				|                {
				|                    _FormClosing = value;
				|                    Base_obj.Closing = ""osfActionClosing"";
				|                }
				|            }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "ВыбранныйЭлементСеткиИзменен" или 
				СвойствоРус = "ВыделениеИзменено" или 
				СвойствоРус = "ДатаВыбрана" или 
				СвойствоРус = "ДатаИзменена" или 
				СвойствоРус = "ДвойноеНажатие" или 
				СвойствоРус = "ДвойноеНажатиеЯчейки" или 
				СвойствоРус = "ЗначениеИзменено" или 
				СвойствоРус = "ЗначениеСвойстваИзменено" или 
				СвойствоРус = "ЗначениеЯчейкиИзменено" или 
				СвойствоРус = "ИндексВыбранногоИзменен" или 
				СвойствоРус = "ИндексВыбранногоИзменен" или 
				СвойствоРус = "КлавишаВверх" или 
				СвойствоРус = "КлавишаВниз" или 
				СвойствоРус = "КлавишаНажата" или 
				СвойствоРус = "КолонкаНажатие" или 
				СвойствоРус = "МышьНадЭлементом" или 
				СвойствоРус = "МышьНадЯчейкой" или 
				СвойствоРус = "МышьПокинулаЭлемент" или 
				СвойствоРус = "МышьПокинулаЯчейку" или 
				СвойствоРус = "Нажатие" или 
				СвойствоРус = "НажатиеСодержимогоЯчейки" или 
				СвойствоРус = "НажатиеЯчейки" или 
				СвойствоРус = "ПередРазвертыванием" или 
				СвойствоРус = "ПередРедактированиемНадписи" или 
				СвойствоРус = "ПоложениеИзменено" или 
				СвойствоРус = "ПометкаИзменена" или 
				СвойствоРус = "ПослеВыбора" или 
				СвойствоРус = "ПослеРедактированияНадписи" или 
				СвойствоРус = "ПриАктивизации" или 
				СвойствоРус = "ПриАктивизацииЭлемента" или 
				СвойствоРус = "ПриВходе" или 
				СвойствоРус = "ПриВходеВСтроку" или 
				СвойствоРус = "ПриВходеВЯчейку" или 
				СвойствоРус = "ПриВыпадении" или 
				СвойствоРус = "ПриДеактивации" или 
				СвойствоРус = "ПриЗагрузке" или 
				СвойствоРус = "ПриЗадержкеМыши" или 
				СвойствоРус = "ПриИзменении" или 
				СвойствоРус = "ПриНажатииЗаголовкаКолонки" или 
				СвойствоРус = "ПриНажатииЗаголовкаСтроки" или 
				СвойствоРус = "ПриНажатииКнопки" или 
				СвойствоРус = "ПриНажатииКнопкиМыши" или 
				СвойствоРус = "ПриНажатииКнопкиМышиВЯчейке" или 
				СвойствоРус = "ПриОтпусканииМыши" или 
				СвойствоРус = "ПриОтпусканииМышиНадЯчейкой" или 
				СвойствоРус = "ПриПереименовании" или 
				СвойствоРус = "ПриПеремещении" или 
				СвойствоРус = "ПриПеремещенииМыши" или 
				СвойствоРус = "ПриПеремещенииМышиНадЯчейкой" или 
				СвойствоРус = "ПриПерерисовке" или 
				СвойствоРус = "ПриПотереФокуса" или 
				СвойствоРус = "ПриПоявлении" или 
				СвойствоРус = "ПриПрокручивании" или 
				СвойствоРус = "ПриСоздании" или 
				СвойствоРус = "ПриСрабатыванииТаймера" или 
				СвойствоРус = "ПриУдалении" или 
				СвойствоРус = "ПриУходе" или 
				СвойствоРус = "ПриУходеИзСтроки" или 
				СвойствоРус = "ПриУходеИзЯчейки" или 
				СвойствоРус = "РазмерИзменен" или 
				СвойствоРус = "РедактированиеЯчейкиЗавершено" или 
				СвойствоРус = "РедактированиеЯчейкиНачато" или 
				СвойствоРус = "СсылкаНажата" или 
				СвойствоРус = "ТекстИзменен" или 
				СвойствоРус = "ТекущаяЯчейкаИзменена" или 
				СвойствоРус = "ЭлементДобавлен" или 
				СвойствоРус = "ЭлементПомечен" или 
				СвойствоРус = "ЭлементУдален" Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        private IValue _" + СвойствоАнгл + ";";
				Стр = Стр +
				"        [ContextProperty(""" + СвойствоРус + """, """ + СвойствоАнгл + """)]
				|        public IValue " + СвойствоАнгл + "
				|        {
				|            get { return _" + СвойствоАнгл + "; }
				|            set
				|            {
				|                if (value.GetType() == typeof(ScriptEngine.HostedScript.Library.DelegateAction))
				|                {
				|                    _" + СвойствоАнгл + " = (ScriptEngine.HostedScript.Library.DelegateAction)value.AsObject();
				|                    Base_obj." + СвойствоАнгл + " = ""DelegateAction" + СвойствоАнгл + """;
				|                }
				|                else
				|                {
				|                    _" + СвойствоАнгл + " = value;
				|                    Base_obj." + СвойствоАнгл + " = ""osfAction" + СвойствоАнгл + """;
				|                }
				|            }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "Продолжать" Тогда
				Стр = Стр +
				"        [ContextProperty(""Продолжать"", ""GoOn"")]
				|        public bool GoOn
				|        {
				|            get
				|            {
				|                return goOn;
				|            }
				|            set { goOn = value; }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "Метка" Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        private ClCollection tag = new ClCollection();";
				Стр = Стр +
				"        [ContextProperty(""Метка"", ""Tag"")]
				|        public ClCollection Tag
				|        {
				|            get { return tag; }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "Тип" Тогда
				Стр = Стр +
				"        [ContextProperty(""Тип"", ""Type"")]
				|        public ClType Type
				|        {
				|            get { return new ClType(this); }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "ЭлементВерхнегоУровня" Тогда
				Стр = Стр +
				"        [ContextProperty(""ЭлементВерхнегоУровня"", ""TopLevelControl"")]
				|        public IValue TopLevelControl
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.TopLevelControl); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ЭлементУправления") и (ИмяКонтекстКлассаАнгл = "Color") Тогда
				Стр = Стр +
				"        [ContextProperty(""ЭлементУправления"", ""Control"")]
				|        public ClColor Control
				|        {
				|            get { return new ClColor(Base_obj.Control); }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "ЭлементУправления" Тогда
				Стр = Стр +
				"        [ContextProperty(""ЭлементУправления"", ""Control"")]
				|        public IValue Control
				|        {
				|            get { return (IValue)OneScriptForms.RevertObj(Base_obj.Control); }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "КнопкаОтмена" Тогда
				Стр = Стр +
				"        [ContextProperty(""КнопкаОтмена"", ""CancelButton"")]
				|        public IValue CancelButton
				|        {
				|            get { return ((dynamic)Base_obj.CancelButton).dll_obj; }
				|            set { Base_obj.CancelButton = ((dynamic)value).Base_obj; }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "КнопкаПринять" Тогда
				Стр = Стр +
				"        [ContextProperty(""КнопкаПринять"", ""AcceptButton"")]
				|        public IValue AcceptButton
				|        {
				|            get { return ((dynamic)Base_obj.AcceptButton).dll_obj; }
				|            set { Base_obj.AcceptButton = ((dynamic)value).Base_obj; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "КолонкаСортировки") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				Стр = Стр +
				"        [ContextProperty(""КолонкаСортировки"", ""SortedColumn"")]
				|        public ClColumnHeader SortedColumn
				|        {
				|            get
				|            {
				|                if (Base_obj.SortedColumn != null)
				|                {
				|                    return Base_obj.SortedColumn.dll_obj;
				|                }
				|                return null;
				|            }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Родитель") и (ИмяКонтекстКлассаАнгл = "MenuItem") Тогда
				Стр = Стр +
				"        [ContextProperty(""Родитель"", ""Parent"")]
				|        public IValue Parent
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Parent); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Родитель") и (ИмяКонтекстКлассаАнгл = "TreeNode") Тогда
				Стр = Стр +
				"        [ContextProperty(""Родитель"", ""Parent"")]
				|        public IValue Parent
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Parent); }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "Источник" Тогда
				Стр = Стр +
				"        [ContextProperty(""Источник"", ""SourceControl"")]
				|        public IValue SourceControl
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.SourceControl); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Меню") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				Стр = Стр +
				"        [ContextProperty(""Меню"", ""Menu"")]
				|        public ClMainMenu Menu
				|        {
				|            get { return Base_obj.Menu.dll_obj; }
				|            set { Base_obj.Menu = value.Base_obj; }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "Владелец" Тогда
				Стр = Стр +
				"        [ContextProperty(""Владелец"", ""Owner"")]
				|        public ClForm Owner
				|        {
				|            get { return Base_obj.Owner.dll_obj; }
				|            set { Base_obj.Owner = value.Base_obj; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ГруппировкаТаблицы") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouperControl") Тогда
				Стр = Стр +
				"        [ContextProperty(""ГруппировкаТаблицы"", ""Grouper"")]
				|        public ClDataGridViewGrouper Grouper
				|        {
				|            get { return (ClDataGridViewGrouper)osf.OneScriptForms.RevertObj(Base_obj.Grouper); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Родитель") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouperControl") Тогда
				Стр = Стр +
				"        [ContextProperty(""Родитель"", ""Parent"")]
				|        public IValue Parent
				|        {
				|            get { return osf.OneScriptForms.RevertObj(Base_obj.Parent); }
				|            set { Base_obj.Parent = ((dynamic)value).Base_obj.M_Control; }
				|        }
				|        
				|";
			ИначеЕсли СвойствоРус = "Родитель" Тогда
				Стр = Стр +
				"        [ContextProperty(""Родитель"", ""Parent"")]
				|        public IValue Parent
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Parent); }
				|            set { Base_obj.Parent = ((dynamic)value).Base_obj; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Таблица") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouperControl") Тогда
				Стр = Стр +
				"        [ContextProperty(""Таблица"", ""DataGridView"")]
				|        public osf.ClDataGridView DataGridView
				|        {
				|            get { return (osf.ClDataGridView)osf.OneScriptForms.RevertObj(Base_obj.DataGridView); }
				|            set { Base_obj.DataGridView = value.Base_obj.M_DataGridView; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ПорядокСортировки") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextProperty(""ПорядокСортировки"", ""GroupSortOrder"")]
				|        public int GroupSortOrder
				|        {
				|            get { return (int)Base_obj.GroupSortOrder; }
				|            set { Base_obj.GroupSortOrder = (System.Windows.Forms.SortOrder)value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ГруппироватьКакТекст") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextProperty(""ГруппироватьКакТекст"", ""ForceAsText"")]
				|        public bool ForceAsText
				|        {
				|            get { return Base_obj.ForceAsText; }
				|            set { Base_obj.ForceAsText = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ВыделятьСтрокиПриДвойномНажатии") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextProperty(""ВыделятьСтрокиПриДвойномНажатии"", ""SelectRowsOnDoubleClick"")]
				|        public bool SelectRowsOnDoubleClick
				|        {
				|            get { return Base_obj.Options.SelectRowsOnDoubleClick; }
				|            set { Base_obj.Options.SelectRowsOnDoubleClick = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Таблица") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextProperty(""Таблица"", ""DataGridView"")]
				|        public osf.ClDataGridView DataGridView
				|        {
				|            get { return ((osf.DataGridViewEx)Base_obj.DataGridView).M_Object.dll_obj; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ВсегдаГруппироватьКакТекст") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextProperty(""ВсегдаГруппироватьКакТекст"", ""AlwaysGroupOnText"")]
				|        public bool AlwaysGroupOnText
				|        {
				|            get { return Base_obj.Options.AlwaysGroupOnText; }
				|            set { Base_obj.Options.AlwaysGroupOnText = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "СтильГруппировкиТаблицы") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextProperty(""СтильГруппировкиТаблицы"", ""DataGridViewGrouperStyle"")]
				|        public int DataGridViewGrouperStyle
				|        {
				|            get { return Base_obj.DataGridViewGrouperStyle; }
				|            set { Base_obj.DataGridViewGrouperStyle = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ПоказатьИмяГруппы") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextProperty(""ПоказатьИмяГруппы"", ""ShowGroupName"")]
				|        public bool ShowGroupName
				|        {
				|            get { return Base_obj.Options.ShowGroupName; }
				|            set { Base_obj.Options.ShowGroupName = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ИмяГруппы") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextProperty(""ИмяГруппы"", ""GroupName"")]
				|        public IValue GroupName
				|        {
				|            get
				|            {
				|                try
				|                {
				|                    return ValueFactory.Create(Base_obj.GroupOn.ToString());
				|                }
				|                catch
				|                {
				|                    return null;
				|                }
				|            }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ПоказатьКоличество") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextProperty(""ПоказатьКоличество"", ""ShowCount"")]
				|        public bool ShowCount
				|        {
				|            get { return Base_obj.Options.ShowCount; }
				|            set { Base_obj.Options.ShowCount = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "СвернутоПриСтарте") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextProperty(""СвернутоПриСтарте"", ""StartCollapsed"")]
				|        public bool StartCollapsed
				|        {
				|            get { return Base_obj.Options.StartCollapsed; }
				|            set { Base_obj.Options.StartCollapsed = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Коэффициент") и (ИмяКонтекстКлассаАнгл = "ManagedProperty") Тогда
				Стр = Стр +
				"        [ContextProperty(""Коэффициент"", ""Ratio"")]
				|        public IValue Ratio
				|        {
				|            get { return ratio; }
				|            set { ratio = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "УправляемоеСвойство") и (ИмяКонтекстКлассаАнгл = "ManagedProperty") Тогда
				Стр = Стр +
				"        [ContextProperty(""УправляемоеСвойство"", ""ManagedProperty"")]
				|        public string ManagedProperty
				|        {
				|            get { return managedProperty; }
				|            set { managedProperty = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "УправляемыйОбъект") и (ИмяКонтекстКлассаАнгл = "ManagedProperty") Тогда
				Стр = Стр +
				"        [ContextProperty(""УправляемыйОбъект"", ""ManagedObject"")]
				|        public IValue ManagedObject
				|        {
				|            get { return managedObject; }
				|            set { managedObject = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ВыбранныйЭлемент") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				Стр = Стр +
				"        [ContextProperty(""ВыбранныйЭлемент"", ""SelectedItem"")]
				|        public IValue SelectedItem
				|        {
				|            get
				|            {
				|                if (Base_obj.DataSource != null)
				|                {
				|                    if (Base_obj.DataSource is osf.ArrayList)
				|                    {
				|                        return (ClListItem)Base_obj.SelectedItem;
				|                    }
				|                    if (Base_obj.DataSource is osf.DataTable || Base_obj.DataSource is osf.DataView)
				|                    {
				|                        DataRowView DataRowView1 = new DataRowView((System.Data.DataRowView)Base_obj.SelectedItem);
				|                        ListItem ListItem1 = new ListItem();
				|                        ListItem1.Text = DataRowView1.get_Item(Base_obj.DisplayMember).ToString();
				|                        ListItem1.Value = DataRowView1.get_Item(Base_obj.ValueMember);
				|                        return new ClListItem(ListItem1);
				|                    }
				|                }
				|                return OneScriptForms.RevertObj(Base_obj.SelectedItem);
				|            }
				|            set
				|            {
				|                if (Base_obj.DataSource == null)
				|                {
				|                    Base_obj.SelectedItem = ((dynamic)value).Base_obj;
				|                }
				|            }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ВыбранныеЭлементы") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				Стр = Стр +
				"        [ContextProperty(""ВыбранныеЭлементы"", ""SelectedItems"")]
				|        public ClListBoxSelectedObjectCollection SelectedItems
				|        {
				|            get { return new ClListBoxSelectedObjectCollection(Base_obj.SelectedItems, this); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Строка") и (ИмяКонтекстКлассаАнгл = "DataRowView") Тогда
				Стр = Стр +
				"        [ContextProperty(""Строка"", ""Row"")]
				|        public ClDataRow Row
				|        {
				|            get { return new ClDataRow(Base_obj.Row); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Значение") и (ИмяКонтекстКлассаАнгл = "DictionaryEntry") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Value); }
				|            set { Base_obj.Value = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Значение") и (ИмяКонтекстКлассаАнгл = "DataGridViewCell") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Value); }
				|            set
				|            {
				|                if (value.SystemType.Name == ""Строка"")
				|                {
				|                    Base_obj.Value = value.AsString();
				|                }
				|                else if (value.SystemType.Name == ""Число"")
				|                {
				|                    Base_obj.Value = value.AsNumber();
				|                }
				|                else if (value.SystemType.Name == ""Булево"")
				|                {
				|                    Base_obj.Value = value.AsBoolean();
				|                }
				|                else if (value.SystemType.Name == ""Дата"")
				|                {
				|                    Base_obj.Value = value.AsDate();
				|                }
				|                else
				|                {
				|                    Base_obj.Value = value.AsObject();
				|                }
				|            }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Значение") и 
				(ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewButtonCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewLinkCell") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Value); }
				|            set { Base_obj.Value = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Значение") и (ИмяКонтекстКлассаАнгл = "DataGridViewImageCell") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get { return OneScriptForms.RevertObj(new Bitmap(((System.Drawing.Bitmap)Base_obj.Value))); }
				|            set { Base_obj.Value = ((ClBitmap)value.AsObject()).Base_obj.M_Bitmap; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Значение") и 
				(ИмяКонтекстКлассаАнгл = "DataGridViewTextBoxCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewHeaderCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewColumnHeaderCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewRowHeaderCell") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Value); }
				|            set { Base_obj.Value = value.AsString(); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ФорматированноеЗначение") и 
				(ИмяКонтекстКлассаАнгл = "DataGridViewCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewHeaderCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewColumnHeaderCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewRowHeaderCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewButtonCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewTextBoxCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewLinkCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxCell") Тогда
				Стр = Стр +
				"        [ContextProperty(""ФорматированноеЗначение"", ""FormattedValue"")]
				|        public IValue FormattedValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.FormattedValue); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ФорматированноеЗначение") и (ИмяКонтекстКлассаАнгл = "DataGridViewImageCell") Тогда
				Стр = Стр +
				"        [ContextProperty(""ФорматированноеЗначение"", ""FormattedValue"")]
				|        public IValue FormattedValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.FormattedValue.ToString()); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ФорматированноеЗначениеРедактируемого") и 
				(ИмяКонтекстКлассаАнгл = "DataGridViewCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewHeaderCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewColumnHeaderCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewRowHeaderCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewButtonCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewTextBoxCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewLinkCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxCell") Тогда
				Стр = Стр +
				"        [ContextProperty(""ФорматированноеЗначениеРедактируемого"", ""EditedFormattedValue"")]
				|        public IValue EditedFormattedValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.EditedFormattedValue); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ФорматированноеЗначениеРедактируемого") и (ИмяКонтекстКлассаАнгл = "DataGridViewImageCell") Тогда
				Стр = Стр +
				"        [ContextProperty(""ФорматированноеЗначениеРедактируемого"", ""EditedFormattedValue"")]
				|        public IValue EditedFormattedValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.EditedFormattedValue.ToString()); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Значение") и (ИмяКонтекстКлассаАнгл = "ListItem") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get
				|            {
				|                if (Base_obj.Value.GetType().ToString() == ""ScriptEngine.Machine.SimpleConstantValue"")
				|                {
				|                    if (((IValue)Base_obj.Value).SystemType.Name == ""Число"")
				|                    {
				|                        return (IValue)Base_obj.Value;
				|                    }
				|                }
				|                return OneScriptForms.RevertObj(Base_obj.Value);
				|            }
				|            set { Base_obj.Value = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ВыбранныйОбъект") и (ИмяКонтекстКлассаАнгл = "PropertyGrid") Тогда
				Стр = Стр +
				"        [ContextProperty(""ВыбранныйОбъект"", ""SelectedObject"")]
				|        public IValue SelectedObject
				|        {
				|            get { return ((dynamic)Base_obj.SelectedObject).dll_obj; }
				|            set { Base_obj.SelectedObject = ((dynamic)value).Base_obj; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ЭлементыСетки") и (ИмяКонтекстКлассаАнгл = "GridItem") Тогда
				Стр = Стр +
				"        [ContextProperty(""ЭлементыСетки"", ""GridItems"")]
				|        public ClGridItemCollection GridItems
				|        {
				|            get { return new ClGridItemCollection(Base_obj.M_GridItem.GridItems); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ТипЭлементаСетки") и (ИмяКонтекстКлассаАнгл = "GridItem") Тогда
				Стр = Стр +
				"        [ContextProperty(""ТипЭлементаСетки"", ""GridItemType"")]
				|        public int GridItemType
				|        {
				|            get { return (int)Base_obj.M_GridItem.GridItemType; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ЭлементыСетки") и (ИмяКонтекстКлассаАнгл = "PropertyGrid") Тогда
				Стр = Стр +
				"        [ContextProperty(""ЭлементыСетки"", ""GridItems"")]
				|        public ClGridItemCollection GridItems
				|        {
				|            get
				|            {
				|                object comp = Base_obj.M_PropertyGrid;
				|                object comp1 = new System.Windows.Forms.PropertyGrid();
				|                System.Type comp1Type = comp1.GetType();
				|                object view = comp1Type.GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(comp);
				|                System.Windows.Forms.GridItemCollection GridItemCollection1 = (System.Windows.Forms.GridItemCollection)view.GetType().InvokeMember(
				|                    ""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view, null);
				|                return new ClGridItemCollection(new osf.GridItemCollection(GridItemCollection1));
				|            }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "НовоеЗначение") и (ИмяКонтекстКлассаАнгл = "SelectedGridItemChangedEventArgs") Тогда
				Стр = Стр +
				"        [ContextProperty(""НовоеЗначение"", ""NewValue"")]
				|        public IValue NewValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.NewValue); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "СтароеЗначение") и (ИмяКонтекстКлассаАнгл = "SelectedGridItemChangedEventArgs") Тогда
				Стр = Стр +
				"        [ContextProperty(""СтароеЗначение"", ""OldValue"")]
				|        public IValue OldValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.OldValue); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Количество") и (ИмяКонтекстКлассаАнгл = "ControlCollection") Тогда
				Стр = Стр +
				"        [ContextProperty(""Количество"", ""Count"")]
				|        public int CountControl
				|        {
				|            get { return Base_obj.Count; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Количество") и (ИмяКонтекстКлассаАнгл = "BoldedDates") Тогда
				Стр = Стр +
				"        [ContextProperty(""Количество"", ""Count"")]
				|        public int Count
				|        {
				|            get { return M_Object.Length; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Количество") и (ИмяКонтекстКлассаАнгл = "AnnuallyBoldedDates") Тогда
				Стр = Стр +
				"        [ContextProperty(""Количество"", ""Count"")]
				|        public int Count
				|        {
				|            get { return M_Object.Length; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Количество") и (ИмяКонтекстКлассаАнгл = "MonthlyBoldedDates") Тогда
				Стр = Стр +
				"        [ContextProperty(""Количество"", ""Count"")]
				|        public int Count
				|        {
				|            get { return M_Object.Length; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ВыделенныеДаты") и (ИмяКонтекстКлассаАнгл = "MonthCalendar") Тогда
				Стр = Стр +
				"        [ContextProperty(""ВыделенныеДаты"", ""BoldedDates"")]
				|        public ClBoldedDates BoldedDates
				|        {
				|            get { return boldedDates; }
				|
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ЕжегодныеДаты") и (ИмяКонтекстКлассаАнгл = "MonthCalendar") Тогда
				Стр = Стр +
				"        [ContextProperty(""ЕжегодныеДаты"", ""AnnuallyBoldedDates"")]
				|        public ClAnnuallyBoldedDates AnnuallyBoldedDates
				|        {
				|            get { return annuallyBoldedDates; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ЕжемесячныеДаты") и (ИмяКонтекстКлассаАнгл = "MonthCalendar") Тогда
				Стр = Стр +
				"        [ContextProperty(""ЕжемесячныеДаты"", ""MonthlyBoldedDates"")]
				|        public ClMonthlyBoldedDates MonthlyBoldedDates
				|        {
				|            get { return monthlyBoldedDates; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "РазрешениеИкс") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextProperty(""РазрешениеИкс"", ""DpiX"")]
				|        public IValue DpiX
				|        {
				|            get { return ValueFactory.Create((Convert.ToDecimal(Base_obj.DpiX))); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "РазрешениеИгрек") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextProperty(""РазрешениеИгрек"", ""DpiY"")]
				|        public IValue DpiY
				|        {
				|            get { return ValueFactory.Create((Convert.ToDecimal(Base_obj.DpiY))); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Имя") и (ИмяКонтекстКлассаАнгл = "Type") Тогда
				Стр = Стр +
				"        [ContextProperty(""Имя"", ""Имя"")]
				|        public string Name1
				|        {
				|            get
				|            {
				|                string str1 = """";
				|                if (this.ToString().Contains(""osf.""))
				|                {
				|                    var a = Assembly.GetExecutingAssembly();
				|                    var allTypes = a.GetTypes();
				|                    foreach (var type1 in allTypes)
				|                    {
				|                        try
				|                        {
				|                            str1 = type1.GetCustomAttribute<ContextClassAttribute>().GetName();
				|                            if (type1.ToString() == this.ToString())
				|                            {
				|                                break;
				|                            }
				|                        }
				|                        catch { }
				|                    }
				|                    str1 = str1.Replace(""Кл"", """");
				|                }
				|                return str1;
				|            }
				|        }
				|
				|        [ContextProperty(""Name"", ""Name"")]
				|        public string Name2
				|        {
				|            get
				|            {
				|                string str1 = """";
				|                if (this.ToString().Contains(""osf.""))
				|                {
				|                    var a = Assembly.GetExecutingAssembly();
				|                    var allTypes = a.GetTypes();
				|                    foreach (var type1 in allTypes)
				|                    {
				|                        try
				|                        {
				|                            str1 = type1.GetCustomAttribute<ContextClassAttribute>().GetAlias();
				|                            if (type1.ToString() == this.ToString())
				|                            {
				|                                break;
				|                            }
				|                        }
				|                        catch { }
				|                    }
				|                    str1 = str1.Replace(""Cl"", """");
				|                }
				|                return str1;
				|            }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Имя") и (ИмяКонтекстКлассаАнгл = "Color") Тогда
				Стр = Стр +
				"        [ContextProperty(""Имя"", ""Имя"")]
				|        public string NameRu
				|        {
				|            get
				|            {
				|                try
				|                {
				|                    return this.GetType().GetProperty(this.Base_obj.Name).GetCustomAttribute<ContextPropertyAttribute>().GetName();
				|                }
				|                catch
				|                {
				|                    int Dec1 = (Base_obj.R * 65536) + (Base_obj.G * 256) + Base_obj.B;
				|                    if (Dec1 == 0)
				|                    {
				|                        return ""Черный (Black)"";
				|                    }
				|                    return ""RGB("" + this.R.ToString() + "", "" + this.G.ToString() + "", "" + this.B.ToString() + "")"";
				|                }
				|            }
				|        }
				|
				|        [ContextProperty(""Name"", ""Name"")]
				|        public string NameEn
				|        {
				|            get
				|            {
				|                try
				|                {
				|                    return this.GetType().GetProperty(this.Base_obj.Name).GetCustomAttribute<ContextPropertyAttribute>().GetAlias();
				|                }
				|                catch
				|                {
				|                    int Dec1 = (Base_obj.R * 65536) + (Base_obj.G * 256) + Base_obj.B;
				|                    if (Dec1 == 0)
				|                    {
				|                        return ""Черный (Black)"";
				|                    }
				|                    return ""RGB("" + this.R.ToString() + "", "" + this.G.ToString() + "", "" + this.B.ToString() + "")"";
				|                }
				|            }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "СтароеЗначение") и (ИмяКонтекстКлассаАнгл = "PropertyValueChangedEventArgs") Тогда
				Стр = Стр +
				"        [ContextProperty(""СтароеЗначение"", ""OldValue"")]
				|        public IValue OldValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.OldValue); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Значение") и (ИмяКонтекстКлассаАнгл = "GridItem") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Value); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "КонтекстноеМеню") и (ИмяКонтекстКлассаАнгл = "NotifyIcon") Тогда
				Стр = Стр +
				"        [ContextProperty(""КонтекстноеМеню"", ""ContextMenu"")]
				|        public ClContextMenu ContextMenu
				|        {
				|            get { return (ClContextMenu)OneScriptForms.RevertObj(Base_obj.ContextMenu); }
				|            set { Base_obj.ContextMenu = value.Base_obj; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "Значение") и (ИмяКонтекстКлассаАнгл = "UserControl") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get { return (IValue)Base_obj.Value; }
				|            set { Base_obj.Value = value; }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ОбластьСсылки") и (ИмяКонтекстКлассаАнгл = "LinkLabel") Тогда
				Стр = Стр +
				"        [ContextProperty(""ОбластьСсылки"", ""LinkArea"")]
				|        public ClLinkArea LinkArea
				|        {
				|            get { return (ClLinkArea)OneScriptForms.RevertObj(Base_obj.LinkArea); }
				|            set { Base_obj.LinkArea = value.Base_obj; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Графика") и (ИмяКонтекстКлассаАнгл = "PaintEventArgs") Тогда
				Стр = Стр +
				"        [ContextProperty(""Графика"", ""Graphics"")]
				|        public ClGraphics Graphics
				|        {
				|            get { return new ClGraphics(Base_obj.Graphics); }
				|        }
				|        
				|";
			ИначеЕсли (СвойствоРус = "ТипДанных") и (ИмяКонтекстКлассаАнгл = "DataColumn") Тогда
				Стр = Стр +
				"        [ContextProperty(""ТипДанных"", ""DataType"")]
				|        public new IValue DataType
				|        {
				|            get
				|            {
				|                if (Base_obj.DataType == typeof(System.String))
				|                {
				|                    return ValueFactory.Create(0);
				|                }
				|                if (Base_obj.DataType == typeof(System.Decimal))
				|                {
				|                    return ValueFactory.Create(1);
				|                }
				|                if (Base_obj.DataType == typeof(System.Boolean))
				|                {
				|                    return ValueFactory.Create(2);
				|                }
				|                if (Base_obj.DataType == typeof(System.DateTime))
				|                {
				|                    return ValueFactory.Create(3);
				|                }
				|                if (Base_obj.DataType == typeof(System.Object))
				|                {
				|                    return ValueFactory.Create(4);
				|                }
				|                return null;
				|            }
				|            set
				|            {
				|                Base_obj.DataType = typeof(ScriptEngine.Machine.Values.StringValue);
				|                int type1 = Convert.ToInt32(value.AsNumber());
				|                if (type1 == 0)
				|                {
				|                    Base_obj.DataType = typeof(System.String);
				|                }
				|                else if (type1 == 1)
				|                {
				|                    Base_obj.DataType = typeof(System.Decimal);
				|                }
				|                else if (type1 == 2)
				|                {
				|                    Base_obj.DataType = typeof(System.Boolean);
				|                }
				|                else if (type1 == 3)
				|                {
				|                    Base_obj.DataType = typeof(System.DateTime);
				|                }
				|                else if (type1 == 4)
				|                {
				|                    Base_obj.DataType = typeof(System.Object);
				|                }
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ИсточникДанных") и (ИмяКонтекстКлассаАнгл = "DataGrid") Тогда
				Стр = Стр +
				"        [ContextProperty(""ИсточникДанных"", ""DataSource"")]
				|        public IValue DataSource
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.DataSource); }
				|            set
				|            {
				|                try
				|                {
				|                    Base_obj.DataSource = ((dynamic)value).Base_obj;
				|                }
				|                catch
				|                {
				|                    Base_obj.DataSource = null;
				|                }
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ИсточникДанных") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				Стр = Стр +
				"        [ContextProperty(""ИсточникДанных"", ""DataSource"")]
				|        public IValue DataSource
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.DataSource); }
				|            set
				|            {
				|                try
				|                {
				|                    Base_obj.DataSource = ((dynamic)value).Base_obj;
				|                }
				|                catch
				|                {
				|                    Base_obj.DataSource = null;
				|                }
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ИсточникДанных") и (ИмяКонтекстКлассаАнгл = "DataGridView") Тогда
				Стр = Стр +
				"        [ContextProperty(""ИсточникДанных"", ""DataSource"")]
				|        public IValue DataSource
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.DataSource); }
				|            set
				|            {
				|                try
				|                {
				|                    Base_obj.DataSource = ((dynamic)value).Base_obj;
				|                }
				|                catch
				|                {
				|                    Base_obj.DataSource = null;
				|                }
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ИсточникДанных") и 
				(ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxCell" или 
				 ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxColumn") Тогда
				Стр = Стр +
				"        [ContextProperty(""ИсточникДанных"", ""DataSource"")]
				|        public IValue DataSource
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.DataSource); }
				|            set
				|            {
				|                try
				|                {
				|                    Base_obj.DataSource = ((dynamic)value).Base_obj;
				|                }
				|                catch
				|                {
				|                    Base_obj.DataSource = null;
				|                }
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ИсточникДанных") и (ИмяКонтекстКлассаАнгл = "ComboBox") Тогда
				Стр = Стр +
				"        [ContextProperty(""ИсточникДанных"", ""DataSource"")]
				|        public IValue DataSource
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.DataSource); }
				|            set
				|            {
				|                try
				|                {
				|                    ArrayList ArrayList1 = Base_obj.HeightItems;
				|                    int count1 = 0;
				|                    if (value.GetType().ToString() == ""osf.ClDataTable"")
				|                    {
				|                        count1 = ((osf.ClDataTable)value).Base_obj.Rows.Count;
				|                    }
				|                    else if (value.GetType().ToString() == ""osf.ClArrayList"")
				|                    {
				|                        count1 = ((osf.ClArrayList)value).Base_obj.Count;
				|                    }
				|                    for (int i = 0; i < count1; i++)
				|                    {
				|                        ArrayList1.Add(ItemHeight);
				|                    }
				|                    Base_obj.DataSource = ((dynamic)value).Base_obj;
				|                }
				|                catch
				|                {
				|                    Base_obj.DataSource = null;
				|                }
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ЗначениеПоУмолчанию") и (ИмяКонтекстКлассаАнгл = "DataColumn") Тогда
				Стр = Стр +
				"        [ContextProperty(""ЗначениеПоУмолчанию"", ""DefaultValue"")]
				|        public IValue DefaultValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.DefaultValue); }
				|            set
				|            {
				|                if (value.GetType().ToString().Contains(""osf.""))
				|                {
				|                    Base_obj.DefaultValue = value;
				|                }
				|                else if (value.SystemType.Name == ""Строка"")
				|                {
				|                    Base_obj.DefaultValue = value.AsString();
				|                }
				|                else if (value.SystemType.Name == ""Булево"")
				|                {
				|                    Base_obj.DefaultValue = value.AsBoolean();
				|                }
				|                else if (value.SystemType.Name == ""Дата"")
				|                {
				|                    Base_obj.DefaultValue = new System.DateTime(
				|                        value.AsDate().Year,
				|                        value.AsDate().Month,
				|                        value.AsDate().Day,
				|                        value.AsDate().Hour,
				|                        value.AsDate().Minute,
				|                        value.AsDate().Second
				|                        );
				|                }
				|                else if (value.SystemType.Name == ""Число"")
				|                {
				|                    Base_obj.DefaultValue = value.AsNumber();
				|                }
				|                else
				|                {
				|                    Base_obj.DefaultValue = value;
				|                }
				|            }
				|        }
				|
				|";
			ИначеЕсли СвойствоРус = "Изображение" Тогда
				Стр = Стр +
				"        [ContextProperty(""Изображение"", ""Image"")]
				|        public ClBitmap Image
				|        {
				|            get { return (ClBitmap)OneScriptForms.RevertObj(Base_obj.Image); }
				|            set
				|            {
				|                Base_obj.Image = value.Base_obj;
				|                Base_obj.Image.dll_obj = value;
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Данные") и (ИмяКонтекстКлассаАнгл = "Link") Тогда
				Стр = Стр +
				"        [ContextProperty(""Данные"", ""LinkData"")]
				|        public IValue LinkData
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.LinkData); }
				|            set { Base_obj.LinkData = value; }
				|        }
				|
				|";
			ИначеЕсли СвойствоРус = "Е" Тогда
				Стр = Стр +
				"        [ContextProperty(""Е"", ""E"")]
				|        public double E
				|        {
				|            get { return System.Math.E; }
				|        }
				|
				|";
			ИначеЕсли СвойствоРус = "Пи" Тогда
				Стр = Стр +
				"        [ContextProperty(""Пи"", ""PI"")]
				|        public double PI
				|        {
				|            get { return System.Math.PI; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Значения") и (ИмяКонтекстКлассаАнгл = "SortedList") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значения"", ""Values"")]
				|        public ClArrayList Values
				|        {
				|            get
				|            {
				|                System.Collections.SortedList SortedList1 = Base_obj.M_SortedList;
				|                ArrayList ArrayList1 = new ArrayList();
				|                System.Collections.ICollection Values1 = SortedList1.Values;
				|                foreach (IValue val1 in Values1)
				|                {
				|                    ArrayList1.Add(val1);
				|                }
				|                return new ClArrayList(ArrayList1);
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Ключи") и (ИмяКонтекстКлассаАнгл = "SortedList") Тогда
				Стр = Стр +
				"        [ContextProperty(""Ключи"", ""Keys"")]
				|        public ClArrayList Keys
				|        {
				|            get
				|            {
				|                System.Collections.SortedList SortedList1 = Base_obj.M_SortedList;
				|                ArrayList ArrayList1 = new ArrayList();
				|                System.Collections.ICollection Keys1 = SortedList1.Keys;
				|                foreach (object key1 in Keys1)
				|                {
				|                    ArrayList1.Add(OneScriptForms.RevertObj(key1));
				|                }
				|                return new ClArrayList(ArrayList1);
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Элементы") и (ИмяКонтекстКлассаАнгл = "ComboBox") Тогда
				Стр = Стр +
				"        [ContextProperty(""Элементы"", ""Items"")]
				|        public ClComboBoxObjectCollection Items
				|        {
				|            get
				|            {
				|                items.m_obj = this;
				|                items.heightItems = items.m_obj.Base_obj.HeightItems;
				|                return items;
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ПользовательскийФормат") и (ИмяКонтекстКлассаАнгл = "DateTimePicker") Тогда
				Стр = Стр +
				"        [ContextProperty(""ПользовательскийФормат"", ""ПользовательскийФормат"")]
				|        public string CustomFormatEn
				|        {
				|            get
				|            {
				|                string srt1 = Base_obj.CustomFormat;
				|                if (srt1.Length > 0)
				|                {
				|                    string[] result = srt1.Split('\'');
				|                    for (int i = 0; i < result.Length; i++)
				|                    {
				|                        string fragment1 = result[i];
				|                        if (fragment1 != """")
				|                        {
				|                            fragment1 = fragment1.
				|                            Replace(""y"", ""г"").
				|                            Replace(""M"", ""М"").
				|                            Replace(""d"", ""д"").
				|                            Replace(""h"", ""ч"").
				|                            Replace(""H"", ""Ч"").
				|                            Replace(""m"", ""м"").
				|                            Replace(""s"", ""с"").
				|                            Replace(""t"", ""в"");
				|                            srt1 = srt1.Replace(result[i], fragment1);
				|                        }
				|                        i = i + 1;
				|                    }
				|                }
				|                return srt1;
				|            }
				|            set
				|            {
				|                string srt1 = value;
				|                string[] result = srt1.Split('\'');
				|                for (int i = 0; i < result.Length; i++)
				|                {
				|                    string fragment1 = result[i];
				|                    if (fragment1 != """")
				|                    {
				|                        fragment1 = fragment1.
				|                        Replace(""г"", ""y"").
				|                        Replace(""М"", ""M"").
				|                        Replace(""д"", ""d"").
				|                        Replace(""ч"", ""h"").
				|                        Replace(""Ч"", ""H"").
				|                        Replace(""м"", ""m"").
				|                        Replace(""с"", ""s"").
				|                        Replace(""в"", ""t"");
				|                        srt1 = srt1.Replace(result[i], fragment1);
				|                    }
				|                    i = i + 1;
				|                }
				|                Base_obj.CustomFormat = srt1;
				|            }
				|        }
				|
				|        [ContextProperty(""CustomFormat"", ""CustomFormat"")]
				|        public string CustomFormatRu
				|        {
				|            get { return Base_obj.CustomFormat; }
				|            set
				|            {
				|                string srt1 = value;
				|                string[] result = srt1.Split('\'');
				|                for (int i = 0; i < result.Length; i++)
				|                {
				|                    string fragment1 = result[i];
				|                    if (fragment1 != """")
				|                    {
				|                        fragment1 = fragment1.
				|                        Replace(""г"", ""y"").
				|                        Replace(""М"", ""M"").
				|                        Replace(""д"", ""d"").
				|                        Replace(""ч"", ""h"").
				|                        Replace(""Ч"", ""H"").
				|                        Replace(""м"", ""m"").
				|                        Replace(""с"", ""s"").
				|                        Replace(""в"", ""t"");
				|                        srt1 = srt1.Replace(result[i], fragment1);
				|                    }
				|                    i = i + 1;
				|                }
				|                Base_obj.CustomFormat = srt1;
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Значение") и (ИмяКонтекстКлассаАнгл = "DataItem") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Value); }
				|            set
				|            {
				|                Base_obj.Value = OneScriptForms.DefineTypeIValue(value);
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Значение") и (ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxCell") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Value); }
				|            set { Base_obj.Value = value; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "СоответствиеДляНеопределено") и 
				(ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxColumn") Тогда
				Стр = Стр +
				"        [ContextProperty(""СоответствиеДляНеопределено"", ""IndeterminateValue"")]
				|        public IValue IndeterminateValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.IndeterminateValue); }
				|            set { Base_obj.IndeterminateValue = value; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "СоответствиеДляНеПомечен") и 
				(ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxColumn") Тогда
				Стр = Стр +
				"        [ContextProperty(""СоответствиеДляНеПомечен"", ""FalseValue"")]
				|        public IValue FalseValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.FalseValue); }
				|            set { Base_obj.FalseValue = value; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "СоответствиеДляПомечен") и 
				(ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxCell" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewCheckBoxColumn") Тогда
				Стр = Стр +
				"        [ContextProperty(""СоответствиеДляПомечен"", ""TrueValue"")]
				|        public IValue TrueValue
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.TrueValue); }
				|            set { Base_obj.TrueValue = value; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Увеличение") и (ИмяКонтекстКлассаАнгл = "NumericUpDown") Тогда
				Стр = Стр +
				"        [ContextProperty(""Увеличение"", ""Increment"")]
				|        public IValue Increment
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Increment); }
				|            set { Base_obj.Increment = value.AsNumber(); }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Масштаб") и (ИмяКонтекстКлассаАнгл = "RichTextBox") Тогда
				Стр = Стр +
				"        [ContextProperty(""Масштаб"", ""ZoomFactor"")]
				|        public IValue ZoomFactor
				|        {
				|            get { return ValueFactory.Create(Convert.ToDecimal(Base_obj.ZoomFactor)); }
				|            set { Base_obj.ZoomFactor = Convert.ToSingle(value.AsNumber()); }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Значение") и (ИмяКонтекстКлассаАнгл = "NumericUpDown") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значение"", ""Value"")]
				|        public IValue Value
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Value); }
				|            set { Base_obj.Value = value.AsNumber(); }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Максимум") и (ИмяКонтекстКлассаАнгл = "NumericUpDown") Тогда
				Стр = Стр +
				"        [ContextProperty(""Максимум"", ""Maximum"")]
				|        public IValue Maximum
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Maximum); }
				|            set { Base_obj.Maximum = value.AsNumber(); }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Минимум") и (ИмяКонтекстКлассаАнгл = "NumericUpDown") Тогда
				Стр = Стр +
				"        [ContextProperty(""Минимум"", ""Minimum"")]
 				|       public IValue Minimum
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Minimum); }
				|            set { Base_obj.Minimum = value.AsNumber(); }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Выравнивание") и (ИмяКонтекстКлассаАнгл = "DataGridBoolColumn") Тогда
				Стр = Стр +
				"        [ContextProperty(""Выравнивание"", ""Alignment"")]
				|        public int Alignment
				|        {
				|            get { return (int)Base_obj.Alignment; }
				|            set { Base_obj.Alignment = value; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Выравнивание") и (ИмяКонтекстКлассаАнгл = "DataGridComboBoxColumnStyle") Тогда
				Стр = Стр +
				"        [ContextProperty(""Выравнивание"", ""Alignment"")]
				|        public int Alignment
				|        {
				|            get { return (int)Base_obj.Alignment; }
				|            set { Base_obj.Alignment = (System.Windows.Forms.HorizontalAlignment)value; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ТекущаяЯчейка") и (ИмяКонтекстКлассаАнгл = "DataGrid") Тогда
				Стр = Стр +
				"        [ContextProperty(""ТекущаяЯчейка"", ""CurrentCell"")]
				|        public ClDataGridCell CurrentCell
				|        {
				|            get { return new ClDataGridCell(Base_obj.CurrentCell); }
				|            set { Base_obj.CurrentCell = value.Base_obj; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ТекущаяЯчейка") и (ИмяКонтекстКлассаАнгл = "DataGridView") Тогда
				Стр = Стр +
				"        [ContextProperty(""ТекущаяЯчейка"", ""CurrentCell"")]
				|        public IValue CurrentCell
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.CurrentCell); }
				|            set { Base_obj.CurrentCell = ((dynamic)value).Base_obj; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Ключ") и (ИмяКонтекстКлассаАнгл = "DictionaryEntry") Тогда
				Стр = Стр +
				"        [ContextProperty(""Ключ"", ""Key"")]
				|        public IValue Key
				|        {
				|            get { return OneScriptForms.RevertObj(Base_obj.Key); }
				|            set { Base_obj.Key = value; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ВыбранноеЗначение") и (ИмяКонтекстКлассаАнгл = "ComboBox") Тогда
				Стр = Стр +
				"        [ContextProperty(""ВыбранноеЗначение"", ""SelectedValue"")]
				|        public IValue SelectedValue
				|        {
				|            get { return (IValue)OneScriptForms.RevertObj(Base_obj.SelectedValue); }
				|            set { Base_obj.SelectedValue = value; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ВыбранноеЗначение") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				Стр = Стр +
				"        [ContextProperty(""ВыбранноеЗначение"", ""SelectedValue"")]
				|        public IValue SelectedValue
				|        {
				|            get { return (IValue)OneScriptForms.RevertObj(Base_obj.SelectedValue); }
				|            set { Base_obj.SelectedValue = value; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ПолеВвода") и (ИмяКонтекстКлассаАнгл = "DataGridTextBoxColumn") Тогда
				Стр = Стр +
				"        [ContextProperty(""ПолеВвода"", ""TextBox"")]
				|        public ClDataGridTextBox TextBox
				|        {
				|            get { return new ClDataGridTextBox(Base_obj.TextBox); }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Значения") и (ИмяКонтекстКлассаАнгл = "HashTable") Тогда
				Стр = Стр +
				"        [ContextProperty(""Значения"", ""Values"")]
				|        public ClArrayList Values
				|        {
				|            get
				|            {
				|                System.Collections.Hashtable Hashtable1 = (System.Collections.Hashtable)Base_obj.M_HashTable;
				|                osf.ArrayList ArrayList1 = new osf.ArrayList();
				|                System.Collections.ICollection Values1 = Hashtable1.Values;
				|                foreach (IValue val1 in Values1)
				|                {
				|                    ArrayList1.Add(val1);
				|                }
				|                return new ClArrayList(ArrayList1);
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "Ключи") и (ИмяКонтекстКлассаАнгл = "HashTable") Тогда
				Стр = Стр +
				"        [ContextProperty(""Ключи"", ""Keys"")]
				|        public ClArrayList Keys
				|        {
				|            get
				|            {
				|                System.Collections.Hashtable Hashtable1 = (System.Collections.Hashtable)Base_obj.M_HashTable;
				|                osf.ArrayList ArrayList1 = new osf.ArrayList();
				|                System.Collections.ICollection Keys1 = Hashtable1.Keys;
				|                foreach (IValue key1 in Keys1)
				|                {
				|                    ArrayList1.Add(key1);
				|                }
				|                return new ClArrayList(ArrayList1);
				|            }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ОсновнойЭкран") и (ИмяКонтекстКлассаАнгл = "Screen") Тогда
				Стр = Стр +
				"        [ContextProperty(""ОсновнойЭкран"", ""PrimaryScreen"")]
				|        public ClScreen PrimaryScreen
				|        {
				|            get { return new ClScreen(Base_obj.PrimaryScreen); }
				|        }
				|
				|";
			ИначеЕсли СвойствоРус = "ФоновоеИзображение" Тогда
				Стр = Стр +
				"        [ContextProperty(""ФоновоеИзображение"", ""BackgroundImage"")]
				|        public ClBitmap BackgroundImage
				|        {
				|            get { return new ClBitmap(Base_obj.BackgroundImage); }
				|            set { Base_obj.BackgroundImage = value.Base_obj; }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "ПредставлениеПоУмолчанию") и (ИмяКонтекстКлассаАнгл = "DataTable") Тогда
				Стр = Стр +
				"        [ContextProperty(""ПредставлениеПоУмолчанию"", ""DefaultView"")]
				|        public ClDataView DefaultView
				|        {
				|            get { return new ClDataView(Base_obj.DefaultView); }
				|        }
				|
				|";
			ИначеЕсли (СвойствоРус = "НейтральноеПоложение") и (ИмяКонтекстКлассаАнгл = "ToolBarButton") Тогда
				Стр = Стр +
				"        [ContextProperty(""НейтральноеПоложение"", ""PartialPush"")]
				|        public bool PartialPush
				|        {
				|            get { return Base_obj.PartialPush; }
				|            set { Base_obj.PartialPush = value; }
				|        }
				|
				|";
			ИначеЕсли СвойствоРус = "МногострочныйРежим" Тогда
				Стр = Стр +
				"        [ContextProperty(""МногострочныйРежим"", ""Multiline"")]
				|        public bool Multiline
				|        {
				|            get { return Base_obj.Multiline; }
				|            set { Base_obj.Multiline = value; }
				|        }
				|
				|";
			ИначеЕсли СвойствоРус = "Параметр" Тогда
				Стр = Стр +
				"        [ContextProperty(""Параметр"", ""Parameter"")]
				|        public IValue Parameter
				|        {
				|            get { return (IValue)Base_obj.Parameter; }
				|        }
				|
				|";
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			Иначе	
				//находим ТипВозвращаемогоЗначения
				СтрРаздела = СтрНайтиМежду(СтрТекстДокСвойства, "<H4 class=dtH4>Значение</H4>", "<H4 class=dtH4>Примечание</H4>", , )[0];
				СтрЗначение = СтрНайтиМежду(СтрРаздела, "<P>", "</P>", , )[0];
				М09 = СтрНайтиМежду(СтрЗначение, "(", ")", , );
				Если М09.Количество() > 0 Тогда
					ТипВозвращаемогоЗначения = М09[0];
				Иначе
					ТипВозвращаемогоЗначения = СтрЗаменить(СтрЗначение, "Тип: ", "");
				КонецЕсли;
				// Сообщить(ТипВозвращаемогоЗначения);
				// // // // Строка.
				// // // // Число.
				// // // // Булево.
				// // // // Дата.
				// // // // Произвольный.
				ВозвратГет = "хххх";
				ВозвратСет = "хххх";
				Комментарий = "//";
				Если ТипВозвращаемогоЗначения = "Число." Тогда
					ТипВозвращаемогоЗначения = "int";
					ВозвратГет = "    get { return Base_obj." + СвойствоАнгл + "; }";
					ВозвратСет = "    set { Base_obj." + СвойствоАнгл + " = value; }";
					Комментарий = "";
				ИначеЕсли ТипВозвращаемогоЗначения = "Строка." Тогда
					ТипВозвращаемогоЗначения = "string";
					ВозвратГет = "    get { return Base_obj." + СвойствоАнгл + "; }";
					ВозвратСет = "    set { Base_obj." + СвойствоАнгл + " = value; }";
					Комментарий = "";
				ИначеЕсли ТипВозвращаемогоЗначения = "Булево." Тогда
					ТипВозвращаемогоЗначения = "bool";
					ВозвратГет = "    get { return Base_obj." + СвойствоАнгл + "; }";
					ВозвратСет = "    set { Base_obj." + СвойствоАнгл + " = value; }";
					Комментарий = "";
				ИначеЕсли ТипВозвращаемогоЗначения = "Дата." Тогда
					ТипВозвращаемогоЗначения = "DateTime";
					ВозвратГет = "    get { return Base_obj." + СвойствоАнгл + "; }";
					ВозвратСет = "    set { Base_obj." + СвойствоАнгл + " = value; }";
					Комментарий = "";
				ИначеЕсли ТипВозвращаемогоЗначения = "Произвольный." Тогда
					ТипВозвращаемогоЗначения = "dynamic";
					ВозвратГет = "    get { return Base_obj." + СвойствоАнгл + "; }";
					ВозвратСет = "    set { Base_obj." + СвойствоАнгл + " = value; }";
					
				Иначе // ТипВозвращаемогоЗначения это экземпляр класса
					Комментарий = "";
					ШаблонДляГетСет = "ОбщийШаблон";
					Если Не (М_СтрПеречислений.Найти(ТипВозвращаемогоЗначения) = Неопределено) Тогда //ТипВозвращаемогоЗначения это перечисление
						ТипВозвращаемогоЗначения = "int";
						ШаблонДляГетСет = "ШаблонДляПеречисления";
					ИначеЕсли ТипВозвращаемогоЗначения = "GridColumnStylesCollection" или //ТипВозвращаемогоЗначения это не перечисление
							ТипВозвращаемогоЗначения = "TreeNodeCollection" или
							ТипВозвращаемогоЗначения = "ListViewSubItemCollection" или
							ТипВозвращаемогоЗначения = "ListViewItemCollection" или
							ТипВозвращаемогоЗначения = "ListViewCheckedItemCollection" или
							ТипВозвращаемогоЗначения = "ListViewColumnHeaderCollection" или
							ТипВозвращаемогоЗначения = "ListViewSelectedItemCollection" или
							ТипВозвращаемогоЗначения = "ListBoxObjectCollection" или
							ТипВозвращаемогоЗначения = "ListBoxSelectedIndexCollection" или
							ТипВозвращаемогоЗначения = "ImageCollection" или
							ТипВозвращаемогоЗначения = "GridItemCollection" или
							ТипВозвращаемогоЗначения = "DataRowCollection" или
							ТипВозвращаемогоЗначения = "DataColumnCollection" или
							ТипВозвращаемогоЗначения = "DataTableCollection" или
							ТипВозвращаемогоЗначения = "ToolBarButtonCollection" или
							ТипВозвращаемогоЗначения = "MenuItemCollection" или
							ТипВозвращаемогоЗначения = "TabPageCollection" или
							ТипВозвращаемогоЗначения = "ControlCollection" или
							ТипВозвращаемогоЗначения = "DockPaddingEdges" или
							ТипВозвращаемогоЗначения = "Padding" или
							ТипВозвращаемогоЗначения = "LinkCollection" или
							ТипВозвращаемогоЗначения = "StatusBarPanelCollection" или
							ТипВозвращаемогоЗначения = "GridTableStylesCollection" Тогда
						ТипВозвращаемогоЗначения = "Cl" + ТипВозвращаемогоЗначения;
						ШаблонДляГетСет = "ШаблонДляКоллекций";
					ИначеЕсли (ТипВозвращаемогоЗначения = "Color") Тогда
						ТипВозвращаемогоЗначения = "Cl" + ТипВозвращаемогоЗначения;
						Если (ИмяКонтекстКлассаАнгл = "Color") или
							(ИмяКонтекстКлассаАнгл = "FontDialog") Тогда
							ШаблонДляГетСет = "ОбщийШаблон";
						Иначе
							ШаблонДляГетСет = "ШаблонДляНекоторыхКлассов";
						КонецЕсли;
					ИначеЕсли (ТипВозвращаемогоЗначения = "Rectangle") Тогда
						ТипВозвращаемогоЗначения = "Cl" + ТипВозвращаемогоЗначения;
						Если (ИмяКонтекстКлассаАнгл = "ToolBarButton") Тогда
							ШаблонДляГетСет = "ОбщийШаблон";
						ИначеЕсли (Прав(ИмяКонтекстКлассаАнгл, 4) <> "Args") Тогда
							ШаблонДляГетСет = "ШаблонДляНекоторыхКлассов";
						КонецЕсли;
					ИначеЕсли (ТипВозвращаемогоЗначения = "ImageList") Тогда
						ТипВозвращаемогоЗначения = "Cl" + ТипВозвращаемогоЗначения;
						ШаблонДляГетСет = "ОбщийШаблон";
					ИначеЕсли (ТипВозвращаемогоЗначения = "Icon") или
							(ТипВозвращаемогоЗначения = "Font") Тогда
						ТипВозвращаемогоЗначения = "Cl" + ТипВозвращаемогоЗначения;
						ШаблонДляГетСет = "ШаблонДляКлассовЧерезHashtable";
					Иначе
						ТипВозвращаемогоЗначения = "Cl" + ТипВозвращаемогоЗначения;
					КонецЕсли;
					
					Если ШаблонДляГетСет = "ШаблонДляКоллекций" Тогда
						// gridColumnStyles = new ClGridColumnStylesCollection(Base_obj.GridColumnStyles);
						// public ClGridColumnStylesCollection gridColumnStyles;
						// [ContextProperty("СтилиКолонкиСеткиДанных", "GridColumnStyles")]
						// public ClGridColumnStylesCollection GridColumnStyles
						// {
							// get { return gridColumnStyles; }
						// }
						ПриватСвойство = НРег(Лев(СвойствоАнгл, 1)) + Сред(СвойствоАнгл, 2);
						СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
						"        private " + ТипВозвращаемогоЗначения + " " + ПриватСвойство + ";";
						СтрКонструктор = СтрЗаменить(СтрКонструктор, 
						"        }//end_constr"
						, 
						"            " + ПриватСвойство + " = new " + ТипВозвращаемогоЗначения + "(Base_obj." + СвойствоАнгл + ");
						|        }//end_constr"
						);
						ВозвратГет = "    " + Комментарий + "get { return " + ПриватСвойство + "; }";
						ВозвратСет = "    " + Комментарий + "set { " + ПриватСвойство + " = new " + ТипВозвращаемогоЗначения + "(value.Base_obj); }";
					ИначеЕсли ШаблонДляГетСет = "ШаблонДляНекоторыхКлассов" Тогда
						// backColor = new ClColor(Base_obj.BackColor);
						// public ClColor backColor;
						// public ClColor BackColor
						// {
							// get { return backColor; }
							// set
							// {
								// backColor = value;
								// Base_obj.BackColor = value.Base_obj;
							// }
						// }
						ПриватСвойство = НРег(Лев(СвойствоАнгл, 1)) + Сред(СвойствоАнгл, 2);
						СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
						"        private " + ТипВозвращаемогоЗначения + " " + ПриватСвойство + ";";
						СтрКонструктор = СтрЗаменить(СтрКонструктор, 
						"        }//end_constr"
						, 
						"            " + ПриватСвойство + " = new " + ТипВозвращаемогоЗначения + "(Base_obj." + СвойствоАнгл + ");
						|        }//end_constr"
						);
						ВозвратГет = "    " + Комментарий + "get { return " + ПриватСвойство + "; }";
						ВозвратСет = "    " + Комментарий + "set 
						|            {
						|                " + ПриватСвойство + " = value;
						|                Base_obj." + СвойствоАнгл + " = value.Base_obj;
						|            }";
					ИначеЕсли ШаблонДляГетСет = "ШаблонДляКлассовЧерезHashtable" Тогда
						// get
						// {
							// return (ClIcon)OneScriptForms.RevertObj(Base_obj.Icon, "StatusBarPanel.Значок");
						// }
						// set
						// {
							// Base_obj.Icon = value.Base_obj;
							// Base_obj.Icon.dll_obj = value;
						// }
						ВозвратГет = "    " + Комментарий + "get { return (" + ТипВозвращаемогоЗначения + ")OneScriptForms.RevertObj(Base_obj." + СвойствоАнгл + "); }";
						ВозвратСет = "    " + Комментарий + "set 
						|            {
						|                Base_obj." + СвойствоАнгл + " = value.Base_obj; 
						|                Base_obj." + СвойствоАнгл + ".dll_obj = value;
						|            }";
					ИначеЕсли ШаблонДляГетСет = "ШаблонДляПеречисления" Тогда
						// get { return (int)Base_obj.TextAlign; }
						// set { Base_obj.TextAlign = value; }
						ВозвратГет = "    get { return (int)Base_obj." + СвойствоАнгл + "; }";          
						ВозвратСет = "    set { Base_obj." + СвойствоАнгл + " = value; }";
					ИначеЕсли ШаблонДляГетСет = "ОбщийШаблон" Тогда
						// get { return (ClDataGridCell)OneScriptForms.RevertObj(Base_obj.CurrentCell); }
						// set { Base_obj.Bounds = value.Base_obj; }
						ВозвратГет = "    " + Комментарий + "get { return (" + ТипВозвращаемогоЗначения + ")OneScriptForms.RevertObj(Base_obj." + СвойствоАнгл + "); }";
						ВозвратСет = "    " + Комментарий + "set { Base_obj." + СвойствоАнгл + " = value.Base_obj; }";
					КонецЕсли;
				КонецЕсли;

				Стр = Стр +
				"        " + Комментарий + "[ContextProperty(""" + СвойствоРус + """, """ + СвойствоАнгл + """)]" + Символы.ПС + 
				"        " + Комментарий + "public " + ТипВозвращаемогоЗначения + " " + СвойствоАнгл + Символы.ПС + 
				"        " + Комментарий + "{" + Символы.ПС;
				//находим есть ли set get
				Если СтрИспользование = "Чтение и запись." Тогда
					Стр = Стр +
					"        " + Комментарий + ВозвратГет + Символы.ПС +
					"        " + Комментарий + ВозвратСет + Символы.ПС;
				Иначе
					Стр = Стр +
					"        " + Комментарий + ВозвратГет + Символы.ПС;
				КонецЕсли;
				Стр = Стр +
				"        " + Комментарий + "}" + Символы.ПС + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Стр = 
		"        //Свойства============================================================" + Символы.ПС;
	КонецЕсли;
	
	Возврат Стр;
КонецФункции//Свойства

Функция ПеречисленияКакСвойства(ИмяФайлаЧленов)
	Если Не (ИмяФайлаЧленов = КаталогСправки + "\OneScriptForms.OneScriptFormsMembers.html") Тогда
		Возврат "";
	КонецЕсли;
	
	СписокПереч2 = Новый СписокЗначений;
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(КаталогСправки + "\OneScriptForms.html");
	Стр = ТекстДок.ПолучитьТекст();
	//находим строку таблицы
	СтрТаблПереч = СтрНайтиМежду(Стр, "<H3 class=dtH3>Перечисления</H3>", "</TBODY></TABLE>", Ложь, )[0];
	М48 = СтрНайтиМежду(СтрТаблПереч, "<TR vAlign=top>" + Символы.ПС + "    <TD", "</TD></TR>", Ложь, );
	Для А61 = 0 По М48.ВГраница() Цикл
		СтрТабл = М48[А61];
		СтрТабл = СтрЗаменить(СтрТабл, "&nbsp;", " ");
		// Сообщить("-СтрТабл-----------------------");
		// Сообщить("" + СтрТабл);
		Предст2 = СтрНайтиМежду(СтрТабл, ".html"">", " ", , )[0];
		Знач2 = СтрНайтиМежду(СтрТабл, "(", ")", , )[0];
		СписокПереч2.Добавить(Знач2, Предст2);
	КонецЦикла;

	Стр = "" + Символы.ПС + "        //ПеречисленияКакСвойства============================================================" + Символы.ПС;
	
	Для А = 0 По СписокПереч2.Количество() - 1 Цикл
		// Сообщить("" + СписокПереч2.Получить(А).Представление + " -- " + СписокПереч2.Получить(А).Значение);
		Знач3 = СписокПереч2.Получить(А).Значение;
		Предст3 = СписокПереч2.Получить(А).Представление;
		// Сообщить("Знач3 - " + Знач3 + " Предст3 - " + Предст3);
		СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
		"        private static Cl" + Знач3 + " cl_" + Знач3 + " = new Cl" + Знач3 + "();";
		
		Стр = Стр + Символы.ПС + 
		"        [ContextProperty(""" + Предст3 + """, """ + Знач3 + """)]
		|        public Cl" + Знач3 + " " + Знач3 + "
		|        {
		|            get { return cl_" + Знач3 + "; }
		|        }" + Символы.ПС;
	КонецЦикла;
		Стр = Стр + Символы.ПС;
	Возврат Стр;
	
КонецФункции//ПеречисленияКакСвойства

Функция Методы(ИмяФайлаЧленов, ИмяКонтекстКлассаАнгл)
	ТекстДокЧленов = Новый ТекстовыйДокумент;
	КаталогНаДиске = Новый Файл(ИмяФайлаЧленов);
    Если Не (КаталогНаДиске.Существует()) Тогда
        Стр = 
		"        //Методы============================================================" + Символы.ПС;
		Возврат Стр;
	КонецЕсли;
	ТекстДокЧленов.Прочитать(ИмяФайлаЧленов);
	СтрТекстДокЧленов = ТекстДокЧленов.ПолучитьТекст();
	Если Не (СтрНайтиМежду(СтрТекстДокЧленов, "<H4 class=dtH4>Методы</H4>", "</TBODY></TABLE>", Ложь, ).Количество() > 0) Тогда
		Стр = 
		"        //Методы============================================================" + Символы.ПС;
		Возврат Стр;
	КонецЕсли;
	СтрТаблицаЧленов = СтрНайтиМежду(СтрТекстДокЧленов, "<H4 class=dtH4>Методы</H4>", "</TBODY></TABLE>", Ложь, )[0];
	Массив1 = СтрНайтиМежду(СтрТаблицаЧленов, "<TR vAlign=top>", "</TD></TR>", Ложь, );
	//переберем строки таблицы
	Если Массив1.Количество() > 0 Тогда
		Стр = "        //Методы============================================================" + Символы.ПС;
		Для А = 0 По Массив1.ВГраница() Цикл
			//найдем первую ячейку строки таблицы
			М07 = СтрНайтиМежду(Массив1[А], "<TD width=""50%"">", "</TD>", Ложь, );
			СтрХ = М07[0];
			СтрХ = СтрЗаменить(СтрХ, "&nbsp;", " ");
			МетодАнгл = СтрНайтиМежду(СтрХ, "(", ")", , )[0];
			// // // Сообщить("-ИмяФайлаЧленов---------------------------");
			// // // Сообщить("" + ИмяФайлаЧленов);
			// // // Сообщить("-МетодАнгл---------------------------");
			// // // Сообщить("" + МетодАнгл);
			МетодРус = СтрНайтиМежду(СтрХ, ".html"">", " (", , )[0];
			Если (МетодРус = "ДоступностьВизуальныхСтилей") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ДоступностьВизуальныхСтилей"", ""EnableVisualStyles"")]
				|        public void EnableVisualStyles()
				|        {
				|            System.Windows.Forms.Application.EnableVisualStyles();
				|            System.Windows.Forms.Application.DoEvents();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ЗапуститьОбработкуСобытий") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗапуститьОбработкуСобытий"", ""StartEventProcessing"")]
				|        public void StartEventProcessing()
				|        {
				|            handleEvents = true;
				|            while (GoOn)
				|            {
				|                WaitMessage();
				|                System.Windows.Forms.Application.DoEvents();
				|            }
				|        }
				|        //Функция WaitMessage передает управление к другим потокам тогда, когда поток не имеет никаких других сообщений 
				|        //в своей очереди сообщений. Функция WaitMessage приостанавливает работу потока и не возвращает управление до 
				|        //тех пор, пока не будет помещено новое сообщение в очередь сообщений потока.
				|        //При вызове DoEvents в коде, приложение может выполнять другие события. Например, если имеется форма, добавляющая 
				|        //данные в ListBox, добавление DoEvents в код позволит форме перерисовывается при перетаскивании над ней другого окна. 
				|        //Если удалить DoEvents из кода, форма не будет перерисовываться до завершения выполнения обработчика события.
				|        //DoEvents передает управление Windows чтобы она выполнила обработку своих событий
				|        
				|";
			ИначеЕсли (МетодРус = "НайтиМежду") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""НайтиМежду"", ""ParseBetween"")]
				|        public string ParseBetween2(string p1, string p2 = null, string p3 = null)
				|        {
				|            return ParseBetween(p1, p2, p3);
				|        }
				|
				|        public static string ParseBetween(string p1, string p2 = null, string p3 = null)
				|        {
				|            //p1 - исходная строка
				|            //p2 - подстрока поиска от которой ведем поиск
				|            //p3 - подстрока поиска до которой ведем поиск
				|            //возвращает строку, ограниченную p2 и p3
				|            string str1 = p1;
				|            int Position1;
				|            if (p2 != null && p3 == null)
				|            {
				|                Position1 = str1.IndexOf(p2);
				|                if (Position1 >= 0)
				|                {
				|                    return str1.Substring(Position1 + p2.Length);
				|                }
				|            }
				|            else if (p2 == null && p3 != null)
				|            {
				|                Position1 = str1.IndexOf(p3) + 1;
				|                if (Position1 > 0)
				|                {
				|                    return str1.Substring(0, Position1 - 1);
				|                }
				|            }
				|            else if (p2 != null && p3 != null)
				|            {
				|                Position1 = str1.IndexOf(p2);
				|                while (Position1 >= 0)
				|                {
				|                    string Стр2;
				|                    Стр2 = str1.Substring(Position1 + p2.Length);
				|                    int Position2 = Стр2.IndexOf(p3) + 1;
				|                    int SumPosition2 = Position2;
				|                    while (Position2 > 0)
				|                    {
				|                        if (Стр2.Substring(0, SumPosition2 - 1).IndexOf(p3) <= -1)
				|                        {
				|                            return Стр2.Substring(0, SumPosition2 - 1);
				|                        }
				|                        try
				|                        {
				|                            Position2 = Стр2.Substring(SumPosition2 + 1).IndexOf(p3) + 1;
				|                            SumPosition2 = SumPosition2 + Position2 + 1;
				|                        }
				|                        catch
				|                        {
				|                            break;
				|                        }
				|                    }
				|                    str1 = str1.Substring(Position1 + 1);
				|                    Position1 = str1.IndexOf(p2);
				|                }
				|            }
				|            return null;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "СоздатьФорму") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""СоздатьФорму"", ""CreateForm"")]
				|        public ClForm CreateForm(IRuntimeContextInstance script)
				|        {
				|            ClForm ClForm1 = new ClForm();
				|            ClForm1.Script = script;
				|            int i = script.FindMethod(""ПриСозданииФормы"");
				|            if (i > 0)
				|            {
				|                IValue[] args = { ClForm1 };
				|                script.CallAsProcedure(i, args);
				|            };
				|            return ClForm1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Заполнение") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""Заполнение"", ""Padding"")]
				|        public ClPadding Padding(IValue p1 = null, IValue p2 = null, IValue p3 = null, IValue p4 = null)
				|        {
				|            if (p1 != null)
				|            {
				|                if (p2 != null && p3 != null && p4 != null)
				|                {
				|                    return new ClPadding(Convert.ToInt32(p1.AsNumber()), Convert.ToInt32(p2.AsNumber()), Convert.ToInt32(p3.AsNumber()), Convert.ToInt32(p4.AsNumber()));
				|                }
				|                return new ClPadding(Convert.ToInt32(p1.AsNumber()));
				|            }
				|            return new ClPadding();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Строки") и (ИмяКонтекстКлассаАнгл = "DataGridView") Тогда
				Стр = Стр +
				"        [ContextMethod(""Строки"", ""Rows"")]
				|        public ClDataGridViewRow Rows2(int p1)
				|        {
				|            return (ClDataGridViewRow)OneScriptForms.RevertObj(Base_obj.Rows[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Ячейка") и (ИмяКонтекстКлассаАнгл = "DataGridView") Тогда
				Стр = Стр +
				"        [ContextMethod(""Ячейка"", ""Cell"")]
				|        public IValue Cell2(int p1, int p2)
				|        {
				|            dynamic Obj1 = null;
				|            string str1 = Base_obj.M_DataGridView.Rows[p2].Cells[p1].GetType().ToString();
				|            string str2 = str1.Replace(""System.Windows.Forms."", ""osf."");
				|            System.Type Type1 = System.Type.GetType(str2, false, true);
				|            object[] args1 = { Base_obj.M_DataGridView.Rows[p2].Cells[p1] };
				|            Obj1 = Activator.CreateInstance(Type1, args1);
				|            return OneScriptForms.RevertObj(Obj1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Колонки") и (ИмяКонтекстКлассаАнгл = "DataGridView") Тогда
				Стр = Стр +
				"        [ContextMethod(""Колонки"", ""Columns"")]
				|        public IValue Columns2(int p1)
				|        {
				|            dynamic Obj1 = null;
				|            string str1 = Base_obj.Columns[p1].GetType().ToString();
				|            string str2 = str1.Replace(""System.Windows.Forms."", ""osf."");
				|            System.Type Type1 = System.Type.GetType(str2, false, true);
				|            object[] args1 = { Base_obj.Columns[p1] };
				|            Obj1 = Activator.CreateInstance(Type1, args1);
				|            return OneScriptForms.RevertObj(Obj1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Ячейки") и (ИмяКонтекстКлассаАнгл = "DataGridViewRow") Тогда
				Стр = Стр +
				"        [ContextMethod(""Ячейки"", ""Cells"")]
				|        public IValue Cells2(int p1)
				|        {
				|            dynamic Obj1 = null;
				|            string str1 = Base_obj.Cells[p1].GetType().ToString();
				|            string str2 = str1.Replace(""System.Windows.Forms."", ""osf."");
				|            System.Type Type1 = System.Type.GetType(str2, false, true);
				|            object[] args1 = { Base_obj.Cells[p1] };
				|            Obj1 = Activator.CreateInstance(Type1, args1);
				|            return OneScriptForms.RevertObj(Obj1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Таблица") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""Таблица"", ""DataGridView"")]
				|        public ClDataGridView DataGridView()
				|        {
				|            return new ClDataGridView();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "СтильЯчейки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""СтильЯчейки"", ""DataGridViewCellStyle"")]
				|        public ClDataGridViewCellStyle DataGridViewCellStyle(ClDataGridViewCellStyle p1 = null)
				|        {
				|            if (p1 != null)
				|            {
				|                return new ClDataGridViewCellStyle(p1.Base_obj);
				|            }
				|            return new ClDataGridViewCellStyle();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ЗаголовокКолонки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗаголовокКолонки"", ""DataGridViewColumnHeaderCell"")]
				|        public ClDataGridViewColumnHeaderCell DataGridViewColumnHeaderCell()
				|        {
				|            return new ClDataGridViewColumnHeaderCell();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ЗаголовокСтроки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗаголовокСтроки"", ""DataGridViewRowHeaderCell"")]
				|        public ClDataGridViewRowHeaderCell DataGridViewRowHeaderCell()
				|        {
				|            return new ClDataGridViewRowHeaderCell();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПолеВводаЯчейки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолеВводаЯчейки"", ""DataGridViewTextBoxCell"")]
				|        public ClDataGridViewTextBoxCell DataGridViewTextBoxCell()
				|        {
				|            return new ClDataGridViewTextBoxCell();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ЗаголовокСтрокиЯчейки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗаголовокСтрокиЯчейки"", ""DataGridViewRowHeaderCell"")]
				|        public ClDataGridViewRowHeaderCell DataGridViewRowHeaderCell()
				|        {
				|            return new ClDataGridViewRowHeaderCell();
				|        }				
				|        
				|";
			ИначеЕсли (МетодРус = "ЗаголовокКолонкиЯчейки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗаголовокКолонкиЯчейки"", ""DataGridViewColumnHeaderCell"")]
				|        public ClDataGridViewColumnHeaderCell DataGridViewColumnHeaderCell()
				|        {
				|            return new ClDataGridViewColumnHeaderCell();
				|        }				
				|        
				|";
			ИначеЕсли (МетодРус = "ЗаголовокЯчейки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗаголовокЯчейки"", ""DataGridViewHeaderCell"")]
				|        public ClDataGridViewHeaderCell DataGridViewHeaderCell()
				|        {
				|            return new ClDataGridViewHeaderCell();
				|        }				
				|        
				|";
			ИначеЕсли (МетодРус = "КартинкаЯчейки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КартинкаЯчейки"", ""DataGridViewImageCell"")]
				|        public ClDataGridViewImageCell DataGridViewImageCell()
				|        {
				|            return new ClDataGridViewImageCell();
				|        }				
				|        
				|";
			ИначеЕсли (МетодРус = "КнопкаЯчейки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КнопкаЯчейки"", ""DataGridViewButtonCell"")]
				|        public ClDataGridViewButtonCell DataGridViewButtonCell()
				|        {
				|            return new ClDataGridViewButtonCell();
				|        }				
				|        
				|";
			ИначеЕсли (МетодРус = "ПолеВыбораЯчейки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолеВыбораЯчейки"", ""DataGridViewComboBoxCell"")]
				|        public ClDataGridViewComboBoxCell DataGridViewComboBoxCell()
				|        {
				|            return new ClDataGridViewComboBoxCell();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "СсылкаЯчейки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""СсылкаЯчейки"", ""DataGridViewLinkCell"")]
				|        public ClDataGridViewLinkCell DataGridViewLinkCell()
				|        {
				|            return new ClDataGridViewLinkCell();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ФлажокЯчейки") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ФлажокЯчейки"", ""DataGridViewCheckBoxCell"")]
				|        public ClDataGridViewCheckBoxCell DataGridViewCheckBoxCell()
				|        {
				|            return new ClDataGridViewCheckBoxCell();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "КолонкаКартинка") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КолонкаКартинка"", ""DataGridViewImageColumn"")]
				|        public ClDataGridViewImageColumn DataGridViewImageColumn()
				|        {
				|            return new ClDataGridViewImageColumn();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "КолонкаКнопка") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КолонкаКнопка"", ""DataGridViewButtonColumn"")]
				|        public ClDataGridViewButtonColumn DataGridViewButtonColumn()
				|        {
				|            return new ClDataGridViewButtonColumn();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "КолонкаТаблицы") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КолонкаТаблицы"", ""DataGridViewColumn"")]
				|        public ClDataGridViewColumn DataGridViewColumn()
				|        {
				|            return new ClDataGridViewColumn();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "КолонкаПолеВвода") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КолонкаПолеВвода"", ""DataGridViewTextBoxColumn"")]
				|        public ClDataGridViewTextBoxColumn DataGridViewTextBoxColumn()
				|        {
				|            return new ClDataGridViewTextBoxColumn();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "КолонкаПолеВыбора") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КолонкаПолеВыбора"", ""DataGridViewComboBoxColumn"")]
				|        public ClDataGridViewComboBoxColumn DataGridViewComboBoxColumn()
				|        {
				|            return new ClDataGridViewComboBoxColumn();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "КолонкаСсылка") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КолонкаСсылка"", ""DataGridViewLinkColumn"")]
				|        public ClDataGridViewLinkColumn DataGridViewLinkColumn()
				|        {
				|            return new ClDataGridViewLinkColumn();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "СтрокаТаблицы") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""СтрокаТаблицы"", ""DataGridViewRow"")]
				|        public ClDataGridViewRow DataGridViewRow()
				|        {
				|            return new ClDataGridViewRow();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "КолонкаФлажок") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КолонкаФлажок"", ""DataGridViewCheckBoxColumn"")]
				|        public ClDataGridViewCheckBoxColumn DataGridViewCheckBoxColumn()
				|        {
				|            return new ClDataGridViewCheckBoxColumn();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ЯчейкаТаблицы") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЯчейкаТаблицы"", ""DataGridViewCell"")]
				|        public ClDataGridViewCell DataGridViewCell()
				|        {
				|            return new ClDataGridViewCell();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ЯчейкиТаблицы") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЯчейкиТаблицы"", ""DataGridViewCellCollection"")]
				|        public ClDataGridViewCellCollection DataGridViewCellCollection()
				|        {
				|            return new ClDataGridViewCellCollection();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "УстановитьИндексДочернего") и (ИмяКонтекстКлассаАнгл = "ControlCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""УстановитьИндексДочернего"", ""SetChildIndex"")]
				|        public void SetChildIndex(IValue p1, int p2)
				|        {
				|            Base_obj.SetChildIndex(((osf.Control)((dynamic)p1).Base_obj), p2);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ВоспроизвестиСистемныйЗвук" Тогда
				Стр = Стр +
				"        [ContextMethod(""ВоспроизвестиСистемныйЗвук"", ""PlaySystem"")]
				|        public void PlaySystem(int p1)
				|        {
				|            if (p1 == 0)
				|            {
				|                System.Media.SystemSounds.Question.Play();
				|            }
				|            else if (p1 == 1)
				|            {
				|                System.Media.SystemSounds.Exclamation.Play();
				|            }
				|            else if (p1 == 2)
				|            {
				|                System.Media.SystemSounds.Beep.Play();
				|             }
				|             else if (p1 == 3)
				|             {
				|                 System.Media.SystemSounds.Asterisk.Play();
				|             }
				|             else if (p1 == 4)
				|             {
				|                 System.Media.SystemSounds.Hand.Play();
				|             }
				|         }
				|        
				|";
			ИначеЕсли МетодРус = "Выше" Тогда
				Стр = Стр +
				"        [ContextMethod(""Выше"", ""PlaceTop"")]
				|        public void PlaceTop(IValue p1, int p2)
				|        {
				|            dynamic p3 = ((dynamic)p1).Base_obj;
				|            Base_obj.Location = new Point(p3.Left, p3.Top - Base_obj.Height - p2);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Левее" Тогда
				Стр = Стр +
				"        [ContextMethod(""Левее"", ""PlaceLeft"")]
				|        public void PlaceLeft(IValue p1, int p2)
				|        {
				|            dynamic p3 = ((dynamic)p1).Base_obj;
				|            Base_obj.Location = new Point(p3.Left - Base_obj.Width - p2, p3.Top);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Ниже" Тогда
				Стр = Стр +
				"        [ContextMethod(""Ниже"", ""PlaceBottom"")]
				|        public void PlaceBottom(IValue p1, int p2)
				|        {
				|            dynamic p3 = ((dynamic)p1).Base_obj;
				|            Base_obj.Location = new Point(p3.Left, p3.Top + p3.Height + p2);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Правее" Тогда
				Стр = Стр +
				"        [ContextMethod(""Правее"", ""PlaceRight"")]
				|        public void PlaceRight(IValue p1, int p2)
				|        {
				|            dynamic p3 = ((dynamic)p1).Base_obj;
				|            Base_obj.Location = new Point(p3.Right + p2, p3.Top);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Предупреждение" Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        [DllImport(""user32.dll"", SetLastError = true)] static extern int MessageBoxTimeout(IntPtr hwnd, String text, String title, MesBoxFlags type, Int16 wLanguageId, Int32 milliseconds);";
				Стр = Стр +
				"        [ContextMethod(""Предупреждение"", ""DoMessageBox"")]
				|        public void DoMessageBox(string p1, int p2 = 0, string p3 = """")
				|        {
				|            int timeout = p2 * 1000;
				|            MessageBoxTimeout(IntPtr.Zero, p1, p3, MesBoxFlags.MB_OK | MesBoxFlags.MB_TASKMODAL, 0, timeout);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ЗакрепитьНаРабочемСтоле" Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        [DllImport(""user32.dll"", SetLastError = true)] static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
				|        [DllImport(""user32.dll"")] static extern int SetParent(int hWndChild, int hWndNewParent);";
				Стр = Стр +
				"        [ContextMethod(""ЗакрепитьНаРабочемСтоле"", ""PinToDesktop"")]
				|        public void PinToDesktop()
				|        {
				|            IntPtr hWnd = Base_obj.M_Form.Handle;
				|            IntPtr hWndProgMan = FindWindow(""Progman"", ""Program Manager"");
				|            SetParent(hWnd.ToInt32(), hWndProgMan.ToInt32());
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ОткрепитьОтРабочегоСтола" Тогда
				Стр = Стр +
				"        [ContextMethod(""ОткрепитьОтРабочегоСтола"", ""UnpinFromDesktop"")]
				|        public void UnpinFromDesktop()
				|        {
				|            IntPtr hWnd = Base_obj.M_Form.Handle;
				|            SetParent(hWnd.ToInt32(), IntPtr.Zero.ToInt32());
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ЗаполнитьПрямоугольник") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗаполнитьПрямоугольник"", ""FillRectangle"")]
				|        public void FillRectangle(IValue p1, IValue p2, IValue p3, IValue p4, IValue p5)
				|        {
				|            Base_obj.FillRectangle(((dynamic)p1).Base_obj, Convert.ToSingle(p2.AsNumber()), Convert.ToSingle(p3.AsNumber()), Convert.ToSingle(p4.AsNumber()), Convert.ToSingle(p5.AsNumber()));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "КопироватьСЭкрана") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""КопироватьСЭкрана"", ""CopyFromScreen"")]
				|        public void CopyFromScreen(int p1, int p2, int p3, int p4, ClSize p5)
				|        {
				|            Base_obj.CopyFromScreen(p1, p2, p3, p4, p5.Base_obj);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Масштабировать") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""Масштабировать"", ""ScaleTransform"")]
				|        public void ScaleTransform(IValue p1, IValue p2)
				|        {
				|            Base_obj.ScaleTransform(Convert.ToSingle(p1.AsNumber()), Convert.ToSingle(p2.AsNumber()));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Повернуть") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""Повернуть"", ""RotateTransform"")]
				|        public void RotateTransform(IValue p1)
				|        {
				|            Base_obj.RotateTransform(Convert.ToSingle(p1.AsNumber()));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "РисоватьИзображение") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""РисоватьИзображение"", ""DrawImage"")]
				|        public void DrawImage(ClBitmap p1, IValue p2, IValue p3, IValue p4, IValue p5)
				|        {
				|            Base_obj.DrawImage(p1.Base_obj, Convert.ToSingle(p2.AsNumber()), Convert.ToSingle(p3.AsNumber()), Convert.ToSingle(p4.AsNumber()), Convert.ToSingle(p5.AsNumber()));
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Перо" Тогда
				Стр = Стр +
				"        [ContextMethod(""Перо"", ""Pen"")]
				|        public ClPen Pen(ClColor p1, IValue p2 = null)
				|        {
				|            float _p2;
				|            if (p2 == null)
				|            {
				|                _p2 = 1.0f;
				|            }
				|            else
				|            {
				|                _p2 = Convert.ToSingle(p2.AsNumber());
				|            }
				|            return new ClPen(p1, _p2);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "РисоватьЛинию") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""РисоватьЛинию"", ""DrawLine"")]
				|        public void DrawLine(ClPen p1, IValue p2, IValue p3, IValue p4, IValue p5)
				|        {
				|            Base_obj.DrawLine(p1.Base_obj, Convert.ToSingle(p2.AsNumber()), Convert.ToSingle(p3.AsNumber()), Convert.ToSingle(p4.AsNumber()), Convert.ToSingle(p5.AsNumber()));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "РисоватьПрямоугольник") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""РисоватьПрямоугольник"", ""DrawRectangle"")]
				|        public void DrawRectangle(ClPen p1, IValue p2, IValue p3, IValue p4, IValue p5)
				|        {
				|            Base_obj.DrawRectangle(p1.Base_obj, Convert.ToSingle(p2.AsNumber()), Convert.ToSingle(p3.AsNumber()), Convert.ToSingle(p4.AsNumber()), Convert.ToSingle(p5.AsNumber()));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "РисоватьСтроку") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""РисоватьСтроку"", ""DrawString"")]
				|        public void DrawString(string p1, ClFont p2, IValue p3, IValue p4, IValue p5)
				|        {
				|            Base_obj.DrawString(p1, p2.Base_obj, ((dynamic)p3).Base_obj, Convert.ToSingle(p4.AsNumber()), Convert.ToSingle(p5.AsNumber()));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "РисоватьЭлипс") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""РисоватьЭлипс"", ""DrawEllipse"")]
				|        public void DrawEllipse(ClPen p1, IValue p2, IValue p3, IValue p4, IValue p5)
				|        {
				|            Base_obj.DrawEllipse(p1.Base_obj, Convert.ToSingle(p2.AsNumber()), Convert.ToSingle(p3.AsNumber()), Convert.ToSingle(p4.AsNumber()), Convert.ToSingle(p5.AsNumber()));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Сдвинуть") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""Сдвинуть"", ""TranslateTransform"")]
				|        public void TranslateTransform(IValue p1, IValue p2)
				|        {
				|            Base_obj.TranslateTransform(Convert.ToSingle(p1.AsNumber()), Convert.ToSingle(p2.AsNumber()));
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Тип" Тогда
				Стр = Стр +
				"        [ContextMethod(""Тип"", ""Type"")]
				|        public ClType Type(IValue p1)
				|        {
				|            return new ClType(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "НайтиЭлемент" Тогда
				Стр = Стр +
				"        [ContextMethod(""НайтиЭлемент"", ""FindControl"")]
				|        public IValue FindControl(string p1)
				|        {
				|            return OneScriptForms.RevertObj(Base_obj.FindControl(p1));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ЗакодироватьВСтроку") и (ИмяКонтекстКлассаАнгл = "Bitmap") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗакодироватьВСтроку"", ""ToBase64String"")]
				|        public string ToBase64String(ClImageFormat p1 = null)
				|        {
				|            if (p1 == null)
				|            {
				|                return Base_obj.ToBase64String();
				|            }
				|            return Base_obj.ToBase64String(p1.Base_obj);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "НайтиФорму" Тогда
				Стр = Стр +
				"        [ContextMethod(""НайтиФорму"", ""FindForm"")]
				|        public ClForm FindForm()
				|        {
				|            if (Base_obj.FindForm() != null)
				|            {
				|                return Base_obj.FindForm().dll_obj;
				|            }
				|            return null;
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ДочернийПоКоординатам" Тогда
				Стр = Стр +
				"        [ContextMethod(""ДочернийПоКоординатам"", ""GetChildAtPoint"")]
				|        public IValue GetChildAtPoint(ClPoint p1)
				|        {
				|            return ((dynamic)Base_obj.GetChildAtPoint(p1.Base_obj)).dll_obj;
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "СледующийЭлемент" Тогда
				Стр = Стр +
				"        [ContextMethod(""СледующийЭлемент"", ""GetNextControl"")]
				|        public IValue GetNextControl(IValue p1, bool p2)
				|        {
				|            return Base_obj.GetNextControl(((dynamic)p1).Base_obj, p2).dll_obj;
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ЭлементУправления" Тогда
				Стр = Стр +
				"        [ContextMethod(""ЭлементУправления"", ""Control"")]
				|        public IValue Control(int p1)
				|        {
				|            return OneScriptForms.RevertObj(Base_obj.getControl(p1));
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "СоздатьГрафику" Тогда
				Стр = Стр +
				"        [ContextMethod(""СоздатьГрафику"", ""CreateGraphics"")]
				|        public ClGraphics CreateGraphics()
				|        {
				|            return new ClGraphics(Base_obj.CreateGraphics());
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ИзРазмера") и (ИмяКонтекстКлассаАнгл = "Rectangle") Тогда
				Стр = Стр +
				"        [ContextMethod(""ИзРазмера"", ""FromSize"")]
				|        public ClRectangle FromSize(ClSize p1)
				|        {
				|            return new ClRectangle(Base_obj.FromSize(p1.Base_obj));
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Картинка" Тогда
				Стр = Стр +
				"        [ContextMethod(""Картинка"", ""Bitmap"")]
				|        public ClBitmap Bitmap(IValue p1 = null, ClSize p2 = null)
				|        {
				|            if (p1 == null && p2 == null)
				|            {
				|                return null;
				|            }
				|            if (p1 == null && p2 != null)
				|            {
				|                return new ClBitmap(p2);
				|            }
				|            if (p1 != null && p2 == null)
				|            {
				|                string str1 = p1.GetType().ToString();
				|                if (str1 == ""osf.ClBitmap"")
				|                {
				|                    ClBitmap ClBitmap1 = (ClBitmap)p1.AsObject();
				|                    Image Image1 = (Image)ClBitmap1.Base_obj;
				|                    return new ClBitmap(Image1);
				|                }
				|                if (str1 == ""osf.ClStream"")
				|                {
				|                    return new ClBitmap((ClStream)p1);
				|                }
				|                try
				|                {
				|                    if (p1.SystemType.Name == ""Строка"")
				|                    {
				|                        Image Image1 = (Image)new Bitmap(p1.AsString());
				|                        return new ClBitmap(Image1);
				|                    }
				|                }
				|                catch
				|                {
				|                }
				|            }
				|            if (p1 != null && p2 != null)
				|            {
				|                string str1 = p1.GetType().ToString();
				|                if (str1 == ""osf.ClBitmap"")
				|                {
				|                    ClBitmap ClBitmap1 = (ClBitmap)p1.AsObject();
				|                    Image Image1 = (Image)ClBitmap1.Base_obj;
				|                    return new ClBitmap(Image1, p2);
				|                }
				|                if (str1 == ""osf.ClStream"")
				|                {
				|                    ClStream ClStream1 = (ClStream)p1.AsObject();
				|                    return new ClBitmap(new Image(ClStream1.Base_obj), p2);
				|                }
				|                try
				|                {
				|                    if (p1.SystemType.Name == ""Строка"")
				|                    {
				|                        Image Image1 = (Image)new Bitmap(p1.AsString());
				|                        return new ClBitmap(Image1, p2);
				|                    }
				|                }
				|                catch
				|                {
				|                }
				|            }
				|            return null;
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ЗаписатьБайт" Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗаписатьБайт"", ""WriteByte"")]
				|        public void WriteByte(int p1)
				|        {
				|            Base_obj.WriteByte(Convert.ToByte(p1));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Клонировать") и (ИмяКонтекстКлассаАнгл = "Bitmap") Тогда
				Стр = Стр +
				"        [ContextMethod(""Клонировать"", ""Clone"")]
				|        public ClBitmap Clone(int p1, int p2, int p3, int p4)
				|        {
				|            Bitmap Bitmap1 = Base_obj.Clone(Convert.ToSingle(p1), Convert.ToSingle(p2), Convert.ToSingle(p3), Convert.ToSingle(p4));
				|            return new ClBitmap(Bitmap1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Записать") и (ИмяКонтекстКлассаАнгл = "Stream") Тогда
				Стр = Стр +
				"        [ContextMethod(""Записать"", ""Write"")]
				|        public void Write(ClArrayList p1, int p2, int p3)
				|        {
				|            ArrayList ArrayList1 = p1.Base_obj;
				|            int Count1 = ArrayList1.Count;
				|            object[] objects = new object[Count1];
				|            for (int i = 0; i < Count1; i++)
				|            {
				|                objects[i] = System.Convert.ToByte(ArrayList1[i]);
				|            }
				|            Base_obj.Write(objects, p2, p3);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "СлитьМеню" Тогда
				Стр = Стр +
				"        [ContextMethod(""СлитьМеню"", ""MergeMenu"")]
				|        public void MergeMenu(IValue p1)
				|        {
				|            string p1_type = OneScriptForms.RevertObj(p1).GetType().ToString();
				|            if ((p1_type == ""osf.ClMainMenu"") || (p1_type == ""osf.ClContextMenu""))
				|            {
				|                dynamic Menu2 = p1;
				|                for (int i = 0; i < Menu2.MenuItems.Count; i++)
				|                {
				|                    ClMenuItem ClMenuItem1 = (ClMenuItem)MenuItems.Item(i);
				|                    int MergeOrder1 = ClMenuItem1.MergeOrder;
				|                    ClMenuItem ClMenuItem2 = (ClMenuItem)Menu2.MenuItems.Item(i);
				|                    int MergeType2 = ClMenuItem2.MergeType;
				|                    int MergeOrder2 = ClMenuItem2.MergeOrder;
				|                    ClMenuItem new_MenuItem = ClMenuItem2.CloneMenu();
				|                    if (MergeOrder1 == MergeOrder2)
				|                    {
				|                        if (MergeType2 == 0)//Добавить (Add)
				|                        {
				|                            MenuItems.Add(new_MenuItem);
				|                        }
				|                        if (MergeType2 == 1)//Заменить (Replace)
				|                        {
				|                            MenuItems.Add(new_MenuItem);
				|                            MenuItems.RemoveAt(i);
				|                            new_MenuItem.Index = i;
				|                        }
				|                        if (MergeType2 == 2)//ОбъединитьМеню (MergeItems)
				|                        {
				|                            MenuItems.Add(new_MenuItem);
				|                            new_MenuItem.Index = i + 1;
				|                        }
				|                        if (MergeType2 == 3)//Удалить (Remove)
				|                        {
				|                        }
				|                    }
				|                    else
				|                    {
				|                        MenuItems.Add(new_MenuItem);
				|                    }
				|                }
				|                //теперь нужно пройти по объединенному меню и построить рейтинг на основании текущего индекса меню и MergeOrder
				|                //рейтинг = индексМеню + (MergeOrder * 100000)
				|                //перестраиваем меню согласно рейтинга
				|                //заполняем СортированныйСписок. Ключом будет рейтинг, значением будет MenuItem
				|                //очищаем Menu и заполняем его из СортированныйСписок
				|                ClSortedList ClSortedList1 = new ClSortedList();
				|                for (int i = 0; i < MenuItems.Count; i++)
				|                {
				|                    ClMenuItem ClMenuItem1 = (ClMenuItem)MenuItems.Item(i);
				|                    int rating = ClMenuItem1.Index + (ClMenuItem1.MergeOrder * 100000);
				|                    ClSortedList1.Add(rating, ClMenuItem1.CloneMenu());
				|                }
				|                MenuItems.Clear();
				|                ClArrayList ClArrayList1 = ClSortedList1.Keys;
				|                for (int i = 0; i < ClArrayList1.Count; i++)
				|                {
				|                    int key1 = Convert.ToInt32(ClArrayList1.Item(i).AsNumber());
				|                    MenuItems.Add((ClMenuItem)ClSortedList1.Item(key1).Value);
				|                }
				|            }
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Показать") и (ИмяКонтекстКлассаАнгл = "ContextMenu") Тогда
				Стр = Стр +
				"        [ContextMethod(""Показать"", ""Show"")]
				|        public void Show(IValue p1, ClPoint p2)
				|        {
				|            Control Control1 = (Control)((dynamic)p1).Base_obj;
				|            Point Point1 = new Point(Control1.ClientRectangle.X + p2.Base_obj.X, Control1.ClientRectangle.Y + p2.Base_obj.Y);
				|            Base_obj.Show(Control1.M_Control, Point1.M_Point);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Показать") и (ИмяКонтекстКлассаАнгл = "MessageBox") Тогда
				Стр = Стр +
				"        [ContextMethod(""Показать"", ""Show"")]
				|        public void Show(string text = null, string title = null, int buttons = 0, int icon = 0)
				|        {
				|            Base_obj.Show(text, title, buttons, icon);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Показать") и (ИмяКонтекстКлассаАнгл = "InputBox") Тогда
				Стр = Стр +
				"        [ContextMethod(""Показать"", ""Show"")]
				|        public string Show(string p1, string p2, string p3 = """", int p4 = -1, int p5 = -1)
				|        {
				|            string str1 = """";
				|            var thread = new Thread(() =>
				|            {
				|                str1 = Microsoft.VisualBasic.Interaction.InputBox(p1, p2, p3, p4, p5);
				|            }
				|            );
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|
				|            return str1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ЭлементМеню") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЭлементМеню"", ""MenuItem"")]
				|        public ClMenuItem MenuItem(string p1 = """", IValue p2 = null, int p3 = 0)
				|        {
				|            return new ClMenuItem(p1, p2, p3);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ЭлементМеню" Тогда
				Стр = Стр +
				"        [ContextMethod(""ЭлементМеню"", ""MenuItem"")]
				|        public ClMenuItem MenuItem(int p1)
				|        {
				|            return new ClMenuItem(Base_obj.MenuItems[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "СодержитДанные") и (ИмяКонтекстКлассаАнгл = "Clipboard") Тогда
				Стр = Стр +
				"        [ContextMethod(""СодержитДанные"", ""ContainsData"")]
				|        public bool ContainsData()
				|        {
				|            bool res = false;
				|            var thread = new Thread(() =>
				|            {
				|                IDataObject dataObject = Clipboard.GetDataObject();
				|                if (dataObject != null)
				|                {
				|                    res = true;
				|                }
				|            }
				|            );
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|
				|            return res;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "СодержитЮникод") и (ИмяКонтекстКлассаАнгл = "Clipboard") Тогда
				Стр = Стр +
				"        [ContextMethod(""СодержитЮникод"", ""ContainsUnicode"")]
				|        public bool ContainsUnicode()
				|        {
				|            bool res = false;
				|            var thread = new Thread(() =>
				|            {
				|                res = Clipboard.ContainsText(TextDataFormat.UnicodeText);
				|            }
				|            );
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|
				|            return res;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПолучитьТекст") и (ИмяКонтекстКлассаАнгл = "Clipboard") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьТекст"", ""GetText"")]
				|        public string GetText()
				|        {
				|            string str1 = null;
				|            var thread = new Thread(() => 
				|                {
				|                    IDataObject dataObject = Clipboard.GetDataObject();
				|                    if (dataObject.GetDataPresent(DataFormats.UnicodeText))
				|                    {
				|                        str1 = (String)dataObject.GetData(DataFormats.UnicodeText);
				|                    }
				|                }
				|            );
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|
				|            return str1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Очистить") и (ИмяКонтекстКлассаАнгл = "Clipboard") Тогда
				Стр = Стр +
				"        [ContextMethod(""Очистить"", ""Clear"")]
				|        public void Clear()
				|        {
				|            var thread = new Thread(() => Clipboard.Clear());
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "УстановитьТекст") и (ИмяКонтекстКлассаАнгл = "Clipboard") Тогда
				Стр = Стр +
				"        [ContextMethod(""УстановитьТекст"", ""SetText"")]
				|        public void SetText(string text)
				|        {
				|            var data = new DataObject();
				|            data.SetData(DataFormats.UnicodeText, true, text);
				|            var thread = new Thread(() => Clipboard.SetDataObject(data, true));
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "УстановитьИзображение") и (ИмяКонтекстКлассаАнгл = "Clipboard") Тогда
				Стр = Стр +
				"        [ContextMethod(""УстановитьИзображение"", ""SetImage"")]
				|        public void SetImage(ClBitmap bitmap)
				|        {
				|            var data = new DataObject();
				|            data.SetData(DataFormats.Bitmap, true, ((System.Drawing.Image)(bitmap.Base_obj.M_Image)));
				|            var thread = new Thread(() => Clipboard.SetDataObject(data, true));
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПолучитьИзображение") и (ИмяКонтекстКлассаАнгл = "Clipboard") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьИзображение"", ""GetImage"")]
				|        public ClBitmap GetImage()
				|        {
				|            ClBitmap ClBitmap1 = null;
				|            var thread = new Thread(() =>
				|                {
				|                    if (Clipboard.ContainsImage())
				|                    {
				|                        Bitmap Bitmap1 = new Bitmap((System.Drawing.Image)Clipboard.GetImage());
				|                        ClBitmap1 = new ClBitmap(Bitmap1);
				|                    }
				|                }
				|            );
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|
				|            return ClBitmap1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Значок") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""Значок"", ""Icon"")]
				|        public ClIcon Icon(IValue p1, IValue p2 = null)
				|        {
				|            if (p2 != null)
				|            {
				|                return new ClIcon(p1.AsString(), Convert.ToInt32(p2.AsNumber()));
				|            }
				|            else
				|            {
				|                if (p1.GetType().ToString() == ""osf.ClBitmap"")
				|                {
				|                    Icon Icon1 = new Icon(System.Drawing.Icon.FromHandle(((System.Drawing.Bitmap)((ClBitmap)p1.AsObject()).Base_obj.M_Bitmap).GetHicon()));
				|                    return new ClIcon(Icon1);
				|                }
				|                else
				|                {
				|                    if (p1.SystemType.Name == ""Строка"")
				|                    {
				|                        return new ClIcon(p1.AsString());
				|                    }
				|                }
				|            }
				|            return null;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Шрифт") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""Шрифт"", ""Font"")]
				|        public ClFont Font(string p1 = null, IValue p2 = null, int p3 = 0)
				|        {
				|            float _p2;
				|            if (p2 == null)
				|            {
				|                _p2 = 6.0f;
				|            }
				|            else
				|            {
				|                _p2 = Convert.ToSingle(p2.AsNumber());
				|            }
				|            return new ClFont(p1, _p2, p3);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "МассивСписок") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""МассивСписок"", ""ArrayList"")]
				|        public ClArrayList ArrayList(IValue p1 = null)
				|        {
				|            if (p1 != null)
				|            {
				|                if (p1.SystemType.Name == ""Массив"")
				|                {
				|                    ClArrayList ClArrayList1 = new ClArrayList();
				|                    ArrayImpl ArrayImpl1 = (ArrayImpl)p1;
				|                    for (int i = 0; i < ArrayImpl1.Count(); i++)
				|                    {
				|                        ClArrayList1.Add(ArrayImpl1.Get(i));
				|                    }
				|                    return ClArrayList1;
				|                }
				|                else if (p1 is osf.ClArrayList)
				|                {
				|                    return new ClArrayList(((ClArrayList)p1).Base_obj);
				|                }
				|            }
				|            return new ClArrayList();
				|        }
				|
				|";
			ИначеЕсли МетодРус = "МассивСписок" Тогда
				Стр = Стр +
				"        [ContextMethod(""МассивСписок"", ""ArrayList"")]
				|        public ClArrayList ArrayList(IValue p1 = null)
				|        {
				|            if (p1 == null)
				|            {
				|                return new ClArrayList();
				|            }
				|            else
				|            {
				|                return new ClArrayList(((dynamic)p1).Base_obj);
				|            }
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Вкладка" Тогда
				Стр = Стр +
				"        [ContextMethod(""Вкладка"", ""TabPage"")]
				|        public ClTabPage TabPage(string p1 = null)
				|        {
				|            return new ClTabPage(p1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "УстановитьГруппировку") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextMethod(""УстановитьГруппировку"", ""SetGroup"")]
				|        public bool SetGroup(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return Base_obj.SetGroupOn(p1.AsString());
				|            }
				|            else
				|            {
				|                string strType = p1.AsObject().GetType().ToString();
				|                if (strType.Contains(""DataGridViewColumn"") ||
				|                    strType.Contains(""DataGridViewImageColumn"") ||
				|                    strType.Contains(""DataGridViewButtonColumn"") ||
				|                    strType.Contains(""DataGridViewTextBoxColumn"") ||
				|                    strType.Contains(""DataGridViewComboBoxColumn"") ||
				|                    strType.Contains(""DataGridViewLinkColumn"") ||
				|                    strType.Contains(""DataGridViewCheckBoxColumn""))
				|                {
				|                    return Base_obj.SetGroupOn(((dynamic)p1.AsObject()).Base_obj.M_DataGridViewColumn);
				|                }
				|            }
				|            return false;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "ListViewSubItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public ClListViewSubItem Insert(int p1, ClListViewSubItem p2)
				|        {
				|            return (ClListViewSubItem)OneScriptForms.RevertObj(Base_obj.Insert(p1, p2.Base_obj));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "ListViewColumnHeaderCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public ClColumnHeader Insert(int p1, ClColumnHeader p2)
				|        {
				|            return Base_obj.Insert(p1, p2.Base_obj).dll_obj;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "StatusBarPanelCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public ClStatusBarPanel Insert(int p1, ClStatusBarPanel p2)
				|        {
				|            return (ClStatusBarPanel)OneScriptForms.RevertObj(Base_obj.Insert(p1, p2.Base_obj));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "DataGridViewCellCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1)
				|        {
				|            dynamic Obj1 = null;
				|            string str1 = Base_obj[p1].GetType().ToString();
				|            string str2 = str1.Replace(""System.Windows.Forms."", ""osf."");
				|            System.Type Type1 = System.Type.GetType(str2, false, true);
				|            object[] args1 = { Base_obj[p1] };
				|            Obj1 = Activator.CreateInstance(Type1, args1);
				|            return OneScriptForms.RevertObj(Obj1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxCellObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1)
				|        {
				|            return OneScriptForms.RevertObj(Base_obj[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ListViewSubItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClListViewSubItem Item(int p1, ClListViewSubItem p2 = null)
				|        {
				|            if (p2 != null)
				|            {
				|                Base_obj.RemoveAt(p1);
				|                Base_obj.Insert(p1, p2.Base_obj);
				|                return p2;
				|            }
				|            else
				|            {
				|                return new ClListViewSubItem(Base_obj[p1]);
				|            }
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "StatusBarPanelCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClStatusBarPanel Item(int p1, ClStatusBarPanel p2 = null)
				|        {
				|            if (p2 != null)
				|            {
				|                Base_obj.RemoveAt(p1);
				|                Base_obj.Insert(p1, p2.Base_obj);
				|                return (ClStatusBarPanel)OneScriptForms.RevertObj(Base_obj[p1]);
				|            }
				|            return (ClStatusBarPanel)OneScriptForms.RevertObj(Base_obj[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "DataGridViewColumnCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1)
				|        {
				|            System.Type Type1 = Base_obj[p1].GetType();
				|            if (Type1 == typeof(System.Windows.Forms.DataGridViewTextBoxColumn))
				|            {
				|                return OneScriptForms.RevertObj(new osf.DataGridViewTextBoxColumn((System.Windows.Forms.DataGridViewTextBoxColumn)Base_obj[p1]));
				|            }
				|            else if (Type1 == typeof(System.Windows.Forms.DataGridViewImageColumn))
				|            {
				|                return OneScriptForms.RevertObj(new osf.DataGridViewImageColumn((System.Windows.Forms.DataGridViewImageColumn)Base_obj[p1]));
				|            }
				|            else if (Type1 == typeof(System.Windows.Forms.DataGridViewButtonColumn))
				|            {
				|                return OneScriptForms.RevertObj(new osf.DataGridViewButtonColumn((System.Windows.Forms.DataGridViewButtonColumn)Base_obj[p1]));
				|            }
				|            else if (Type1 == typeof(System.Windows.Forms.DataGridViewComboBoxColumn))
				|            {
				|                return OneScriptForms.RevertObj(new osf.DataGridViewComboBoxColumn((System.Windows.Forms.DataGridViewComboBoxColumn)Base_obj[p1]));
				|            }
				|            else if (Type1 == typeof(System.Windows.Forms.DataGridViewLinkColumn))
				|            {
				|                return OneScriptForms.RevertObj(new osf.DataGridViewLinkColumn((System.Windows.Forms.DataGridViewLinkColumn)Base_obj[p1]));
				|            }
				|            else if (Type1 == typeof(System.Windows.Forms.DataGridViewCheckBoxColumn))
				|            {
				|                return OneScriptForms.RevertObj(new osf.DataGridViewCheckBoxColumn((System.Windows.Forms.DataGridViewCheckBoxColumn)Base_obj[p1]));
				|            }
				|            return null;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "DataGridViewRowCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClDataGridViewRow Item(int p1)
				|        {
				|            return new ClDataGridViewRow(Base_obj[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxCellObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClListItem Add(IValue p1)
				|        {
				|            osf.ClListItem p2;
				|            if (p1.GetType().ToString().Contains(""osf.ClListItem""))
				|            {
				|                p2 = new ClListItem(((osf.ClListItem)p1).Base_obj);
				|            }
				|            else
				|            {
				|                string s = """";
				|                try
				|                {
				|                    s = p1.GetType().GetCustomAttribute<ContextClassAttribute>().GetName();
				|                }
				|                catch
				|                {
				|                    s = p1.ToString();
				|                }
				|                p2 = new ClListItem(new ListItem(s, p1));
				|            }
				|            Base_obj.Add(p2.Base_obj);
				|            return p2;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "DataGridViewRowCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public int Add(ClDataGridViewRow p1 = null)
				|        {
				|            if (p1 == null)
				|            {
				|                return Base_obj.Add();
				|            }
				|            return Base_obj.Add(p1.Base_obj);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "DataGridViewColumnCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public int Add(IValue p1)
				|        {
				|            return Base_obj.Add(((dynamic)p1).Base_obj);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "StatusBarPanelCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClStatusBarPanel Add(ClStatusBarPanel p1)
				|        {
				|            return (ClStatusBarPanel)OneScriptForms.RevertObj(Base_obj.Add(p1.Base_obj));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ListViewColumnHeaderCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClColumnHeader Item(int p1)
				|        {
				|            return Base_obj[p1].dll_obj;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "TabPageCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public ClTabPage Insert(int p1, IValue p2)
				|        {
				|            if (p2.SystemType.Name == ""КлВкладка"")
				|            {
				|                ClTabPage ClTabPage1 = new ClTabPage(((ClTabPage)p2).Text);
				|                Base_obj.Insert(p1, ClTabPage1.Base_obj);
				|                return ClTabPage1;
				|            }
				|            else if (p2.SystemType.Name == ""Строка"")
				|            {
				|                ClTabPage ClTabPage1 = new ClTabPage(p2.AsString());
				|                Base_obj.Insert(p1, ClTabPage1.Base_obj);
				|                return ClTabPage1;
				|            }
				|            else
				|            {
				|                return null;
				|            }
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ListViewCheckedItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClListViewItem Item(int p1)
				|        {
				|            return new ClListViewItem(Base_obj[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ListBoxSelectedIndexCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public int Item(int p1)
				|        {
				|            return Base_obj[p1];
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Индекс") и (ИмяКонтекстКлассаАнгл = "ListBoxSelectedObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Индекс"", ""IndexOf"")]
				|        public int IndexOf(IValue p1)
				|        {
				|            for (int i = 0; i < Base_obj.Count; i++)
				|            {
				|                if (Base_obj[i].ToString() == p1.AsString())
				|                {
				|                    return i;
				|                }
				|            }
				|            return Base_obj.IndexOf(p1.AsString());
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Индекс") и (ИмяКонтекстКлассаАнгл = "ControlCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Индекс"", ""IndexOf"")]
				|        public int IndexOf(IValue p1)
				|        {
				|            int index1 = -1;
				|            for (int i = 0; i < Base_obj.Count; i++)
				|            {
				|                if (Base_obj[i] == ((dynamic)p1).Base_obj)
				|                {
				|                    index1 = i;
				|                    break;
				|                }
				|            }
				|            return index1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "УстановитьЭлемент") и (ИмяКонтекстКлассаАнгл = "DataRowView") Тогда
				Стр = Стр +
				"        [ContextMethod(""УстановитьЭлемент"", ""SetItem"")]
				|        public void SetItem(IValue p1, IValue p2)
				|        {
				|            dynamic p3 = p1;
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                p3 = p1.AsString();
				|            }
				|            else if (p1.SystemType.Name == ""Число"")
				|            {
				|                p3 = Convert.ToInt32(p1.AsNumber());
				|            }
				|
				|            if (p2.GetType().ToString().Contains(""osf.""))
				|            {
				|                Base_obj.SetItem(p3, OneScriptForms.RevertObj(p2));
				|            }
				|            else if (p2.SystemType.Name == ""Строка"")
				|            {
				|                Base_obj.SetItem(p3, p2.AsString());
				|            }
				|            else if (p2.SystemType.Name == ""Булево"")
				|            {
				|                Base_obj.SetItem(p3, p2.AsBoolean());
				|            }
				|            else if (p2.SystemType.Name == ""Дата"")
				|            {
				|                Base_obj.SetItem(p3, new System.DateTime(
				|                    p2.AsDate().Year,
				|                    p2.AsDate().Month,
				|                    p2.AsDate().Day,
				|                    p2.AsDate().Hour,
				|                    p2.AsDate().Minute,
				|                    p2.AsDate().Second
				|                    ));
				|            }
				|            else if (p2.SystemType.Name == ""Число"")
				|            {
				|                Base_obj.SetItem(p3, p2.AsNumber());
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Содержит") и (ИмяКонтекстКлассаАнгл = "ListBoxSelectedObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Содержит"", ""Contains"")]
				|        public bool Contains(IValue p1)
				|        {
				|            foreach (object o in Base_obj)
				|            {
				|                if (o.ToString() == p1.AsString())
				|                {
				|                    return true;
				|                }
				|            }
				|            return false;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ЭлементСписка") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЭлементСписка"", ""ListItem"")]
				|        public ClListItem ListItem(string p1 = null, IValue p2 = null)
				|        {
				|            return new ClListItem(p1, p2);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Сортировать") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				Стр = Стр +
				"        [ContextMethod(""Сортировать"", ""Sort"")]
				|        public void Sort(ClColumnHeader p1, int p2)
				|        {
				|            Base_obj.Sort(p1.Base_obj, p2);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Колонка") и (ИмяКонтекстКлассаАнгл = "DataTable") Тогда
				Стр = Стр +
				"        [ContextMethod(""Колонка"", ""Column"")]
				|        public ClDataColumn Column(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Число"")
				|            {
				|                return new ClDataColumn(Base_obj.get_Column(Convert.ToInt32(p1.AsNumber())));
				|            }
				|            else if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return new ClDataColumn(Base_obj.get_Column(Convert.ToString(p1.AsString())));
				|            }
				|            return null;
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Колонка" Тогда
				Стр = Стр +
				"        [ContextMethod(""Колонка"", ""ColumnHeader"")]
				|        public ClColumnHeader ColumnHeader(string p1 = null, int p2 = 60, int p3 = 0)
				|        {
				|            return new ClColumnHeader(p1, p2, p3);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "ImageCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public int Add(ClBitmap p1, ClColor p2 = null)
				|        {
				|            int index1 = -1;
				|            if (p2 != null)
				|            {
				|                index1 = Base_obj.Add(p1.Base_obj, p2.Base_obj);
				|            }
				|            else
				|            {
				|                index1 = Base_obj.Add(p1.Base_obj);
				|            }
				|            return index1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "SortedList") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public void Add(object p1, IValue p2)
				|        {
				|            Base_obj.Add(p1, p2);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ImageCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClBitmap Item(int p1)
				|        {
				|            return new ClBitmap(Base_obj[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "TabPageCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClTabPage Add(ClTabPage p1)
				|        {
				|            return Base_obj.Add(p1.Base_obj).dll_obj;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "ArrayList") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public IValue Add(IValue p1 = null)
				|        {
				|            return (IValue)Base_obj.Add(p1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "ControlCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public IValue Add(IValue p1)
				|        {
				|            Base_obj.Add(((dynamic)p1).Base_obj);
				|            System.Windows.Forms.Application.DoEvents();
				|            return p1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "MenuItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClMenuItem Add(ClMenuItem p1)
				|        {
				|            return Base_obj.Add(p1.Base_obj).dll_obj;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "ListViewColumnHeaderCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClColumnHeader Add(IValue p1 = null)
				|        {
				|            if (p1 == null)
				|            {
				|                return new ClColumnHeader(Base_obj.Add());
				|            }
				|            else if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return new ClColumnHeader(Base_obj.Add(p1.AsString()));
				|            }
				|            else if (p1.GetType() == typeof(ClColumnHeader))
				|            {
				|                return Base_obj.Add(((ClColumnHeader)p1).Base_obj).dll_obj;
				|            }
				|            return null;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "ListViewItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClListViewItem Add(IValue p1)
				|        {
				|            ListViewItem ListViewItem1 = null;
				|            if (p1.GetType().ToString() == ""osf.ClListViewItem"")
				|            {
				|                ListViewItem1 = Base_obj.Add(((ClListViewItem)p1).Base_obj);
				|            }
				|            else if (p1.SystemType.Name == ""Строка"")
				|            {
				|                ListViewItem1 = Base_obj.Add(p1.ToString());
				|            }
				|            else
				|            {
				|                return null;
				|            }
				|            return new ClListViewItem(ListViewItem1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ListBoxObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1, IValue p2 = null)
				|        {
				|            ListItem ListItem1 = new ListItem();
				|            if (p2 != null)
				|            {
				|                if (Base_obj[p1].GetType().ToString() == ""System.Data.DataRowView"")
				|                {
				|                    return (IValue)null;
				|                }
				|                else if (Base_obj[p1].GetType().ToString() == ""osf.ClListBox"")
				|                {
				|                    return (IValue)null;
				|                }
				|                else if (p2.GetType().ToString() == ""osf.ClListItem"")
				|                {
				|                    ListItem ListItem2 = ((dynamic)p2).Base_obj;
				|                    ListItem1 = (ListItem)Base_obj[p1];
				|                    ListItem1.Text = ListItem2.Text;
				|                    ListItem1.Value = ListItem2.Value;
				|                    ListItem1.ForeColor = ListItem2.ForeColor;
				|                }
				|                else
				|                {
				|                    string s = """";
				|                    try
				|                    {
				|                        s = p2.GetType().GetCustomAttribute<ContextClassAttribute>().GetName();
				|                    }
				|                    catch
				|                    {
				|                        s = p2.ToString();
				|                    }
				|                    ListItem1 = (ListItem)Base_obj[p1];
				|                    ListItem1.Text = s;
				|                    ListItem1.Value = p2;
				|                }
				|                M_obj.Base_obj.Invalidate();
				|                return (IValue)new ClListItem(ListItem1);
				|            }
				|            else
				|            {
				|                if (Base_obj[p1].GetType().ToString() == ""System.Data.DataRowView"")
				|                {
				|                    DataRowView DataRowView1 = new DataRowView((System.Data.DataRowView)Base_obj[p1]);
				|                    ListItem1.Text = DataRowView1.get_Item(M_obj.Base_obj.DisplayMember).ToString();
				|                    ListItem1.Value = DataRowView1.get_Item(M_obj.Base_obj.ValueMember);
				|                }
				|                else if (Base_obj[p1].GetType().ToString() == ""osf.ListItem"")
				|                {
				|                    ListItem1 = (ListItem)Base_obj[p1];
				|                }
				|                else
				|                {
				|                    ListItem1.Text = Base_obj[p1].ToString();
				|                    ListItem1.Value = Base_obj[p1];
				|                    ListItem1.ForeColor = ((dynamic)Base_obj[p1]).ForeColor;
				|                }
				|                return new ClListItem(ListItem1);
				|            }
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ListBoxSelectedObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1)
				|        {
				|            ListItem ListItem1 = new ListItem();
				|            if (Base_obj[p1].GetType().ToString() == ""System.Data.DataRowView"")
				|            {
				|                DataRowView DataRowView1 = new DataRowView((System.Data.DataRowView)Base_obj[p1]);
				|                ListItem1.Text = DataRowView1.get_Item(M_obj.Base_obj.DisplayMember).ToString();
				|                ListItem1.Value = DataRowView1.get_Item(M_obj.Base_obj.ValueMember);
				|            }
				|            else if (Base_obj[p1].GetType().ToString() == ""osf.ListItem"")
				|            {
				|                ListItem1 = (ListItem)Base_obj[p1];
				|            }
				|            else
				|            {
				|                ListItem1.Text = Base_obj[p1].ToString();
				|                ListItem1.Value = Base_obj[p1];
				|            }
				|            return new ClListItem(ListItem1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "TabPageCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClTabPage Item(int p1, ClTabPage p2 = null)
				|        {
				|            if (p2 != null)
				|            {
				|                Base_obj.RemoveAt(p1);
				|                Base_obj.Insert(p1, p2.Base_obj);
				|                return p2;
				|            }
				|            else
				|            {
				|                return Base_obj[p1].dll_obj;
				|            }
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ArrayList") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1)
				|        {
				|            return OneScriptForms.RevertObj(Base_obj[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Установить") и (ИмяКонтекстКлассаАнгл = "ArrayList") Тогда
				Стр = Стр +
				"        [ContextMethod(""Установить"", ""Set"")]
				|        public void Set(int p1, IValue p2)
				|        {
				|            Base_obj[p1] = p2;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ListViewItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClListViewItem Item(int p1, ClListViewItem p2 = null)
				|        {
				|            if (p2 != null)
				|            {
				|                Base_obj.RemoveAt(p1);
				|                Base_obj.Insert(p1, p2.Base_obj);
				|                return new ClListViewItem(Base_obj[p1]);
				|            }
				|            else
				|            {
				|                return new ClListViewItem(Base_obj[p1]);
				|            }
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ListViewSelectedItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClListViewItem Item(int p1)
				|        {
				|            return new ClListViewItem(Base_obj[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ВСтроку") и (ИмяКонтекстКлассаАнгл = "ListItem") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВСтроку"", ""ToString"")]
				|        public new string ToString()
				|        {
				|            return Base_obj.ToString();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ВСтроку") и (ИмяКонтекстКлассаАнгл = "Type") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВСтроку"", ""ToString"")]
				|        public override string ToString()
				|        {
				|            return Base_obj.ToString();
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ЭлементСпискаЭлементов" Тогда
				Стр = Стр +
				"        [ContextMethod(""ЭлементСпискаЭлементов"", ""ListViewItem"")]
				|        public ClListViewItem ListViewItem(string p1 = """", int p2 = -1)
				|        {
				|            return new ClListViewItem(p1, p2);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ПодэлементСпискаЭлементов" Тогда
				Стр = Стр +
				"        [ContextMethod(""ПодэлементСпискаЭлементов"", ""ListViewSubItem"")]
				|        public ClListViewSubItem ListViewSubItem(string p1 = """")
				|        {
				|            return new ClListViewSubItem(p1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "GridItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClGridItem Item(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Число"")
				|            {
				|                return new ClGridItem(Base_obj[Convert.ToInt32(p1.AsNumber())]);
				|            }
				|            return new ClGridItem(Base_obj[p1.AsString()]);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ИнформацияЗапускаПроцесса" Тогда
				Стр = Стр +
				"        [ContextMethod(""ИнформацияЗапускаПроцесса"", ""ProcessStartInfo"")]
				|        public ClProcessStartInfo ProcessStartInfo(string p1 = null, string p2 = null)
				|        {
				|            return new ClProcessStartInfo(p1, p2);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Начать") и (ИмяКонтекстКлассаАнгл = "Process") Тогда
				Стр = Стр +
				"        [ContextMethod(""Начать"", ""Start"")]
				|        public ClProcess Start()
				|        {
				|            return new ClProcess(Base_obj.Start());
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "BoldedDates") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public IValue Add(IValue p1)
				|        {
				|            DateTime[] DateTime2 = new DateTime[M_Object.Length + 1];
				|            M_Object.CopyTo(DateTime2, 0);
				|            System.DateTime p2 = p1.AsDate();
				|            DateTime2[M_Object.Length] = new System.DateTime(p2.Year, p2.Month, p2.Day, p2.Hour, p2.Minute, p2.Second);
				|            M_Object = DateTime2;
				|            return p1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Очистить") и (ИмяКонтекстКлассаАнгл = "BoldedDates") Тогда
				Стр = Стр +
				"        [ContextMethod(""Очистить"", ""Clear"")]
				|        public void Clear()
				|        {
				|            M_Object = new DateTime[0];
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "BoldedDates") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1)
				|        {
				|            return ValueFactory.Create(M_Object[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "AnnuallyBoldedDates") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public IValue Add(IValue p1)
				|        {
				|            DateTime[] DateTime2 = new DateTime[M_Object.Length + 1];
				|            M_Object.CopyTo(DateTime2, 0);
				|            System.DateTime p2 = p1.AsDate();
				|            DateTime2[M_Object.Length] = new System.DateTime(p2.Year, p2.Month, p2.Day, p2.Hour, p2.Minute, p2.Second);
				|            M_Object = DateTime2;
				|            return p1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Очистить") и (ИмяКонтекстКлассаАнгл = "AnnuallyBoldedDates") Тогда
				Стр = Стр +
				"        [ContextMethod(""Очистить"", ""Clear"")]
				|        public void Clear()
				|        {
				|            M_Object = new DateTime[0];
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "AnnuallyBoldedDates") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1)
				|        {
				|            return ValueFactory.Create(M_Object[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "MonthlyBoldedDates") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public IValue Add(IValue p1)
				|        {
				|            DateTime[] DateTime2 = new DateTime[M_Object.Length + 1];
				|            M_Object.CopyTo(DateTime2, 0);
				|            System.DateTime p2 = p1.AsDate();
				|            DateTime2[M_Object.Length] = new System.DateTime(p2.Year, p2.Month, p2.Day, p2.Hour, p2.Minute, p2.Second);
				|            M_Object = DateTime2;
				|            return p1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Очистить") и (ИмяКонтекстКлассаАнгл = "MonthlyBoldedDates") Тогда
				Стр = Стр +
				"        [ContextMethod(""Очистить"", ""Clear"")]
				|        public void Clear()
				|        {
				|            M_Object = new DateTime[0];
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "MonthlyBoldedDates") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1)
				|        {
				|            return ValueFactory.Create(M_Object[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "DataView") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClDataRowView Item(int p1)
				|        {
				|            return new ClDataRowView((osf.DataRowView)Base_obj.get_Item(p1));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "DataRowView") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return OneScriptForms.RevertObj(Base_obj.get_Item(p1.AsString()));
				|            }
				|            return OneScriptForms.RevertObj(Base_obj.get_Item(Convert.ToInt32(p1.AsNumber())));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "УдалитьГруппировку") и (ИмяКонтекстКлассаАнгл = "DataGridViewGrouper") Тогда
				Стр = Стр +
				"        [ContextMethod(""УдалитьГруппировку"", ""RemoveGroup"")]
				|        public void RemoveGroup()
				|        {
				|            Base_obj.RemoveGrouping();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "DataRow") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClDataItem Item(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return new ClDataItem((DataItem)Base_obj.get_Item(p1.AsString()));
				|            }
				|            return new ClDataItem((DataItem)Base_obj.get_Item(Convert.ToInt32(p1.AsNumber())));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ВыделенныйДиапазон") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВыделенныйДиапазон"", ""SelectionRange"")]
				|        public ClSelectionRange SelectionRange(IValue p1 = null, IValue p2 = null)
				|        {
				|            if ((p1 != null) && (p2 != null))
				|            {
				|                return new ClSelectionRange(p1, p2);
				|            }
				|            else if ((p1 == null) && (p2 == null))
				|            {
				|                return new ClSelectionRange();
				|            }
				|            return null;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПолучитьФорму") и (ИмяКонтекстКлассаАнгл = "MainMenu") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьФорму"", ""GetForm"")]
				|        public ClForm GetForm()
				|        {
				|            return Base_obj.GetForm().dll_obj;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "КлонироватьМеню") и (ИмяКонтекстКлассаАнгл = "MainMenu") Тогда
				Стр = Стр +
				"        [ContextMethod(""КлонироватьМеню"", ""CloneMenu"")]
 				|        public ClMainMenu CloneMenu()
 				|       {
				|            MainMenu MainMenu1 = new MainMenu();
				|
				|            for (int i = 0; i < Base_obj.MenuItems.Count; i++)
				|            {
				|                MenuItem CurrentMenuItem1 = Base_obj.MenuItems[i];
				|                MenuItem MenuItem1 = new MenuItem();
				|
				|                MenuItem1.Enabled = CurrentMenuItem1.Enabled;
				|                MenuItem1.Name = CurrentMenuItem1.Name;
				|                MenuItem1.Index = CurrentMenuItem1.Index;
				|                MenuItem1.Click = CurrentMenuItem1.Click;
				|                MenuItem1.Visible = CurrentMenuItem1.Visible;
				|                MenuItem1.RadioCheck = CurrentMenuItem1.RadioCheck;
				|                MenuItem1.Checked = CurrentMenuItem1.Checked;
				|                MenuItem1.MergeOrder = CurrentMenuItem1.MergeOrder;
				|                MenuItem1.Shortcut = (int)CurrentMenuItem1.Shortcut;
				|                MenuItem1.Text = CurrentMenuItem1.Text;
				|                MenuItem1.MergeType = (int)CurrentMenuItem1.MergeType;
				|                MenuItem1.dll_obj = CurrentMenuItem1.dll_obj;
				|
				|                MainMenu1.MenuItems.Add(MenuItem1);
				|                if (CurrentMenuItem1.MenuItems.Count > 0)
				|                {
				|                    BypassMainMenu(MenuItem1, CurrentMenuItem1.MenuItems);
				|                }
				|            }
				|            return new ClMainMenu(MainMenu1);
				|        }
				|
				|        public void BypassMainMenu(MenuItem MainMenu, MenuItemCollection MenuItems)
				|        {
				|            for (int i = 0; i < MenuItems.Count; i++)
				|            {
				|                MenuItem CurrentMenuItem1 = MenuItems[i];
				|                MenuItem MenuItem1 = new MenuItem();
				|
				|                MenuItem1.Enabled = CurrentMenuItem1.Enabled;
				|                MenuItem1.Name = CurrentMenuItem1.Name;
				|                MenuItem1.Index = CurrentMenuItem1.Index;
				|                MenuItem1.Click = CurrentMenuItem1.Click;
				|                MenuItem1.Visible = CurrentMenuItem1.Visible;
				|                MenuItem1.RadioCheck = CurrentMenuItem1.RadioCheck;
				|                MenuItem1.Checked = CurrentMenuItem1.Checked;
				|                MenuItem1.MergeOrder = CurrentMenuItem1.MergeOrder;
				|                MenuItem1.Shortcut = (int)CurrentMenuItem1.Shortcut;
				|                MenuItem1.Text = CurrentMenuItem1.Text;
				|                MenuItem1.MergeType = (int)CurrentMenuItem1.MergeType;
				|                MenuItem1.dll_obj = CurrentMenuItem1.dll_obj;
				|
				|                MainMenu.MenuItems.Add(MenuItem1);
				|                if (CurrentMenuItem1.MenuItems.Count > 0)
				|                {
				|                    BypassMainMenu(MenuItem1, CurrentMenuItem1.MenuItems);
				|                }
				|            }
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "MenuItem") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClMenuItem Item(int p1)
				|        {
				|            return new ClMenuItem(Base_obj[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "ArrayList") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public IValue Insert(int p1, IValue p2)
				|        {
				|            return (IValue)Base_obj.Insert(p1, p2);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "MenuItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClMenuItem Item(int p1)
				|        {
				|            return new ClMenuItem(Base_obj[p1]);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ИзИзображения") и (ИмяКонтекстКлассаАнгл = "Graphics") Тогда
				Стр = Стр +
				"        [ContextMethod(""ИзИзображения"", ""FromImage"")]
				|        public ClGraphics FromImage(ClBitmap p1)
				|        {
				|            return new ClGraphics(Base_obj.FromImage(p1.Base_obj));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ВКартинку") и (ИмяКонтекстКлассаАнгл = "Icon") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВКартинку"", ""ToBitmap"")]
				|        public ClBitmap ToBitmap()
				|        {
				|            return new ClBitmap(Base_obj.ToBitmap());
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "УзелДерева") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""УзелДерева"", ""TreeNode"")]
				|        public ClTreeNode TreeNode(string p1 = null)
				|        {
				|            return new ClTreeNode(p1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "TreeNodeCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClTreeNode Add(IValue p1)
				|        {
				|            if (p1.GetType() == typeof(osf.ClTreeNode))
				|            {
				|                Base_obj.Add((TreeNode)((ClTreeNode)p1.AsObject()).Base_obj);
				|                return (ClTreeNode)p1;
				|            }
				|            else if (p1.SystemType.Name == ""Строка"")
				|            {
				|                ClTreeNode ClTreeNode1 = new ClTreeNode(new TreeNode(p1.AsString()));
				|                Base_obj.Add(ClTreeNode1.Base_obj);
				|                return ClTreeNode1;
				|            }
				|            return null;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ОтправитьКлавиши") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ОтправитьКлавиши"", ""SendKeys"")]
				|        public void SendKeys(string p1)
				|        {
				|            System.Windows.Forms.SendKeys.SendWait(p1);
				|            System.Windows.Forms.Application.DoEvents();
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПолучитьУзел") и (ИмяКонтекстКлассаАнгл = "TreeView") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьУзел"", ""GetNodeAt"")]
				|        public ClTreeNode GetNodeAt(int p1, int p2)
				|        {
				|            return new ClTreeNode(Base_obj.GetNodeAt(p1, p2));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПоказатьДиалог") и (ИмяКонтекстКлассаАнгл = "FolderBrowserDialog") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПоказатьДиалог"", ""ShowDialog"")]
				|        public IValue ShowDialog()
				|        {
				|            int Res1 = 0;
				|            var thread = new Thread(() => Res1 = (int)Base_obj.ShowDialog());
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|            return ValueFactory.Create(Res1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "НайтиОкноПоЗаголовку") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [DllImport(""user32.dll"", EntryPoint = ""FindWindow"", CharSet = CharSet.Auto, SetLastError = true)] private static extern IntPtr FindWindowByCaption(IntPtr ZeroOnly, string WindowName);
				|        
				|        [ContextMethod(""НайтиОкноПоЗаголовку"", ""FindWindowByCaption"")]
				|        public IValue FindWindowByCaption(string WindowName)
				|        {
				|            IntPtr numWnd = FindWindowByCaption(IntPtr.Zero, WindowName);
				|            return ValueFactory.Create((int)numWnd);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПоказатьДиалог") и (ИмяКонтекстКлассаАнгл = "ColorDialog") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПоказатьДиалог"", ""ShowDialog"")]
				|        public IValue ShowDialog()
				|        {
				|            int Res1 = 0;
				|            var thread = new Thread(() => Res1 = (int)Base_obj.ShowDialog());
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|
				|            color = new ClColor(Base_obj.Color);
				|
				|            return ValueFactory.Create(Res1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПоказатьДиалог") и (ИмяКонтекстКлассаАнгл = "FontDialog") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПоказатьДиалог"", ""ShowDialog"")]
				|        public IValue ShowDialog()
				|        {
				|            int Res1 = 0;
				|            var thread = new Thread(() => 
				|                {
				|                    Base_obj.ShowColor = true;
				|                    Res1 = (int)Base_obj.ShowDialog();
				|                }
				|            );
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|            return ValueFactory.Create(Res1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПоказатьДиалог") и (ИмяКонтекстКлассаАнгл = "OpenFileDialog") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПоказатьДиалог"", ""ShowDialog"")]
				|        public IValue ShowDialog()
				|        {
				|            int Res1 = 0;
				|            var thread = new Thread(() => Res1 = (int)Base_obj.ShowDialog());
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|            return ValueFactory.Create(Res1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПоказатьДиалог") и (ИмяКонтекстКлассаАнгл = "SaveFileDialog") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПоказатьДиалог"", ""ShowDialog"")]
				|        public IValue ShowDialog()
				|        {
				|            int Res1 = 0;
				|            var thread = new Thread(() => Res1 = (int)Base_obj.ShowDialog());
				|            thread.IsBackground = true;
				|            thread.SetApartmentState(ApartmentState.STA);
				|            thread.Start();
				|            thread.Join();
				|            return ValueFactory.Create(Res1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "СвойстваКласса") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""СвойстваКласса"", ""PropClass"")]
				|        public ClSortedList PropClass(IValue p1)
				|        {
				|            ClSortedList ClSortedList1 = new osf.ClSortedList();
				|            System.Reflection.PropertyInfo[] myPropertyInfo;
				|            if (p1.GetType() == typeof(osf.ClType))
				|            {
				|                myPropertyInfo = p1.GetType().GetProperties();
				|                for (int i = 0; i < myPropertyInfo.Length; i++)
				|                {
				|                    if (myPropertyInfo[i].CustomAttributes.Count() == 1)
				|                    {
				|                        string NameRu = myPropertyInfo[i].GetCustomAttribute<ContextPropertyAttribute>().GetName();
				|                        string NameEn = myPropertyInfo[i].GetCustomAttribute<ContextPropertyAttribute>().GetAlias();
				|                        ClSortedList1.Add(NameEn, ValueFactory.Create(NameEn));
				|                    }
				|                }
				|            }
				|
				|            if (p1.SystemType.Name == ""Строка"") // это может быть полное имя класса, если объект не из пространства имен osf, или имя класса сокращенное, если объект из пространства имен osf
				|            {
				|                if (p1.AsString().Contains(""."")) // имя объекта не из пространства имен osf
				|                {
				|                    if (p1.AsString() == ""System.Drawing.Bitmap"")
				|                    {
				|                        myPropertyInfo = (new System.Drawing.Bitmap(10, 10)).GetType().GetProperties();
				|                    }
				|                    else
				|                    {
				|                        myPropertyInfo = GetTypeFromName(p1.AsString()).GetProperties();
				|                    }
				|                    foreach (var item in myPropertyInfo)
				|                    {
				|                        if (!ClSortedList1.ContainsKey(item.Name))
				|                        {
				|                            ClSortedList1.Add(item.Name, ValueFactory.Create(item.Name));
				|                        }
				|                    }
				|                }
				|                else // имя объекта из пространства имен osf
				|                {
				|                    // находим совпадение GetName или GetAlias в методах osf.OneScriptForms, так мы получим объекты, имеющие конструктор
				|                    System.Type Type1 = System.Type.GetType(""osf.OneScriptForms"", false, true);
				|                    System.Reflection.MethodInfo[] myMethodInfo = Type1.GetMethods();
				|                    for (int i = 0; i < myMethodInfo.Length; i++)
				|                    {
				|                        if (myMethodInfo[i].CustomAttributes.Count() == 1)
				|                        {
				|                            if (myMethodInfo[i].GetCustomAttribute<ContextMethodAttribute>() != null)
				|                            {
				|                                string NameRu = myMethodInfo[i].GetCustomAttribute<ContextMethodAttribute>().GetName();
				|                                string NameEn = myMethodInfo[i].GetCustomAttribute<ContextMethodAttribute>().GetAlias();
				|                                if (NameRu == p1.AsString() || NameEn == p1.AsString())
				|                                {
				|                                    System.Type Type2 = System.Type.GetType(""osf.Cl"" + NameEn, false, true);
				|                                    System.Reflection.PropertyInfo[] myPropertyInfo2 = Type2.GetProperties();
				|                                    for (int i2 = 0; i2 < myPropertyInfo2.Length; i2++)
				|                                    {
				|                                        if (myPropertyInfo2[i2].CustomAttributes.Count() == 1)
				|                                        {
				|                                            string NameRu2 = myPropertyInfo2[i2].GetCustomAttribute<ContextPropertyAttribute>().GetName();
				|                                            string NameEn2 = myPropertyInfo2[i2].GetCustomAttribute<ContextPropertyAttribute>().GetAlias();
				|                                            ClSortedList1.Add(NameEn2, ValueFactory.Create(NameEn2));
				|                                        }
				|                                    }
				|                                    break;
				|                                }
				|                            }
				|                        }
				|                    }
				|                }
				|            }
				|            else // это объект, а не строка
				|            {
				|                myPropertyInfo = p1.GetType().GetProperties();
				|                for (int i = 0; i < myPropertyInfo.Length; i++)
				|                {
				|                    if (myPropertyInfo[i].CustomAttributes.Count() == 1)
				|                    {
				|                        string NameRu = myPropertyInfo[i].GetCustomAttribute<ContextPropertyAttribute>().GetName();
				|                        string NameEn = myPropertyInfo[i].GetCustomAttribute<ContextPropertyAttribute>().GetAlias();
				|                        ClSortedList1.Add(NameEn, ValueFactory.Create(NameEn));
				|                    }
				|                }
				|            }
				|            return ClSortedList1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "МетодыОбъекта") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""МетодыОбъекта"", ""MethodsObj"")]
				|        public string MethodsObj1(IValue p1)
				|        {
				|            System.Reflection.MethodInfo[] myMethodInfo = p1.GetType().GetMethods();
				|            List<string> p = new List<string>();
				|            for (int i = 0; i < myMethodInfo.Count(); i++)
				|            {
				|                if (myMethodInfo[i].CustomAttributes.Count() == 1)
				|                {
				|                    if (myMethodInfo[i].GetCustomAttribute<ContextMethodAttribute>() != null)
				|                    {
				|                        string NameRu = myMethodInfo[i].GetCustomAttribute<ContextMethodAttribute>().GetName();
				|                        string NameEn = myMethodInfo[i].GetCustomAttribute<ContextMethodAttribute>().GetAlias();
				|                        p.Add(NameRu + "" ("" + NameEn + "")"");
				|                    }
				|                }
				|            }
				|            p.Sort();
				|            string str1 = """";
				|            string transfer = """";
				|            foreach (string str in p)
				|            {
				|                str1 = str1 + transfer + str;
				|                transfer = ""\r\n"";
				|            }
				|            return str1;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ИзArgb") и (ИмяКонтекстКлассаАнгл = "Color") Тогда
				Стр = Стр +
				"        [ContextMethod(""ИзArgb"", ""FromArgb"")]
				|        public ClColor FromArgb(int p1, int p2, int p3, int p4)
				|        {
				|            return new ClColor(Base_obj.FromArgb(p1, p2, p3, p4));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ИзRgb") и (ИмяКонтекстКлассаАнгл = "Color") Тогда
				Стр = Стр +
				"        [ContextMethod(""ИзRgb"", ""FromRgb"")]
				|        public ClColor FromRgb(int p1, int p2, int p3)
				|        {
				|            return new ClColor(Base_obj.FromRgb(p1, p2, p3));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ИзИмени") и (ИмяКонтекстКлассаАнгл = "Color") Тогда
				Стр = Стр +
				"        [ContextMethod(""ИзИмени"", ""FromName"")]
				|        public ClColor FromName(string p1)
				|        {
				|            int NumberProp1 = this.FindProperty(p1);
				|            dynamic obj1 = this.GetPropValue(NumberProp1);
				|            return (ClColor)ValueFactory.Create(obj1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "ListViewSubItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClListViewSubItem Add(IValue p1)
				|        {
				|            ListViewSubItem ListViewSubItem1 = null;
				|            if (p1.GetType().ToString() == ""osf.ClListViewSubItem"")
				|            {
				|                ListViewSubItem1 = Base_obj.Add(((ClListViewSubItem)p1).Base_obj);
				|            }
				|            else if (p1.SystemType.Name == ""Строка"")
				|            {
				|                ListViewSubItem1 = Base_obj.Add(p1.ToString());
				|            }
				|            else
				|            {
				|                return null;
				|            }
				|            return new ClListViewSubItem(ListViewSubItem1);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ВСтроку") и (ИмяКонтекстКлассаАнгл = "ImageFormat") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВСтроку"", ""ToString"")]
				|        public new string ToString()
				|        {
				|            if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3cae-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3cae-0728-11d3-9d7b-0000f81ef32e] Jpeg"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3caa-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3caa-0728-11d3-9d7b-0000f81ef32e] MemoryBMP"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3cab-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3cab-0728-11d3-9d7b-0000f81ef32e] Bmp"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3cb0-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3cb0-0728-11d3-9d7b-0000f81ef32e] Gif"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3caf-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3caf-0728-11d3-9d7b-0000f81ef32e] Png"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3cb1-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3cb1-0728-11d3-9d7b-0000f81ef32e] Tiff"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3cb5-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3cb5-0728-11d3-9d7b-0000f81ef32e] Icon"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3cac-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""emf"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3cb2-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3cac-0728-11d3-9d7b-0000f81ef32e] exif"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3cad-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3cad-0728-11d3-9d7b-0000f81ef32e] wmf"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3cb3 - 0728 - 11d3 - 9d7b - 0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3cb3 - 0728 - 11d3 - 9d7b - 0000f81ef32e] pcd"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3cb4-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""[ImageFormat: b96b3cb4-0728-11d3-9d7b-0000f81ef32e] fpx"";
				|            }
				|            else if (Base_obj.M_ImageFormat.ToString() == ""[ImageFormat: b96b3ca9-0728-11d3-9d7b-0000f81ef32e]"")
				|            {
				|                return ""Windows GDI + не может определить формат."";
				|            }
				|            return """";
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Сохранить") и (ИмяКонтекстКлассаАнгл = "Bitmap") Тогда
				Стр = Стр +
				"        [ContextMethod(""Сохранить"", ""Save"")]
				|        public void Save(IValue p1, ClImageFormat p2 = null)
				|        {
				|            if (p1.GetType() == typeof(osf.ClStream))
				|            {
				|                Base_obj.Save(((ClStream)p1).Base_obj, p2.Base_obj);
				|            }
				|            else
				|            {
				|                Base_obj.Save(p1.AsString(), p2.Base_obj);
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "НажатьКнопкуМыши") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""НажатьКнопкуМыши"", ""MouseKeyPress"")]
				|        public void MouseKeyPress(int p1, IValue p2 = null, IValue p3 = null)
				|        {
				|            if (p2 != null &&  p3 != null)
				|            {
				|                mouse_event(Convert.ToUInt32(p1), Convert.ToInt32(p2.AsNumber()), Convert.ToInt32(p3.AsNumber()), 0, UIntPtr.Zero);
				|            }
				|            else
				|            {
				|                mouse_event(Convert.ToUInt32(p1), System.Windows.Forms.Cursor.Position.X, System.Windows.Forms.Cursor.Position.Y, 0, UIntPtr.Zero);
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "ToolBarButtonCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClToolBarButton Add(ClToolBarButton p1)
				|        {
				|            return new ClToolBarButton(Base_obj.Add(p1.Base_obj));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ЗначокУведомления") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗначокУведомления"", ""NotifyIcon"")]
				|        public ClNotifyIcon NotifyIcon()
				|        {
				|            return new ClNotifyIcon();
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "ToolBarButtonCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public ClToolBarButton Insert(int p1, ClToolBarButton p2)
				|        {
				|            return new ClToolBarButton(Base_obj.Insert(p1, p2.Base_obj));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ToolBarButtonCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClToolBarButton Item(int p1, ClToolBarButton p2 = null)
				|        {
				|            if (p2 != null)
				|            {
				|                Base_obj.RemoveAt(p1);
				|                Base_obj.Insert(p1, p2.Base_obj);
				|                return p2;
				|            }
				|            else
				|            {
				|                return new ClToolBarButton(Base_obj[p1]);
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "Collection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public void Add(IValue p1, string p2 = null)
				|        {
				|            Base_obj.Add(p1, p2);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "Collection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return (IValue)Base_obj[p1.AsString()];
				|            }
				|            else if (p1.SystemType.Name == ""Число"")
				|            {
				|                return (IValue)Base_obj[Convert.ToInt32(p1.AsNumber())];
				|            }
				|            return null;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "DataColumnCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClDataColumn Item(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Число"")
				|            {
				|                return new ClDataColumn(Base_obj[Convert.ToInt32(p1.AsNumber())]);
				|            }
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return new ClDataColumn(Base_obj[p1.AsString()]);
				|            }
				|            return null;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Удалить") и (ИмяКонтекстКлассаАнгл = "Collection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Удалить"", ""Remove"")]
				|        public void Remove(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                Base_obj.Remove(p1.AsString());
				|            }
				|            else if (p1.SystemType.Name == ""Число"")
				|            {
				|                Base_obj.Remove(Convert.ToInt32(p1.AsNumber()));
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Удалить") и (ИмяКонтекстКлассаАнгл = "DataGridViewColumnCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Удалить"", ""Remove"")]
				|        public void Remove(IValue p1)
				|        {
				|            Base_obj.Remove(((dynamic)p1).Base_obj);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Удалить") и (ИмяКонтекстКлассаАнгл = "SortedList") Тогда
				Стр = Стр +
				"        [ContextMethod(""Удалить"", ""Remove"")]
				|        public void Remove(object p1)
				|        {
				|            Base_obj.Remove(p1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ПолучитьБайты") и (ИмяКонтекстКлассаАнгл = "Encoding") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьБайты"", ""GetBytes"")]
				|        public ClArrayList GetBytes(string p1)
				|        {
				|            ClArrayList ClArrayList1 = new ClArrayList();
				|            byte[] Bytes1 = Base_obj.M_Encoding.GetBytes(p1);
				|            for (int i = 0; i < Bytes1.Length; i++)
				|            {
				|                ClArrayList1.Base_obj.Add(Bytes1[i]);
				|            }
				|            return ClArrayList1;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ПолучитьБайты") и (ИмяКонтекстКлассаАнгл = "Bitmap") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьБайты"", ""GetBytes"")]
				|        public ClArrayList GetBytes(ClBitmapData p1)
				|        {
				|            return new ClArrayList(Base_obj.GetBytes(p1.Base_obj));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ПолучитьКодировку") и (ИмяКонтекстКлассаАнгл = "Encoding") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьКодировку"", ""GetEncoding"")]
				|        public ClEncoding GetEncoding(int p1)
				|        {
				|            return new ClEncoding(Base_obj.GetEncoding(p1));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ПолучитьСтроку") и (ИмяКонтекстКлассаАнгл = "Encoding") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьСтроку"", ""GetString"")]
				|        public string GetString(ClArrayList p1)
				|        {
				|            System.Collections.ArrayList ArrayList1 = p1.Base_obj.M_ArrayList;
				|            byte[] Bytes1 = new byte[checked(ArrayList1.Count + 2)];
				|
				|            for (int i = 0; i < ArrayList1.Count; i++)
				|            {
				|                Bytes1[i] = System.Convert.ToByte(System.Convert.ToInt32(ArrayList1[i].ToString()));
				|            }
				|            string str1 = Base_obj.M_Encoding.GetString(Bytes1);
				|            if ((BodyName == ""utf-16"") || (BodyName == ""utf-16BE""))
				|            {
				|                return Base_obj.M_Encoding.GetString(Bytes1).Substring(0, str1.Length - 1);
				|            }
				|            else if ((BodyName == ""us-ascii"") || (BodyName == ""utf-7"") || (BodyName == ""utf-8""))
				|            {
				|                return Base_obj.M_Encoding.GetString(Bytes1).Substring(0, str1.Length - 2);
				|            }
				|            return str1;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Преобразовать") и (ИмяКонтекстКлассаАнгл = "Encoding") Тогда
				Стр = Стр +
				"        [ContextMethod(""Преобразовать"", ""Convert"")]
				|        public ClArrayList Convert(ClEncoding p1, ClEncoding p2, ClArrayList p3)
				|        {
				|            System.Collections.ArrayList ArrayList1 = p3.Base_obj.M_ArrayList;
				|            byte[] Bytes1 = new byte[checked(ArrayList1.Count + 2)];
				|            for (int i = 0; i < ArrayList1.Count; i++)
				|            {
				|                Bytes1[i] = System.Convert.ToByte(ArrayList1[i]);
				|            }
				|            byte[] Array1 = System.Text.Encoding.Convert(p1.Base_obj.M_Encoding, p2.Base_obj.M_Encoding, Bytes1);
				|            object[] objArray = new object[checked(Array1.Length + 1)];
				|            for (int i = 0; i < Array1.Length; i++)
				|            {
				|                objArray[i] = (object)Array1[i];
				|            }
				|            ClArrayList ClArrayList2 = new ClArrayList();
				|            int Length1 = objArray.Length - 1;
				|            if ((p1.BodyName == ""utf-16"") || (p1.BodyName == ""utf-16BE""))
				|            {
				|                if ((p2.BodyName == ""utf-16"") || (p2.BodyName == ""utf-16BE""))
				|                {
				|                    Length1 = objArray.Length - 3;
				|                }
				|                else if ((p2.BodyName == ""us-ascii"") || (p2.BodyName == ""utf-7"") || (p2.BodyName == ""utf-8""))
				|                {
				|                    Length1 = objArray.Length - 2;
				|                }
				|            }
				|            else if ((p1.BodyName == ""us-ascii"") || (p1.BodyName == ""utf-7"") || (p1.BodyName == ""utf-8""))
				|            {
				|                if ((p2.BodyName == ""utf-16"") || (p2.BodyName == ""utf-16BE""))
				|                {
				|                    Length1 = objArray.Length - 5;
				|                }
				|                else if ((p2.BodyName == ""us-ascii"") || (p2.BodyName == ""utf-7"") || (p2.BodyName == ""utf-8""))
				|                {
				|                    Length1 = objArray.Length - 3;
				|                }
				|            }
				|            for (int i = 0; i < Length1; i++)
				|            {
				|                ClArrayList2.Base_obj.Add(objArray[i]);
				|            }
				|            return ClArrayList2;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ДобавитьКнопку") и (ИмяКонтекстКлассаАнгл = "ControlCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""ДобавитьКнопку"", ""AddButton"")]
				|        public ClButton AddButton(string p1 = null, int p2 = 0, int p3 = 0, int p4 = 0, int p5 = 0)
				|        {
				|            return new ClButton(Base_obj.AddButton(p1, p2, p3, p4, p5));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "КолонкаДанных") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КолонкаДанных"", ""DataColumn"")]
				|        public ClDataColumn DataColumn(string p1 = null, IValue p2 = null)
				|        {
				|            if (p1 == null && p2 == null)
				|            {
				|                return new ClDataColumn();
				|            }
				|            else if (p1 != null && p2 == null)
				|            {
				|                return new ClDataColumn(p1);
				|            }
				|            else if (p1 != null && p2 != null)
				|            {
				|                int type1 = Convert.ToInt32(p2.AsNumber());
				|                System.Type DataType1 = typeof(System.String);
				|                if (type1 == 0)
				|                {
				|                    DataType1 = typeof(System.String);
				|                }
				|                else if (type1 == 1)
				|                {
				|                    DataType1 = typeof(System.Decimal);
				|                }
				|                else if (type1 == 2)
				|                {
				|                    DataType1 = typeof(System.Boolean);
				|                }
				|                else if (type1 == 3)
				|                {
				|                    DataType1 = typeof(System.DateTime);
				|                }
				|                else if (type1 == 4)
				|                {
				|                    DataType1 = typeof(System.Object);
				|                }
				|                return new ClDataColumn(p1, DataType1);
				|            }
				|            return null;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ТаблицаДанных") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ТаблицаДанных"", ""DataTable"")]
				|        public ClDataTable DataTable(string p1 = null)
				|        {
				|            if (p1 == null)
				|            {
				|                return new ClDataTable();
				|            }
				|            return new ClDataTable(p1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Клонировать") и (ИмяКонтекстКлассаАнгл = "DataTable") Тогда
				Стр = Стр +
				"        [ContextMethod(""Клонировать"", ""Clone"")]
				|        public ClDataTable Clone()
				|        {
				|            return new ClDataTable(Base_obj.Clone());
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Копировать") и (ИмяКонтекстКлассаАнгл = "DataTable") Тогда
				Стр = Стр +
				"        [ContextMethod(""Копировать"", ""Copy"")]
				|        public ClDataTable Copy()
				|        {
				|            return new ClDataTable(Base_obj.Copy());
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ЗагрузитьКолонку") и (ИмяКонтекстКлассаАнгл = "DataTable") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗагрузитьКолонку"", ""LoadColumn"")]
				|        public void LoadColumn(ClArrayList p1, IValue p2)
				|        {
				|            dynamic p3 = null;
				|            if (p2.SystemType.Name == ""Число"")
				|            {
				|                p3 = Convert.ToInt32(p2.AsNumber());
				|            }
				|            else if (p2.SystemType.Name == ""Строка"")
				|            {
				|                p3 = p2.AsString();
				|            }
				|            else if (p2.SystemType.Name == ""КлКолонкаДанных"")
				|            {
				|                p3 = ((ClDataColumn)p2.AsObject()).Base_obj.ColumnName;
				|            }
				|
				|            for (int i = 0; i < p1.Count; i++)
				|            {
				|                Base_obj.Rows[i].SetItem(p3, OneScriptForms.DefineTypeIValue(p1.Base_obj[i]));
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "LinkCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClLink Item(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return new ClLink(Base_obj.M_LinkCollection[p1.AsString()]);
				|            }
				|            else if (p1.SystemType.Name == ""Число"")
				|            {
				|                return new ClLink(Base_obj.M_LinkCollection[Convert.ToInt32(p1.AsNumber())]);
				|            }
				|            return null;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ЯчейкаСеткиДанных") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЯчейкаСеткиДанных"", ""DataGridCell"")]
				|        public ClDataGridCell DataGridCell(int p1, int p2)
				|        {
				|            return new ClDataGridCell(p1, p2);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "УстановитьЭлемент") и (ИмяКонтекстКлассаАнгл = "DataRow") Тогда
				Стр = Стр +
				"        [ContextMethod(""УстановитьЭлемент"", ""SetItem"")]
				|        public void SetItem(IValue p1, IValue p2)
				|        {
				|            dynamic p3 = p1;
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                p3 = p1.AsString();
				|            }
				|            else if (p1.SystemType.Name == ""Число"")
				|            {
				|                p3 = Convert.ToInt32(p1.AsNumber());
				|            }
				|
				|            if (p2.GetType().ToString().Contains(""osf.""))
				|            {
				|                Base_obj.SetItem(p3, OneScriptForms.RevertObj(p2));
				|            }
				|            else if (p2.SystemType.Name == ""Строка"")
				|            {
				|                Base_obj.SetItem(p3, p2.AsString());
				|            }
				|            else if (p2.SystemType.Name == ""Булево"")
				|            {
				|                Base_obj.SetItem(p3, p2.AsBoolean());
				|            }
				|            else if (p2.SystemType.Name == ""Дата"")
				|            {
				|                Base_obj.SetItem(p3, new System.DateTime(
				|                    p2.AsDate().Year,
				|                    p2.AsDate().Month,
				|                    p2.AsDate().Day,
				|                    p2.AsDate().Hour,
				|                    p2.AsDate().Minute,
				|                    p2.AsDate().Second
				|                    ));
				|            }
				|            else if (p2.SystemType.Name == ""Число"")
				|            {
				|                Base_obj.SetItem(p3, p2.AsNumber());
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "НоваяСтрока") и (ИмяКонтекстКлассаАнгл = "DataTable") Тогда
				Стр = Стр +
				"        [ContextMethod(""НоваяСтрока"", ""NewRow"")]
				|        public ClDataRow NewRow()
				|        {
				|            return new ClDataRow(Base_obj.NewRow());
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "DataRowCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClDataRow Add(ClDataRow p1)
				|        {
				|            return new ClDataRow(Base_obj.Add(p1.Base_obj));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "DataRowCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClDataRow Item(int p1, ClDataRow p2 = null)
				|        {
				|            if (p2 != null)
				|            {
				|                Base_obj.RemoveAt(p1);
				|                Base_obj.InsertAt(p2.Base_obj, p1);
				|                return new ClDataRow(Base_obj[p1]);
				|            }
				|            else
				|            {
				|                return new ClDataRow(Base_obj[p1]);
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "DataColumnCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClDataColumn Add(ClDataColumn p1)
				|        {
				|            return new ClDataColumn(Base_obj.Add(p1.Base_obj));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "GridTableStylesCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClDataGridTableStyle Item(int p1)
				|        {
				|            return new ClDataGridTableStyle(Base_obj[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "GridColumnStylesCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public int Add(IValue p1)
				|        {
				|            return Base_obj.Add(((dynamic)p1).Base_obj);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ЗавершитьРедактирование") и (ИмяКонтекстКлассаАнгл = "DataGrid") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗавершитьРедактирование"", ""EndEdit"")]
				|        public bool EndEdit(IValue p1, int p2, bool p3)
				|        {
				|            return Base_obj.EndEdit(((dynamic)p1).Base_obj, p2, p3);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "НачатьРедактирование") и (ИмяКонтекстКлассаАнгл = "DataGrid") Тогда
				Стр = Стр +
				"        [ContextMethod(""НачатьРедактирование"", ""BeginEdit"")]
				|        public bool BeginEdit(IValue p1, int p2)
				|        {
				|            return Base_obj.BeginEdit(((dynamic)p1).Base_obj, p2);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "НачатьРедактирование") и (ИмяКонтекстКлассаАнгл = "DataRow") Тогда
				Стр = Стр +
				"        [ContextMethod(""НачатьРедактирование"", ""BeginEdit"")]
				|        public void BeginEdit()
				|        {
				|            Base_obj.BeginEdit();
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "КлонироватьМеню") и (ИмяКонтекстКлассаАнгл = "ContextMenu") Тогда
				Стр = Стр +
				"        [ContextMethod(""КлонироватьМеню"", ""CloneMenu"")]
				|        public ClContextMenu CloneMenu()
				|        {
				|            ContextMenu ContextMenu1 = new ContextMenu();
				|
				|            for (int i = 0; i < Base_obj.MenuItems.Count; i++)
				|            {
				|                MenuItem CurrentMenuItem1 = Base_obj.MenuItems[i];
				|                MenuItem MenuItem1 = new MenuItem();
				|
				|                MenuItem1.Enabled = CurrentMenuItem1.Enabled;
				|                MenuItem1.Name = CurrentMenuItem1.Name;
				|                MenuItem1.Index = CurrentMenuItem1.Index;
				|                MenuItem1.Click = CurrentMenuItem1.Click;
				|                MenuItem1.Visible = CurrentMenuItem1.Visible;
				|                MenuItem1.RadioCheck = CurrentMenuItem1.RadioCheck;
				|                MenuItem1.Checked = CurrentMenuItem1.Checked;
				|                MenuItem1.MergeOrder = CurrentMenuItem1.MergeOrder;
				|                MenuItem1.Shortcut = (int)CurrentMenuItem1.Shortcut;
				|                MenuItem1.Text = CurrentMenuItem1.Text;
				|                MenuItem1.MergeType = (int)CurrentMenuItem1.MergeType;
				|                MenuItem1.dll_obj = CurrentMenuItem1.dll_obj;
				|
				|                ContextMenu1.MenuItems.Add(MenuItem1);
				|                if (CurrentMenuItem1.MenuItems.Count > 0)
				|                {
				|                    BypassContextMenu(MenuItem1, CurrentMenuItem1.MenuItems);
				|                }
				|            }
				|            return new ClContextMenu(ContextMenu1);
				|        }
				|
				|        public void BypassContextMenu(MenuItem ContextMenu, MenuItemCollection MenuItems)
				|        {
				|            for (int i = 0; i < MenuItems.Count; i++)
				|            {
				|                MenuItem CurrentMenuItem1 = MenuItems[i];
				|                MenuItem MenuItem1 = new MenuItem();
				|
				|                MenuItem1.Enabled = CurrentMenuItem1.Enabled;
				|                MenuItem1.Name = CurrentMenuItem1.Name;
				|                MenuItem1.Index = CurrentMenuItem1.Index;
				|                MenuItem1.Click = CurrentMenuItem1.Click;
				|                MenuItem1.Visible = CurrentMenuItem1.Visible;
				|                MenuItem1.RadioCheck = CurrentMenuItem1.RadioCheck;
				|                MenuItem1.Checked = CurrentMenuItem1.Checked;
				|                MenuItem1.MergeOrder = CurrentMenuItem1.MergeOrder;
				|                MenuItem1.Shortcut = (int)CurrentMenuItem1.Shortcut;
				|                MenuItem1.Text = CurrentMenuItem1.Text;
				|                MenuItem1.MergeType = (int)CurrentMenuItem1.MergeType;
				|                MenuItem1.dll_obj = CurrentMenuItem1.dll_obj;
				|
				|                ContextMenu.MenuItems.Add(MenuItem1);
				|                if (CurrentMenuItem1.MenuItems.Count > 0)
				|                {
				|                    BypassContextMenu(MenuItem1, CurrentMenuItem1.MenuItems);
				|                }
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "КлонироватьМеню") и (ИмяКонтекстКлассаАнгл = "MenuItem") Тогда
				Стр = Стр +
				"        [ContextMethod(""КлонироватьМеню"", ""CloneMenu"")]
				|        public ClMenuItem CloneMenu()
				|        {
				|            MenuItem MenuItem4 = new MenuItem();
				|
				|            MenuItem4.Enabled = Base_obj.Enabled;
				|            MenuItem4.Name = Base_obj.Name;
				|            MenuItem4.Index = Base_obj.Index;
				|            MenuItem4.Click = Base_obj.Click;
				|            MenuItem4.Visible = Base_obj.Visible;
				|            MenuItem4.RadioCheck = Base_obj.RadioCheck;
				|            MenuItem4.Checked = Base_obj.Checked;
				|            MenuItem4.MergeOrder = Base_obj.MergeOrder;
				|            MenuItem4.Shortcut = (int)Base_obj.Shortcut;
				|            MenuItem4.Text = Base_obj.Text;
				|            MenuItem4.MergeType = (int)Base_obj.MergeType;
				|            MenuItem4.dll_obj = Base_obj.dll_obj;
				|
				|            for (int i = 0; i < Base_obj.MenuItems.Count; i++)
				|            {
				|                MenuItem CurrentMenuItem = Base_obj.MenuItems[i];
				|                MenuItem MenuItem5 = new MenuItem();
				|
				|                MenuItem5.Enabled = CurrentMenuItem.Enabled;
				|                MenuItem5.Name = CurrentMenuItem.Name;
				|                MenuItem5.Index = CurrentMenuItem.Index;
				|                MenuItem5.Click = CurrentMenuItem.Click;
				|                MenuItem5.Visible = CurrentMenuItem.Visible;
				|                MenuItem5.RadioCheck = CurrentMenuItem.RadioCheck;
				|                MenuItem5.Checked = CurrentMenuItem.Checked;
				|                MenuItem5.MergeOrder = CurrentMenuItem.MergeOrder;
				|                MenuItem5.Shortcut = (int)CurrentMenuItem.Shortcut;
				|                MenuItem5.Text = CurrentMenuItem.Text;
				|                MenuItem5.MergeType = (int)CurrentMenuItem.MergeType;
				|                MenuItem5.dll_obj = CurrentMenuItem.dll_obj;
				|
				|                MenuItem NewMenuItem = MenuItem4.MenuItems.Add(MenuItem5);
				|                if (CurrentMenuItem.MenuItems.Count > 0)
				|                {
				|                    BypassMenu(NewMenuItem, CurrentMenuItem.MenuItems);
				|                }
				|            }
				|            return new ClMenuItem(MenuItem4);
				|        }
				|
				|        public void BypassMenu(MenuItem MenuItem, MenuItemCollection MenuItems)
				|        {
				|            for (int i = 0; i < MenuItems.Count; i++)
				|            {
				|                MenuItem CurrentMenuItem = MenuItems[i];
				|                MenuItem MenuItem5 = new MenuItem();
				|
				|                MenuItem5.Enabled = CurrentMenuItem.Enabled;
				|                MenuItem5.Name = CurrentMenuItem.Name;
				|                MenuItem5.Index = CurrentMenuItem.Index;
				|                MenuItem5.Click = CurrentMenuItem.Click;
				|                MenuItem5.Visible = CurrentMenuItem.Visible;
				|                MenuItem5.RadioCheck = CurrentMenuItem.RadioCheck;
				|                MenuItem5.Checked = CurrentMenuItem.Checked;
				|                MenuItem5.MergeOrder = CurrentMenuItem.MergeOrder;
				|                MenuItem5.Shortcut = (int)CurrentMenuItem.Shortcut;
				|                MenuItem5.Text = CurrentMenuItem.Text;
				|                MenuItem5.MergeType = (int)CurrentMenuItem.MergeType;
				|                MenuItem5.dll_obj = CurrentMenuItem.dll_obj;
				|
				|                MenuItem NewMenuItem = MenuItem.MenuItems.Add(MenuItem5);
				|                if (CurrentMenuItem.MenuItems.Count > 0)
				|                {
				|                    BypassMenu(NewMenuItem, CurrentMenuItem.MenuItems);
				|                }
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ДобавитьЭлемент") и (ИмяКонтекстКлассаАнгл = "DataColumnCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""ДобавитьЭлемент"", ""AddItem"")]
				|        public ClDataColumn AddItem(string p1)
				|        {
				|            return new ClDataColumn(Base_obj.AddItem(p1));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "СловарнаяЗапись") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""СловарнаяЗапись"", ""DictionaryEntry"")]
				|        public ClDictionaryEntry DictionaryEntry(IValue p1, IValue p2)
				|        {
				|            return new ClDictionaryEntry(p1, p2);
				|        }
				|
				|";
			ИначеЕсли МетодРус = "АКосинус" Тогда
				Стр = Стр + 
				"        [ContextMethod(""АКосинус"", ""Acos"")]
				|        public double Acos(double p1)
				|        {
				|            return System.Math.Acos(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "АСинус" Тогда
				Стр = Стр + 
				"        [ContextMethod(""АСинус"", ""Asin"")]
				|        public double Asin(double p1)
				|        {
				|            return System.Math.Asin(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "АТангенс" Тогда
				Стр = Стр + 
				"        [ContextMethod(""АТангенс"", ""Atan"")]
				|        public double Atan(double p1)
				|        {
				|            return System.Math.Atan(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "АТангенс2" Тогда
				Стр = Стр + 
				"        [ContextMethod(""АТангенс2"", ""Atan2"")]
				|        public double Atan2(double p1, double p2)
				|        {
 				|           return System.Math.Atan2(p1, p2);
 				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ГКосинус" Тогда
				Стр = Стр + 
				"        [ContextMethod(""ГКосинус"", ""Cosh"")]
				|        public double Cosh(double p1)
				|        {
				|            return System.Math.Cosh(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ГСинус" Тогда
				Стр = Стр + 
				"        [ContextMethod(""ГСинус"", ""Sinh"")]
				|        public double Sinh(double p1)
				|        {
				|            return System.Math.Sinh(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ГТангенс" Тогда
				Стр = Стр + 
				"        [ContextMethod(""ГТангенс"", ""Tanh"")]
				|        public double Tanh(double p1)
				|        {
				|            return System.Math.Tanh(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ККорень" Тогда
				Стр = Стр + 
				"        [ContextMethod(""ККорень"", ""Sqrt"")]
				|        public double Sqrt(double p1)
				|        {
				|            return System.Math.Sqrt(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Косинус" Тогда
				Стр = Стр + 
				"        [ContextMethod(""Косинус"", ""Cos"")]
				|        public double Cos(double p1)
				|        {
				|            return System.Math.Cos(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Логарифм" Тогда
				Стр = Стр + 
				"        [ContextMethod(""Логарифм"", ""Log"")]
				|        public double Log(double p1)
				|        {
				|            return System.Math.Log(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Логарифм10" Тогда
				Стр = Стр + 
				"        [ContextMethod(""Логарифм10"", ""Log10"")]
				|        public double Log10(double p1)
				|        {
				|            return System.Math.Log10(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "НаибольшееЦелое" Тогда
				Стр = Стр + 
				"        [ContextMethod(""НаибольшееЦелое"", ""Floor"")]
				|        public double Floor(double p1)
				|        {
				|            return System.Math.Floor(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "НаименьшееЦел" Тогда
				Стр = Стр + 
				"        [ContextMethod(""НаименьшееЦел"", ""Ceiling"")]
				|        public double Ceiling(double p1)
				|        {
				|            return System.Math.Ceiling(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Окр" Тогда
				Стр = Стр + 
				"        [ContextMethod(""Окр"", ""Round"")]
				|        public double Round(double p1, int p2)
				|        {
				|            return System.Math.Round(p1, p2);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Синус" Тогда
				Стр = Стр + 
				"        [ContextMethod(""Синус"", ""Sin"")]
				|        public double Sin(double p1)
				|        {
				|            return System.Math.Sin(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Случайное" Тогда
				Стр = Стр + 
				"        [ContextMethod(""Случайное"", ""Random"")]
				|        public double Random()
				|        {
				|            return OneScriptForms.Random.NextDouble();
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Степень" Тогда
				Стр = Стр + 
				"        [ContextMethod(""Степень"", ""Pow"")]
				|        public double Pow(double p1, double p2)
				|        {
				|            return System.Math.Pow(p1, p2);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Тангенс" Тогда
				Стр = Стр + 
				"        [ContextMethod(""Тангенс"", ""Tan"")]
				|        public double Tan(double p1)
				|        {
				|            return System.Math.Tan(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "Экспонента" Тогда
				Стр = Стр + 
				"        [ContextMethod(""Экспонента"", ""Exp"")]
				|        public double Exp(double p1)
				|        {
				|            return System.Math.Exp(p1);
				|        }
				|        
				|";
			ИначеЕсли МетодРус = "ПолучитьГлавноеМеню" Тогда
				Стр = Стр + 
				"        [ContextMethod(""ПолучитьГлавноеМеню"", ""GetMainMenu"")]
 				|        public ClMainMenu GetMainMenu()
				|        {
				|            return (ClMainMenu)OneScriptForms.RevertObj(Base_obj.GetMainMenu());
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "SortedList") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClDictionaryEntry Item(object p1, IValue p2 = null)
				|        {
				|            System.Collections.SortedList SortedList1 = Base_obj.M_SortedList;
				|            if (p2 != null)
				|            {
				|                SortedList1[p1] = p2;
				|            }
				|            DictionaryEntry DictionaryEntry1 = new DictionaryEntry(p1, SortedList1[p1]);
				|            return new ClDictionaryEntry(DictionaryEntry1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "DataTableCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public ClDataTable Add(ClDataTable p1)
				|        {
				|            return (ClDataTable)OneScriptForms.RevertObj(Base_obj.Add(p1.Base_obj));
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ПолучитьПодсказку") и (ИмяКонтекстКлассаАнгл = "ToolTip") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьПодсказку"", ""GetToolTip"")]
				|        public string GetToolTip(IValue p1)
				|        {
				|            return Base_obj.GetToolTip(((dynamic)p1).Base_obj);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "УстановитьПодсказку") и (ИмяКонтекстКлассаАнгл = "ToolTip") Тогда
				Стр = Стр +
				"        [ContextMethod(""УстановитьПодсказку"", ""SetToolTip"")]
				|        public void SetToolTip(IValue p1, string p2)
				|        {
				|            Base_obj.SetToolTip(((dynamic)p1).Base_obj, p2);
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "ВысотаЭлемента") и (ИмяКонтекстКлассаАнгл = "ComboBoxObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВысотаЭлемента"", ""HeightItem"")]
				|        public int HeightItem(int p1, IValue p2 = null)
				|        {
				|            if (m_obj.DrawMode == 2)
				|            {
				|                if (p2 != null)
				|                {
				|                    heightItems.RemoveAt(p1);
				|                    heightItems.Insert(p1, Convert.ToInt32(p2.AsNumber()));
				|                    return Convert.ToInt32(p2.AsNumber());
				|                }
				|                else
				|                {
				|                    System.Collections.ArrayList ArrayList2 = (System.Collections.ArrayList)heightItems.M_ArrayList;
				|                    return (int)ArrayList2[p1];
				|                }
				|            }
				|            return m_obj.Height;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "ListBoxObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public IValue Add(IValue p1)
				|        {
				|            osf.ClListItem p2;
				|            if (p1.GetType().ToString().Contains(""osf.ClListItem""))
				|            {
				|                p2 = new ClListItem(((osf.ClListItem)p1).Base_obj);
				|            }
				|            else
				|            {
				|                string s = """";
				|                try
				|                {
				|                    s = p1.GetType().GetCustomAttribute<ContextClassAttribute>().GetName();
				|                }
				|                catch
				|                {
				|                    s = p1.ToString();
				|                }
				|                p2 = new ClListItem(new ListItem(s, p1));
				|            }
				|            Base_obj.Add(p2.Base_obj);
				|            return p2;
				|        }
				|        
				|";
			ИначеЕсли (МетодРус = "Добавить") и (ИмяКонтекстКлассаАнгл = "ComboBoxObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Добавить"", ""Add"")]
				|        public IValue Add(IValue p1)
				|        {
				|            m_obj.Base_obj.HeightItems.Add(ValueFactory.Create(m_obj.ItemHeight));
				|            osf.ClListItem p2;
				|            if (p1.GetType().ToString().Contains(""osf.ClListItem""))
				|            {
				|                p2 = new ClListItem(((osf.ClListItem)p1).Base_obj);
				|            }
				|            else
				|            {
				|                string s = """";
				|                try
				|                {
				|                    s = p1.GetType().GetCustomAttribute<ContextClassAttribute>().GetName();
				|                }
				|                catch
				|                {
				|                    s = p1.ToString();
				|                }
				|                p2 = new ClListItem(new ListItem(s, p1));
				|            }
				|            Base_obj.Add(p2.Base_obj);
				|            return p2;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ДобавитьНовуюСтроку") и (ИмяКонтекстКлассаАнгл = "DataView") Тогда
				Стр = Стр +
				"        [ContextMethod(""ДобавитьНовуюСтроку"", ""AddNew"")]
				|        public ClDataRowView AddNew()
				|        {
				|            return new ClDataRowView(Base_obj.AddNew());
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ВключитьВизуальныеСтили") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВключитьВизуальныеСтили"", ""EnableVisualStyles"")]
				|        public void EnableVisualStyles()
				|        {
				|            System.Windows.Forms.Application.EnableVisualStyles();
				|            System.Windows.Forms.Application.DoEvents();
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ТекстурнаяКисть") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ТекстурнаяКисть"", ""TextureBrush"")]
				|        public ClTextureBrush TextureBrush(IValue p1)
				|        {
				|            return new ClTextureBrush(((dynamic)p1).Base_obj);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Прямоугольник") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""Прямоугольник"", ""Rectangle"")]
				|        public ClRectangle Rectangle(IValue p1 = null, int p2 = 0, int p3 = 0, int p4 = 0)
				|        {
				|            if (p1 is osf.ClSize)
				|            {
				|                return new ClRectangle(0, 0, ((dynamic)p1).Base_obj.Width, ((dynamic)p1).Base_obj.Height);
				|            }
				|            else if (p1 == null)
				|            {
				|                int p5 = 0;
				|                return new ClRectangle(p5, p2, p3, p4);
				|            }
				|            else
				|            {
				|                int p5 = Convert.ToInt32(p1.AsNumber());
				|                return new ClRectangle(p5, p2, p3, p4);
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ControlCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1)
				|        {
				|            return OneScriptForms.RevertObj((osf.Control)Base_obj[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "УстановитьСвязьДанных") и (ИмяКонтекстКлассаАнгл = "DataGrid") Тогда
				Стр = Стр +
				"        [ContextMethod(""УстановитьСвязьДанных"", ""SetDataBinding"")]
				|        public void SetDataBinding(IValue p1, string p2 = null)
				|        {
				|            dynamic p3 = p1.AsObject();
				|            Base_obj.SetDataBinding(p3.Base_obj, p2);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Выбрать") и (ИмяКонтекстКлассаАнгл = "DataTable") Тогда
				Стр = Стр +
				"        [ContextMethod(""Выбрать"", ""Select"")]
				|        public ClArrayList Select(string p1)
				|        {
				|            ClArrayList ClArrayList1 = new ClArrayList();
				|            try
				|            {
				|                object[] objects = Base_obj.Select(p1);
				|                for (int i = 0; i < objects.Length; i++)
				|                {
				|                    ClArrayList1.Base_obj.Add(new ClDataRow((osf.DataRow)objects[i]));
				|                }
				|            }
				|            catch
				|            {
				|            }
				|            return ClArrayList1;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ВыгрузитьКолонку") и (ИмяКонтекстКлассаАнгл = "DataTable") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВыгрузитьКолонку"", ""UnloadColumn"")]
				|        public ClArrayList UnloadColumn(IValue p1)
				|        {
				|            ClArrayList ClArrayList1 = new ClArrayList();
				|            if (p1.SystemType.Name == ""Число"")
				|            {
				|                for (int i = 0; i < Base_obj.Rows.Count; i++)
				|                {
				|                    dynamic p2 = Base_obj.Rows[i].get_Item(Convert.ToInt32(p1.AsNumber()));
				|                    ClArrayList1.Base_obj.Add(p2.Value);
				|                }
				|                return ClArrayList1;
				|            }
				|            else if (p1.SystemType.Name == ""Строка"")
				|            {
				|                for (int i = 0; i < Base_obj.Rows.Count; i++)
				|                {
				|                    dynamic p2 = Base_obj.Rows[i].get_Item(p1.AsString());
				|                    ClArrayList1.Base_obj.Add(p2.Value);
				|                }
				|                return ClArrayList1;
				|            }
				|            else if (p1.SystemType.Name == ""КлКолонкаДанных"")
				|            {
				|                for (int i = 0; i < Base_obj.Rows.Count; i++)
				|                {
				|                    dynamic p2 = Base_obj.Rows[i].get_Item(((ClDataColumn)p1.AsObject()).Base_obj.ColumnName);
				|                    ClArrayList1.Base_obj.Add(p2.Value);
				|                }
				|                return ClArrayList1;
				|            }
				|            return null;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ГраницыТекущейЯчейки") и (ИмяКонтекстКлассаАнгл = "DataGrid") Тогда
				Стр = Стр +
				"        [ContextMethod(""ГраницыТекущейЯчейки"", ""GetCurrentCellBounds"")]
				|        public ClRectangle GetCurrentCellBounds()
				|        {
				|            return new ClRectangle(Base_obj.GetCurrentCellBounds());
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ГруппировкаТаблицы") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ГруппировкаТаблицы"", ""DataGridViewGrouper"")]
				|        public Subro.Controls.ClDataGridViewGrouper DataGridViewGrouper(ClDataGridView p1)
				|        {
				|            return new Subro.Controls.ClDataGridViewGrouper(p1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ГруппировщикТаблицы") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""ГруппировщикТаблицы"", ""DataGridViewGrouperControl"")]
				|        public Subro.Controls.ClDataGridViewGrouperControl DataGridViewGrouperControl(Subro.Controls.ClDataGridViewGrouper p1)
				|        {
				|            return new Subro.Controls.ClDataGridViewGrouperControl(p1.Base_obj);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Цвет") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""Цвет"", ""Color"")]
				|        public ClColor Color(IValue p1 = null, int p2 = 0, int p3 = 0)
				|        {
				|            if (p1 != null)
				|            {
				|                if (p1.SystemType.Name == ""Строка"")
				|                {
				|                    ClColor ClColor1 = new ClColor();
				|                    int NumberProp1 = ClColor1.FindProperty(p1.AsString());
				|                    dynamic obj1 = ClColor1.GetPropValue(NumberProp1);
				|                    return (ClColor)ValueFactory.Create(obj1);
				|                }
				|                if (p1.SystemType.Name == ""Число"")
				|                {
				|                    Color Color1 = new Color(System.Drawing.Color.FromArgb(Convert.ToInt32(p1.AsNumber()), p2, p3));
				|                    return new ClColor(Color1);
				|                }
				|            }
				|            return new ClColor();
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "GridColumnStylesCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1)
				|        {
				|            return OneScriptForms.RevertObj(((dynamic)Base_obj[p1].M_DataGridColumnStyle).M_Object);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ПолучитьПоИндексу") и (ИмяКонтекстКлассаАнгл = "SortedList") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьПоИндексу"", ""GetByIndex"")]
				|        public IValue GetByIndex(int p1)
				|        {
				|            return (IValue)Base_obj.GetByIndex(p1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Блокировать") и (ИмяКонтекстКлассаАнгл = "Bitmap") Тогда
				Стр = Стр +
				"        [ContextMethod(""Блокировать"", ""LockBits"")]
				|        public ClBitmapData LockBits()
				|        {
				|            return new ClBitmapData(Base_obj.LockBits());
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Разблокировать") и (ИмяКонтекстКлассаАнгл = "Bitmap") Тогда
				Стр = Стр +
				"        [ContextMethod(""Разблокировать"", ""UnlockBits"")]
				|        public void UnlockBits(ClBitmapData p1)
				|        {
				|            Base_obj.UnlockBits(p1.Base_obj);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ПолучитьПиксель") и (ИмяКонтекстКлассаАнгл = "Bitmap") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьПиксель"", ""GetPixel"")]
				|        public ClColor GetPixel(int p1, int p2)
				|        {
				|            return new ClColor(Base_obj.GetPixel(p1, p2));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ПолучитьЭлемент") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьЭлемент"", ""GetItemAt"")]
				|        public ClListViewItem GetItemAt(int p1, int p2)
				|        {
				|            return new ClListViewItem(Base_obj.GetItemAt(p1, p2));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Четное") и (ИмяКонтекстКлассаАнгл = "Math") Тогда
				Стр = Стр +
				"        [ContextMethod(""Четное"", ""Even"")]
				|        public IValue Even(IValue p1)
				|        {
				|            if (p1.AsNumber() - (System.Math.Floor(p1.AsNumber())) > 0)
				|            {
				|                return null;
				|            }
				|            return ValueFactory.Create((p1.AsNumber() % 2) == 0);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ЗагрузитьФайл") и (ИмяКонтекстКлассаАнгл = "RichTextBox") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЗагрузитьФайл"", ""LoadFile"")]
				|        public void LoadFile(string p1, int p2)
				|        {
				|            Base_obj.LoadFile(p1, (System.Windows.Forms.RichTextBoxStreamType)p2);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Поиск") и (ИмяКонтекстКлассаАнгл = "RichTextBox") Тогда
				Стр = Стр +
				"        [ContextMethod(""Поиск"", ""Find"")]
				|        public int Find(string p1, int p2, int p3)
				|        {
				|            return Base_obj.Find(p1, p2, (System.Windows.Forms.RichTextBoxFinds)p3);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "СохранитьФайл") и (ИмяКонтекстКлассаАнгл = "RichTextBox") Тогда
				Стр = Стр +
				"        [ContextMethod(""СохранитьФайл"", ""SaveFile"")]
				|        public void SaveFile(string p1, int p2)
				|        {
				|            Base_obj.SaveFile(p1, (System.Windows.Forms.RichTextBoxStreamType)p2);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "DataRowCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""InsertAt"")]
				|        public ClDataRow InsertAt(ClDataRow p1, int p2)
				|        {
				|            return new ClDataRow(Base_obj.InsertAt(p1.Base_obj, p2));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Удалить") и (ИмяКонтекстКлассаАнгл = "DataTableCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Удалить"", ""Remove"")]
				|        public void Remove(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                Base_obj.Remove(p1.AsString());
				|            }
				|            else
				|            {
				|                Base_obj.Remove(((dynamic)p1).Base_obj);
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "DataTableCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClDataTable Item(IValue p1)
				|        {
				|            ClDataTable ClDataTable1 = new ClDataTable();
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return new ClDataTable(Base_obj[p1.AsString()]);
				|            }
				|            else if (p1.SystemType.Name == ""Число"")
				|            {
				|                return new ClDataTable(Base_obj[Convert.ToInt32(p1.AsNumber())]);
				|            }
				|            else
				|            {
				|                return null;
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ЕжегодныеДаты") и (ИмяКонтекстКлассаАнгл = "MonthCalendar") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЕжегодныеДаты"", ""AnnuallyBoldedDates"")]
				|        public DateTime AnnuallyBoldedDates2(int p1)
				|        {
				|            return AnnuallyBoldedDates.Item(p1).AsDate();
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ВыделенныеДаты") и (ИмяКонтекстКлассаАнгл = "MonthCalendar") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВыделенныеДаты"", ""BoldedDates"")]
				|        public DateTime BoldedDates2(int p1)
				|        {
				|            return BoldedDates.Item(p1).AsDate();
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ЕжемесячныеДаты") и (ИмяКонтекстКлассаАнгл = "MonthCalendar") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЕжемесячныеДаты"", ""MonthlyBoldedDates"")]
				|        public DateTime MonthlyBoldedDates2(int p1)
				|        {
				|            return MonthlyBoldedDates.Item(p1).AsDate();
				|        }
				|
				|";
			ИначеЕсли МетодРус = "ЭлементыУправления" Тогда
				Стр = Стр +
				"        [ContextMethod(""ЭлементыУправления"", ""Controls"")]
				|        public IValue Controls2(int p1)
				|        {
				|            return OneScriptForms.RevertObj(Base_obj.Controls2(p1));
				|        }
				|
				|";
			ИначеЕсли МетодРус = "ЭлементыМеню" Тогда
				Стр = Стр +
				"        [ContextMethod(""ЭлементыМеню"", ""MenuItems"")]
				|        public ClMenuItem MenuItems2(int p1)
				|        {
				|            return (ClMenuItem)OneScriptForms.RevertObj(Base_obj.MenuItems[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Колонки") и (ИмяКонтекстКлассаАнгл = "DataTable") Тогда
				Стр = Стр +
				"        [ContextMethod(""Колонки"", ""Columns"")]
				|        public ClDataColumn Columns2(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Число"")
				|            {
				|                return ((DataColumnEx)Base_obj.M_DataTable.Columns[Convert.ToInt32(p1.AsNumber())]).M_Object.dll_obj;
				|            }
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return ((DataColumnEx)Base_obj.M_DataTable.Columns[p1.AsString()]).M_Object.dll_obj;
				|            }
				|            return null;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Изображения") и (ИмяКонтекстКлассаАнгл = "ImageList") Тогда
				Стр = Стр +
				"        [ContextMethod(""Изображения"", ""Images"")]
				|        public ClBitmap Images2(int p1)
				|        {
				|            return new ClBitmap(Base_obj.Images[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Кнопки") и (ИмяКонтекстКлассаАнгл = "ToolBar") Тогда
				Стр = Стр +
				"        [ContextMethod(""Кнопки"", ""Buttons"")]
				|        public ClToolBarButton Buttons2(int p1)
				|        {
				|            return (ClToolBarButton)OneScriptForms.RevertObj(Base_obj.Buttons[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Ссылки") и (ИмяКонтекстКлассаАнгл = "LinkLabel") Тогда
				Стр = Стр +
				"        [ContextMethod(""Ссылки"", ""Links"")]
				|        public ClLink Links2(int p1)
				|        {
				|            return (ClLink)OneScriptForms.RevertObj(Base_obj.Links[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ИндексыВыбранных") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				Стр = Стр +
				"        [ContextMethod(""ИндексыВыбранных"", ""SelectedIndices"")]
				|        public int SelectedIndices2(int p1)
				|        {
				|            return Base_obj.SelectedIndices[p1];
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Панели") и (ИмяКонтекстКлассаАнгл = "StatusBar") Тогда
				Стр = Стр +
				"        [ContextMethod(""Панели"", ""Panels"")]
				|        public ClStatusBarPanel Panels2(int p1)
				|        {
				|            return (ClStatusBarPanel)OneScriptForms.RevertObj(Base_obj.Panels[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "СтилиТаблицы") и (ИмяКонтекстКлассаАнгл = "DataGrid") Тогда
				Стр = Стр +
				"        [ContextMethod(""СтилиТаблицы"", ""TableStyles"")]
				|        public ClDataGridTableStyle TableStyles2(int p1)
				|        {
				|            return (ClDataGridTableStyle)OneScriptForms.RevertObj(Base_obj.TableStyles[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ЭтоПодкласс") и (ИмяКонтекстКлассаАнгл = "Type") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЭтоПодкласс"", ""IsSubclassOf"")]
				|        public bool IsSubclassOf(ClType p1)
				|        {
				|            string str1 = Base_obj.ToString();
				|            string str2 = p1.Base_obj.ToString();
				|            System.Type Type1 = System.Type.GetType(str1.Replace(""osf.Cl"", ""osf.""));
				|            System.Type Type2 = System.Type.GetType(str2.Replace(""osf.Cl"", ""osf.""));
				|            return Type1.IsSubclassOf(Type2);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ЭтоЭкземплярТипа") и (ИмяКонтекстКлассаАнгл = "Type") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЭтоЭкземплярТипа"", ""IsInstanceOfType"")]
				|        public bool IsInstanceOfType(IValue p1)
				|        {
				|            string str1 = Base_obj.ToString();
				|            System.Type Type1 = System.Type.GetType(str1.Replace(""osf.Cl"", ""osf.""));
				|            return Type1.IsInstanceOfType(((dynamic)p1).Base_obj);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Узлы") и (ИмяКонтекстКлассаАнгл = "TreeNode") Тогда
				Стр = Стр +
				"        [ContextMethod(""Узлы"", ""Nodes"")]
				|        public ClTreeNode Nodes2(int p1)
				|        {
				|            return new ClTreeNode(Base_obj.Nodes[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "TreeNodeCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public ClTreeNode Insert(int p1, ClTreeNode p2)
				|        {
				|            return new ClTreeNode(Base_obj.Insert(p1, p2.Base_obj));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "DataGridViewColumnCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public void Insert(int p1, IValue p2)
				|        {
				|            Base_obj.Insert(p1, ((dynamic)p2).Base_obj);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "TreeNodeCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public ClTreeNode Item(int p1)
				|        {
				|            return (ClTreeNode)OneScriptForms.RevertObj(Base_obj[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "HashTable") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(IValue p1)
				|        {
				|            return (IValue)Base_obj.get_Item(p1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ПолучитьArgb") и (ИмяКонтекстКлассаАнгл = "Color") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьArgb"", ""ToArgb"")]
				|        public int ToArgb()
				|        {
				|            return (Base_obj.R * 65536) + (Base_obj.G * 256) + Base_obj.B;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ЭлементыСетки") и (ИмяКонтекстКлассаАнгл = "PropertyGrid") Тогда
				Стр = Стр +
				"        [ContextMethod(""ЭлементыСетки"", ""GridItems"")]
				|        public ClGridItem GridItems2(IValue p1)
				|        {
				|            object comp = Base_obj.M_PropertyGrid;
				|            object comp1 = new System.Windows.Forms.PropertyGrid();
				|            System.Type comp1Type = comp1.GetType();
				|            object view = comp1Type.GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(comp);
				|            System.Windows.Forms.GridItemCollection GridItemCollection1 = (System.Windows.Forms.GridItemCollection)view.GetType().InvokeMember(
				|                ""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view, null);
				|            osf.GridItemCollection GridItemCollection2 = new osf.GridItemCollection(GridItemCollection1);
				|            if (p1.SystemType.Name == ""Число"")
				|            {
				|                return new ClGridItem(GridItemCollection2[Convert.ToInt32(p1.AsNumber())]);
				|            }
				|            return new ClGridItem(GridItemCollection2[p1.AsString()]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элемент") и (ИмяКонтекстКлассаАнгл = "ComboBoxObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элемент"", ""Item"")]
				|        public IValue Item(int p1, IValue p2 = null)
				|        {
				|            osf.ListItem ListItem1 = new osf.ListItem();
				|            if (p2 != null)
				|            {
				|                Base_obj.RemoveAt(p1);
				|                if (p2.GetType().ToString().Contains(""osf.ClListItem""))
				|                {
				|                    ListItem1 = ((dynamic)p2).Base_obj;
				|                }
				|                else
				|                {
				|                    ListItem1 = new osf.ListItem(p2.ToString(), p2);
				|                }
				|                Base_obj.Insert(p1, ListItem1);
				|            }
				|            else
				|            {
				|                if (Base_obj[p1].GetType().ToString() == ""System.Data.DataRowView"")
				|                {
				|                    osf.DataRowView DataRowView1 = new osf.DataRowView((System.Data.DataRowView)Base_obj[p1]);
				|                    ListItem1.Text = DataRowView1.get_Item(m_obj.Base_obj.DisplayMember).ToString();
				|                    ListItem1.Value = DataRowView1.get_Item(m_obj.Base_obj.ValueMember);
				|                }
				|                else if (Base_obj[p1].GetType().ToString() == ""osf.ListItem"")
				|                {
				|                    ListItem1 = (osf.ListItem)Base_obj[p1];
				|                }
				|                else
				|                {
				|                    ListItem1.Text = Base_obj[p1].ToString();
				|                    ListItem1.Value = Base_obj[p1];
				|                    ListItem1.ForeColor = ((dynamic)Base_obj[p1]).ForeColor;
				|                }
				|            }
				|            return (IValue)new ClListItem(ListItem1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элементы") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элементы"", ""Items"")]
				|        public ClListViewItem Items2(int p1)
				|        {
				|            return new ClListViewItem(Base_obj.Items[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элементы") и (ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxCell") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элементы"", ""Items"")]
				|        public IValue Items2(int p1)
				|        {
				|            return OneScriptForms.RevertObj(Base_obj.Items[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элементы") и (ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxColumn") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элементы"", ""Items"")]
				|        public IValue Items2(int p1)
				|        {
				|            return OneScriptForms.RevertObj(Base_obj.Items[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элементы") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элементы"", ""Items"")]
				|        public ClListItem Items2(int p1)
				|        {
				|            osf.ListItem ListItem1 = new osf.ListItem();
				|            if (Base_obj.Items[p1].GetType().ToString() == ""System.Data.DataRowView"")
				|            {
				|                osf.DataRowView DataRowView1 = new osf.DataRowView((System.Data.DataRowView)Base_obj.Items[p1]);
				|                ListItem1.Text = DataRowView1.get_Item(Base_obj.DisplayMember).ToString();
				|                ListItem1.Value = DataRowView1.get_Item(Base_obj.ValueMember);
				|            }
				|            else if (Base_obj.Items[p1].GetType().ToString() == ""osf.ListItem"")
				|            {
				|                ListItem1 = (osf.ListItem)Base_obj.Items[p1];
				|            }
				|            else
				|            {
				|                ListItem1.Text = Base_obj.Items[p1].ToString();
				|                ListItem1.Value = Base_obj.Items[p1];
				|                try
				|                {
				|                    ListItem1.ForeColor = ((dynamic)Base_obj.Items[p1]).ForeColor.Base_obj;
				|                }
				|                catch
				|                {
				|                }
				|            }
				|            return new ClListItem(ListItem1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Подэлементы") и (ИмяКонтекстКлассаАнгл = "ListViewItem") Тогда
				Стр = Стр +
				"        [ContextMethod(""Подэлементы"", ""SubItems"")]
				|        public ClListViewSubItem SubItems2(int p1)
				|        {
				|            return new ClListViewSubItem(Base_obj.SubItems[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Удалить") и (ИмяКонтекстКлассаАнгл = "ControlCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Удалить"", ""Remove"")]
				|        public void Remove(IValue p1)
				|        {
				|            Base_obj.Remove(((dynamic)p1).Base_obj);
				|        }
				|
				|";
			ИначеЕсли МетодРус = "ВозобновитьРазмещение" Тогда
				Стр = Стр +
				"        [ContextMethod(""ВозобновитьРазмещение"", ""ResumeLayout"")]
				|        public void ResumeLayout(bool p1 = false)
				|        {
				|            Base_obj.ResumeLayout(p1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "ComboBoxObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public IValue Insert(int p1, IValue p2)
				|        {
				|            heightItems.Insert(p1, ValueFactory.Create(m_obj._HeightItems));
				|            osf.ClListItem p3 = new ClListItem();
				|            if (p2.GetType().ToString().Contains(""osf.ClListItem""))
				|            {
				|                p3.Base_obj = ((osf.ClListItem)p2).Base_obj;
				|            }
				|            else
				|            {
				|                p3.Base_obj = new ListItem(p2.ToString(), p2);
				|            }
				|            Base_obj.Insert(p1, p3.Base_obj);
				|            return p3;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxCellObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public ClListItem Insert(int p1, IValue p2)
				|        {
				|            osf.ClListItem p3 = new ClListItem();
				|            if (p2.GetType().ToString().Contains(""osf.ClListItem""))
				|            {
				|                p3.Base_obj = ((osf.ClListItem)p2).Base_obj;
				|            }
				|            else
				|            {
				|                p3.Base_obj = new ListItem(p2.ToString(), p2);
				|            }
				|            Base_obj.Insert(p1, p3.Base_obj);
				|            return p3;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "ListBoxObjectCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public IValue Insert(int p1, IValue p2)
				|        {
				|            osf.ClListItem p3 = new ClListItem();
				|            if (p2.GetType().ToString().Contains(""osf.ClListItem""))
				|            {
				|                p3.Base_obj = ((osf.ClListItem)p2).Base_obj;
				|            }
				|            else
				|            {
				|                p3.Base_obj = new ListItem(p2.ToString(), p2);
				|            }
				|            Base_obj.Insert(p1, p3.Base_obj);
				|            return p3;
				|        }
				|
				|";
			ИначеЕсли МетодРус = "ТочкаНаКлиенте" Тогда
				Стр = Стр +
				"        [ContextMethod(""ТочкаНаКлиенте"", ""PointToClient"")]
				|        public ClPoint PointToClient(ClPoint p1)
				|        {
				|            return new ClPoint(Base_obj.PointToClient(p1.Base_obj));
				|        }
				|
				|";
			ИначеЕсли МетодРус = "ТочкаНаЭкране" Тогда
				Стр = Стр +
				"        [ContextMethod(""ТочкаНаЭкране"", ""PointToScreen"")]
				|        public ClPoint PointToScreen(ClPoint p1)
				|        {
				|            return new ClPoint(Base_obj.PointToScreen(p1.Base_obj));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Содержит") и (ИмяКонтекстКлассаАнгл = "ControlCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Содержит"", ""Contains"")]
				|        public bool Contains(IValue p1)
				|        {
				|            return Base_obj.Contains(((dynamic)p1).Base_obj);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "СодержитКлюч") и (ИмяКонтекстКлассаАнгл = "SortedList") Тогда
				Стр = Стр +
				"        [ContextMethod(""СодержитКлюч"", ""ContainsKey"")]
				|        public bool ContainsKey(object p1)
				|        {
				|            return Base_obj.ContainsKey(p1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Вставить") и (ИмяКонтекстКлассаАнгл = "ListViewItemCollection") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вставить"", ""Insert"")]
				|        public ClListViewItem Insert(int p1, ClListViewItem p2)
				|        {
				|            return new ClListViewItem(Base_obj.Insert(p1, p2.Base_obj));
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Элементы") и (ИмяКонтекстКлассаАнгл = "ComboBox") Тогда
				Стр = Стр +
				"        [ContextMethod(""Элементы"", ""Items"")]
				|        public ClListItem Items2(int p1)
				|        {
				|            osf.ListItem ListItem1 = new osf.ListItem();
				|            if (Base_obj.Items[p1].GetType().ToString() == ""System.Data.DataRowView"")
				|            {
				|                osf.DataRowView DataRowView1 = new osf.DataRowView((System.Data.DataRowView)Base_obj.Items[p1]);
				|                ListItem1.Text = DataRowView1.get_Item(Base_obj.DisplayMember).ToString();
				|                ListItem1.Value = DataRowView1.get_Item(Base_obj.ValueMember);
				|            }
				|            else if (Base_obj.Items[p1].GetType().ToString() == ""osf.ListItem"")
				|            {
				|                ListItem1 = (osf.ListItem)Base_obj.Items[p1];
				|            }
				|            else
				|            {
				|                ListItem1.Text = Base_obj.Items[p1].ToString();
				|                ListItem1.Value = Base_obj.Items[p1];
				|                try
				|                {
				|                    ListItem1.ForeColor = ((dynamic)Base_obj.Items[p1]).ForeColor.Base_obj;
				|                }
				|                catch
				|                {
				|                }
				|            }
				|            return new ClListItem(ListItem1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "СтилиКолонкиСеткиДанных") и (ИмяКонтекстКлассаАнгл = "DataGridTableStyle") Тогда
				Стр = Стр +
				"        [ContextMethod(""СтилиКолонкиСеткиДанных"", ""GridColumnStyles"")]
				|        public IValue GridColumnStyles2(int p1)
				|        {
				|            try
				|            {
				|                return ((dynamic)Base_obj.GridColumnStyles.M_GridColumnStylesCollection[p1]).M_Object.dll_obj;
				|            }
				|            catch
				|            {
				|                return new ClDataGridComboBoxColumnStyle((dynamic)Base_obj.GridColumnStyles.M_GridColumnStylesCollection[p1]);
				|            }
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Таблицы") и (ИмяКонтекстКлассаАнгл = "DataSet") Тогда
				Стр = Стр +
				"        [ContextMethod(""Таблицы"", ""Tables"")]
				|        public ClDataTable Tables2(IValue p1)
				|        {
				|            if (p1.SystemType.Name == ""Строка"")
				|            {
				|                return Base_obj.Tables[p1.AsString()].dll_obj;
				|            }
				|            else if (p1.SystemType.Name == ""Число"")
				|            {
				|                return Base_obj.Tables[Convert.ToInt32(p1.AsNumber())].dll_obj;
				|            }
				|            return null;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Строки") и (ИмяКонтекстКлассаАнгл = "DataTable") Тогда
				Стр = Стр +
				"        [ContextMethod(""Строки"", ""Rows"")]
				|        public ClDataRow Rows2(int p1)
				|        {
				|            return new ClDataRow(Base_obj.Rows[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ВыбранныеЭлементы") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВыбранныеЭлементы"", ""SelectedItems"")]
				|        public ClListViewItem SelectedItems2(int p1)
				|        {
				|            return new ClListViewItem(Base_obj.SelectedItems[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Колонки") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				Стр = Стр +
				"        [ContextMethod(""Колонки"", ""Columns"")]
				|        public ClColumnHeader Columns2(int p1)
				|        {
				|            return new ClColumnHeader(Base_obj.Columns[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ПомеченныеЭлементы") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПомеченныеЭлементы"", ""CheckedItems"")]
				|        public ClListViewItem CheckedItems2(int p1)
				|        {
				|            return new ClListViewItem(Base_obj.CheckedItems[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ВыбранныеЭлементы") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				Стр = Стр +
				"        [ContextMethod(""ВыбранныеЭлементы"", ""SelectedItems"")]
				|        public IValue SelectedItems2(int p1)
				|        {
				|            osf.ListItem ListItem1 = new osf.ListItem();
				|            if (Base_obj.SelectedItems[p1].GetType().ToString() == ""System.Data.DataRowView"")
				|            {
				|                osf.DataRowView DataRowView1 = new osf.DataRowView((System.Data.DataRowView)Base_obj.SelectedItems[p1]);
				|                ListItem1.Text = DataRowView1.get_Item(Base_obj.DisplayMember).ToString();
				|                ListItem1.Value = DataRowView1.get_Item(Base_obj.ValueMember);
				|            }
				|            else if (Base_obj.SelectedItems[p1].GetType().ToString() == ""osf.ListItem"")
				|            {
				|                ListItem1 = (osf.ListItem)Base_obj.SelectedItems[p1];
				|            }
				|            else
				|            {
				|                ListItem1.Text = Base_obj.SelectedItems[p1].ToString();
				|                ListItem1.Value = Base_obj.SelectedItems[p1];
				|                try
				|                {
				|                    ListItem1.ForeColor = ((dynamic)Base_obj.SelectedItems[p1]).ForeColor.Base_obj;
				|                }
				|                catch
				|                {
				|                }
				|            }
				|            return new ClListItem(ListItem1);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Вкладки") и (ИмяКонтекстКлассаАнгл = "TabControl") Тогда
				Стр = Стр +
				"        [ContextMethod(""Вкладки"", ""TabPages"")]
				|        public ClTabPage TabPages2(int p1)
				|        {
				|            return (ClTabPage)OneScriptForms.RevertObj(Base_obj.TabPages[p1]);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ПоказатьДиалог") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				Стр = Стр +
				"        [ContextMethod(""ПоказатьДиалог"", ""ShowDialog"")]
				|        public int ShowDialog()
				|        {
				|            return Base_obj.ShowDialog();
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "ВосстановитьКонсоль") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [DllImport(""User32"")] private static extern int ShowWindow(IntPtr hwnd, int nCmdShow);
				|
				|        [ContextMethod(""ВосстановитьКонсоль"", ""RestoreConsole"")]
				|        public void RestoreConsole()
				|        {
				|            ShowWindow(GetConsoleWindow(), 9);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "СкрытьКонсоль") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [DllImport(""kernel32.dll"")] static extern IntPtr GetConsoleWindow();
				|
				|        [ContextMethod(""СкрытьКонсоль"", ""HideConsole"")]
				|        public void HideConsole()
				|        {
				|            ShowWindow(GetConsoleWindow(), 0);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "СвернутьКонсоль") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""СвернутьКонсоль"", ""MinimizedConsole"")]
				|        public void MinimizedConsole()
				|        {
				|            ShowWindow(GetConsoleWindow(), 7);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Сортировать") и (ИмяКонтекстКлассаАнгл = "ArrayList") Тогда
				Стр = Стр +
				"        [ContextMethod(""Сортировать"", ""Sort"")]
				|        public void Sort(int p1 = 0, int p2 = 1)
				|        {
				|            Base_obj.Sort(p1, p2);
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "СвойстваОбъекта") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""СвойстваОбъекта"", ""PropObj"")]
				|        public string PropObj1(IValue p1)
				|        {
				|            string str1 = null;
				|            string transfer = """";
				|            List<string> p = new List<string>();
				|            System.Reflection.PropertyInfo[] myPropertyInfo;
				|            if (p1.GetType() == typeof(osf.ClType))
				|            {
				|                myPropertyInfo = p1.GetType().GetProperties();
				|                for (int i = 0; i < myPropertyInfo.Length; i++)
				|                {
				|                    if (myPropertyInfo[i].CustomAttributes.Count() == 1)
				|                    {
				|                        string NameRu = myPropertyInfo[i].GetCustomAttribute<ContextPropertyAttribute>().GetName();
				|                        string NameEn = myPropertyInfo[i].GetCustomAttribute<ContextPropertyAttribute>().GetAlias();
				|                        p.Add(NameRu + "" ("" + NameEn + "")"");
				|                    }
				|                }
				|            }
				|
				|            if (p1.SystemType.Name == ""Строка"") // это может быть полное имя класса, если объект не из пространства имен osf, или имя класса сокращенное, если объект из пространства имен osf
				|            {
				|                if (p1.AsString().Contains(""."")) // имя объекта не из пространства имен osf
				|                {
				|                    myPropertyInfo = GetTypeFromName(p1.AsString()).GetProperties();
				|                    foreach (var item in myPropertyInfo)
				|                    {
				|                        p.Add(item.Name);
				|                    }
				|                }
				|                else // имя объекта из пространства имен osf
				|                {
				|                    // находим совпадение GetName или GetAlias в методах osf.OneScriptForms, так мы получим объекты, имеющие конструктор
				|                    System.Type Type1 = System.Type.GetType(""osf.OneScriptForms"", false, true);
				|                    System.Reflection.MethodInfo[] myMethodInfo = Type1.GetMethods();
				|                    for (int i = 0; i < myMethodInfo.Length; i++)
				|                    {
				|                        if (myMethodInfo[i].CustomAttributes.Count() == 1)
				|                        {
				|                            if (myMethodInfo[i].GetCustomAttribute<ContextMethodAttribute>() != null)
				|                            {
				|                                string NameRu = myMethodInfo[i].GetCustomAttribute<ContextMethodAttribute>().GetName();
				|                                string NameEn = myMethodInfo[i].GetCustomAttribute<ContextMethodAttribute>().GetAlias();
				|                                if (NameRu == p1.AsString() || NameEn == p1.AsString())
				|                                {
				|                                    System.Type Type2 = System.Type.GetType(""osf.Cl"" + NameEn, false, true);
				|                                    System.Reflection.PropertyInfo[] myPropertyInfo2 = Type2.GetProperties();
				|                                    for (int i2 = 0; i2 < myPropertyInfo2.Length; i2++)
				|                                    {
				|                                        if (myPropertyInfo2[i2].CustomAttributes.Count() == 1)
				|                                        {
				|                                            string NameRu2 = myPropertyInfo2[i2].GetCustomAttribute<ContextPropertyAttribute>().GetName();
				|                                            string NameEn2 = myPropertyInfo2[i2].GetCustomAttribute<ContextPropertyAttribute>().GetAlias();
				|                                            p.Add(NameRu2 + "" ("" + NameEn2 + "")"");
				|                                        }
				|                                    }
				|                                    break;
				|                                }
				|                            }
				|                        }
				|                    }
				|                }
				|            }
				|            else // это объект, а не строка
				|            {
				|                myPropertyInfo = p1.GetType().GetProperties();
				|                for (int i = 0; i < myPropertyInfo.Length; i++)
				|                {
				|                    if (myPropertyInfo[i].CustomAttributes.Count() == 1)
				|                    {
				|                        string NameRu = myPropertyInfo[i].GetCustomAttribute<ContextPropertyAttribute>().GetName();
				|                        string NameEn = myPropertyInfo[i].GetCustomAttribute<ContextPropertyAttribute>().GetAlias();
				|                        p.Add(NameRu + "" ("" + NameEn + "")"");
				|                    }
				|                }
				|            }
				|            p.Sort();
				|            foreach (string str in p)
				|            {
				|                str1 = str1 + transfer + str;
				|                transfer = ""\r\n"";
				|            }
				|            return str1;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "СтрНайтиМежду") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""СтрНайтиМежду"", ""StrFindBetween"")]
				|        public ClArrayList StrFindBetween(string p1, string p2 = null, string p3 = null, bool p4 = true, bool p5 = true)
				|        {
				|            //p1 - исходная строка
				|            //p2 - подстрока поиска от которой ведем поиск
				|            //p3 - подстрока поиска до которой ведем поиск
				|            //p4 - не включать p2 и p3 в результат
				|            //p5 - в результат не будут включены участки, содержащие другие найденные участки, удовлетворяющие переданным параметрам
				|            //функция возвращает массив строк
				|            string str1 = p1;
				|            int Position1;
				|            ClArrayList ClArrayList1 = new ClArrayList();
				|            if (p2 != null && p3 == null)
				|            {
				|                Position1 = str1.IndexOf(p2);
				|                while (Position1 >= 0)
				|                {
				|                    ClArrayList1.Add(ValueFactory.Create("""" + ((p4) ? str1.Substring(Position1 + p2.Length) : str1.Substring(Position1))));
				|                    str1 = str1.Substring(Position1 + 1);
				|                    Position1 = str1.IndexOf(p2);
				|                }
				|            }
				|            else if (p2 == null && p3 != null)
				|            {
				|                Position1 = str1.IndexOf(p3) + 1;
				|                int SumPosition1 = Position1;
				|                while (Position1 > 0)
				|                {
				|                    ClArrayList1.Add(ValueFactory.Create("""" + ((p4) ? str1.Substring(0, SumPosition1 - 1) : str1.Substring(0, SumPosition1 - 1 + p3.Length))));
				|                    try
				|                    {
				|                        Position1 = str1.Substring(SumPosition1 + 1).IndexOf(p3) + 1;
				|                        SumPosition1 = SumPosition1 + Position1 + 1;
				|                    }
				|                    catch
				|                    {
				|                        break;
				|                    }
				|                }
				|            }
				|            else if (p2 != null && p3 != null)
				|            {
				|                Position1 = str1.IndexOf(p2);
				|                while (Position1 >= 0)
				|                {
				|                    string Стр2;
				|                    Стр2 = (p4) ? str1.Substring(Position1 + p2.Length) : str1.Substring(Position1);
				|                    int Position2 = Стр2.IndexOf(p3) + 1;
				|                    int SumPosition2 = Position2;
				|                    while (Position2 > 0)
				|                    {
				|                        if (p5)
				|                        {
				|                            if (Стр2.Substring(0, SumPosition2 - 1).IndexOf(p3) <= -1)
				|                            {
				|                                ClArrayList1.Add(ValueFactory.Create("""" + ((p4) ? Стр2.Substring(0, SumPosition2 - 1) : Стр2.Substring(0, SumPosition2 - 1 + p3.Length))));
				|                            }
				|                        }
				|                        else
				|                        {
				|                            ClArrayList1.Add(ValueFactory.Create("""" + ((p4) ? Стр2.Substring(0, SumPosition2 - 1) : Стр2.Substring(0, SumPosition2 - 1 + p3.Length))));
				|                        }
				|                        try
				|                        {
				|                            Position2 = Стр2.Substring(SumPosition2 + 1).IndexOf(p3) + 1;
				|                            SumPosition2 = SumPosition2 + Position2 + 1;
				|                        }
				|                        catch
				|                        {
				|                            break;
				|
				|                        }
				|                    }
				|                    str1 = str1.Substring(Position1 + 1);
				|                    Position1 = str1.IndexOf(p2);
				|                }
				|            }
				|            return ClArrayList1;
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "КнопкаПанелиИнструментов") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""КнопкаПанелиИнструментов"", ""ToolBarButton"")]
				|        public ClToolBarButton ToolBarButton(string p1 = null)
				|        {
				|            return new ClToolBarButton(p1);
				|        }
				|
				|";
			ИначеЕсли МетодРус = "УстановитьСтиль" Тогда
				Стр = Стр +
				"        [ContextMethod(""УстановитьСтиль"", ""SetStyle"")]
				|        public void SetStyle(int p1, bool p2)
				|        {
				|            Base_obj.SetStyle((System.Windows.Forms.ControlStyles)p1, p2);
				|        }
				|
				|";
			ИначеЕсли МетодРус = "ПолучитьСтиль" Тогда
				Стр = Стр +
				"        [ContextMethod(""ПолучитьСтиль"", ""GetStyle"")]
				|        public bool GetStyle(int p1)
				|        {
				|            return Base_obj.GetStyle((System.Windows.Forms.ControlStyles)p1);
				|        }
				|
				|";
			ИначеЕсли МетодРус = "ПередатьУправление" Тогда
				Стр = Стр +
				"        [ContextMethod(""ПередатьУправление"", ""EventControlTransfer"")]
				|        public void EventControlTransfer()
				|        {
				|            System.Windows.Forms.Application.DoEvents();
				|        }
				|
				|";
			ИначеЕсли (МетодРус = "Действие") и (ИмяКонтекстКлассаАнгл = "OneScriptForms") Тогда
				Стр = Стр +
				"        [ContextMethod(""Действие"", ""Action"")]
				|        public ClAction Action(IRuntimeContextInstance script, string methodName, IValue param = null)
				|        {
				|            return new ClAction(script, methodName, param);
				|        }
				|
				|";
				
				
				
				
			
			
			
			Иначе
				ИмяФайлаМетода = КаталогСправки + "\" + СтрНайтиМежду(СтрХ, "<A href=""", """>", , )[0];
				ТекстДокМетода = Новый ТекстовыйДокумент;
				ТекстДокМетода.Прочитать(ИмяФайлаМетода);
				СтрТекстДокМетода = ТекстДокМетода.ПолучитьТекст();
				// Сообщить("===================================================");
				// Сообщить("ИмяФайлаМетода = " + ИмяФайлаМетода);
				// Сообщить("СтрТекстДокМетода = " + СтрТекстДокМетода);
				СтрРаздела = СтрНайтиМежду(СтрТекстДокМетода, "<H4 class=dtH4>Параметры</H4>", "<H4 class=dtH4>Возвращаемое значение</H4>", , )[0];
				// <H4 class=dtH4>Параметры</H4>
				// <DL>
				// <DT><I>ИмяФайла</I> (обязательный)</DT>
				// <DD>Тип: Строка.</DD>
				// <DD>Строка, содержащая имя файла для сохранения этого объекта <A href="OneScriptForms.Image.html">Изображение&nbsp;(Image)</A>.</DD>
				
				// <DT><I>Формат</I> (необязательный)</DT>
				// <DD>Тип: <A href="OneScriptForms.ImageFormat.html">ФорматИзображения&nbsp;(ImageFormat)</A>.</DD>
				// <DD>Объект <A href="OneScriptForms.ImageFormat.html">ФорматИзображения&nbsp;(ImageFormat)</A> для этого 
				// объекта <A href="OneScriptForms.Image.html">Изображение&nbsp;(Image)</A>.</DD></DL>
				// <H4 class=dtH4>Возвращаемое значение</H4>
				М06 = СтрНайтиМежду(СтрРаздела, "<DT><I>", "</DD>", Ложь, );//Строка содержит параметр и тип параметра
				СтрПараметровВСкобках = "(";
				СтрПараметровВСкобках2 = "(";
				Для А01 = 0 По М06.ВГраница() Цикл
					М10 = СтрНайтиМежду(М06[А01], "<DD>", "</DD>", , );//Строка содержит тип параметра
					// Тип: Строка.
					// Тип: Число.
					// Тип: Булево.
					// Тип: Дата.
					// Тип: Произвольный.
					// Тип: Массив.
					// Тип: Строка; <A href="OneScriptForms.ColumnHeader.html">Колонка&nbsp;(ColumnHeader)</A>.
					// Тип: Строка; Число.
					// Тип: Строка; Число; <A href="OneScriptForms.DataColumn.html">КолонкаДанных&nbsp;(DataColumn)</A>.
					ТипПараметраВСкобках = "хххх";
					Если М10.Количество() > 0 Тогда
						// Сообщить("" + М10[0]);
						М11 = СтрНайтиМежду(М06[А01], "(", ")", , );
						Если М11.Количество() > 1 Тогда
							ТипПараметраВСкобках = "Cl" + М11[1];
							// если ТипПараметраВСкобках является перечислением, меняем его на int
							Если ИменаКалассовПеречислений.НайтиПоЗначению(ТипПараметраВСкобках) = Неопределено Тогда
							Иначе
								ТипПараметраВСкобках = "int";
							КонецЕсли;
						Иначе
							Если М10[0] = "Тип: Строка." Тогда
								ТипПараметраВСкобках = "string";
							ИначеЕсли М10[0] = "Тип: Число." Тогда
								ТипПараметраВСкобках = "int";
							ИначеЕсли М10[0] = "Тип: Булево." Тогда
								ТипПараметраВСкобках = "bool";
							ИначеЕсли М10[0] = "Тип: Дата." Тогда
								ТипПараметраВСкобках = "DateTime";	
							ИначеЕсли М10[0] = "Тип: Произвольный." Тогда
								ТипПараметраВСкобках = "IValue";
							ИначеЕсли М10[0] = "Тип: Массив." Тогда
								ТипПараметраВСкобках = "dynamic";	
							ИначеЕсли СтрНайти(М10[0], ";") > 0 Тогда
								ТипПараметраВСкобках = "dynamic";
							Иначе
								Сообщить("Не хватает типа " + М10[0]);
								ЗавершитьРаботу(5);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если А01 = М06.ВГраница() Тогда
						Если СтрНайти(ТипПараметраВСкобках, "Cl") > 0 Тогда
							СтрПараметровВСкобках = СтрПараметровВСкобках + ТипПараметраВСкобках + " p" + Строка(А01 + 1);
							СтрПараметровВСкобках2 = СтрПараметровВСкобках2 + "p" + Строка(А01 + 1) + ".Base_obj";
						Иначе
							СтрПараметровВСкобках = СтрПараметровВСкобках + ТипПараметраВСкобках + " p" + Строка(А01 + 1);
							СтрПараметровВСкобках2 = СтрПараметровВСкобках2 + "p" + Строка(А01 + 1);
						КонецЕсли;
					Иначе
						Если СтрНайти(ТипПараметраВСкобках, "Cl") > 0 Тогда
							СтрПараметровВСкобках = СтрПараметровВСкобках + ТипПараметраВСкобках + " p" + Строка(А01 + 1) + ", ";
							СтрПараметровВСкобках2 = СтрПараметровВСкобках2 + "p" + Строка(А01 + 1) + ".Base_obj, ";
						Иначе
							СтрПараметровВСкобках = СтрПараметровВСкобках + ТипПараметраВСкобках + " p" + Строка(А01 + 1) + ", ";
							СтрПараметровВСкобках2 = СтрПараметровВСкобках2 + "p" + Строка(А01 + 1) + ", ";
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				СтрПараметровВСкобках =СтрПараметровВСкобках + ")";
				СтрПараметровВСкобках2 =СтрПараметровВСкобках2 + ")";
				
				//найдем возвращаемое методом значение
				ВозвращаемоеМетодомЗначение = СтрНайтиМежду(СтрТекстДокМетода, "<H4 class=dtH4>Возвращаемое значение</H4>", "<H4 class=dtH4>Описание</H4>", , )[0];
				ВозвращаемоеМетодомЗначение = СтрНайтиМежду(ВозвращаемоеМетодомЗначение, "<P>", "</P>", , )[0];
				// Сообщить("" + МетодАнгл + " == " + ВозвращаемоеМетодомЗначение);
				// Сообщить("" + ВозвращаемоеМетодомЗначение);
				// Тип: Строка.
				// Тип: Число.
				// Тип: Булево.
				// Тип: Дата.
				// Тип: Произвольный.
				// Тип: <A href="OneScriptForms.Application.html">Приложение&nbsp;(Application)</A>.
				Комментарий = "//";
				Ретён = "return Base_obj." + МетодАнгл;
				Если СтрНайтиМежду(ВозвращаемоеМетодомЗначение, "(", ")", , ).Количество() > 0 Тогда // это класс
					ВозвращаемоеМетодомЗначение = "Cl" + СтрНайтиМежду(ВозвращаемоеМетодомЗначение, "(", ")", , )[0];
					Ретён = "return new " + ВозвращаемоеМетодомЗначение;
					//раскомментим если ВозвращаемоеМетодомЗначение равно
					Если (ВозвращаемоеМетодомЗначение = "ClPoint") или 
						(ВозвращаемоеМетодомЗначение = "ClForm") или 
						(ВозвращаемоеМетодомЗначение = "ClScreen") или 
						(ВозвращаемоеМетодомЗначение = "ClHashTable") или 
						(ВозвращаемоеМетодомЗначение = "ClCheckBox") или 
						(ВозвращаемоеМетодомЗначение = "ClDataGridComboBoxColumnStyle") или 
						(ВозвращаемоеМетодомЗначение = "ClRichTextBox") или 
						(ВозвращаемоеМетодомЗначение = "ClDataGridBoolColumn") или 
						(ВозвращаемоеМетодомЗначение = "ClNumericUpDown") или 
						(ВозвращаемоеМетодомЗначение = "ClGroupBox") или 
						(ВозвращаемоеМетодомЗначение = "ClSplitter") или 
						(ВозвращаемоеМетодомЗначение = "ClHatchBrush") или 
						(ВозвращаемоеМетодомЗначение = "ClTextureBrush") или 
						(ВозвращаемоеМетодомЗначение = "ClApplication") или 
						(ВозвращаемоеМетодомЗначение = "ClStreamReader") или 
						(ВозвращаемоеМетодомЗначение = "ClUserControl") или 
						(ВозвращаемоеМетодомЗначение = "ClDataView") или 
						(ВозвращаемоеМетодомЗначение = "ClDateTimePicker") или 
						(ВозвращаемоеМетодомЗначение = "ClComboBox") или 
						(ВозвращаемоеМетодомЗначение = "ClToolTip") или 
						(ВозвращаемоеМетодомЗначение = "ClRadioButton") или 
						(ВозвращаемоеМетодомЗначение = "ClStatusBarPanel") или 
						(ВозвращаемоеМетодомЗначение = "ClStatusBar") или 
						(ВозвращаемоеМетодомЗначение = "ClInputBox") или 
						(ВозвращаемоеМетодомЗначение = "ClLinkArea") или 
						(ВозвращаемоеМетодомЗначение = "ClDataSet") или 
						(ВозвращаемоеМетодомЗначение = "ClFileSystemWatcher") или 
						(ВозвращаемоеМетодомЗначение = "ClSortedList") или 
						(ВозвращаемоеМетодомЗначение = "ClMath") или 
						(ВозвращаемоеМетодомЗначение = "ClDataGridTextBoxColumn") или 
						(ВозвращаемоеМетодомЗначение = "ClDataGridTextBox") или 
						(ВозвращаемоеМетодомЗначение = "ClDataGridTableStyle") или 
						(ВозвращаемоеМетодомЗначение = "ClDataGrid") или 
						(ВозвращаемоеМетодомЗначение = "ClDataColumn") или 
						(ВозвращаемоеМетодомЗначение = "ClSolidBrush") или 
						(ВозвращаемоеМетодомЗначение = "ClRectangle") или 
						(ВозвращаемоеМетодомЗначение = "ClProgressBar") или 
						(ВозвращаемоеМетодомЗначение = "ClLinkLabel") или 
						(ВозвращаемоеМетодомЗначение = "ClLink") или 
						(ВозвращаемоеМетодомЗначение = "ClColor") или 
						(ВозвращаемоеМетодомЗначение = "ClPictureBox") или 
						(ВозвращаемоеМетодомЗначение = "ClImageFormat") или 
						(ВозвращаемоеМетодомЗначение = "ClMainMenu") или 
						(ВозвращаемоеМетодомЗначение = "ClMessageBox") или 
						(ВозвращаемоеМетодомЗначение = "ClClipboard") или 
						(ВозвращаемоеМетодомЗначение = "ClEnvironment") или 
						(ВозвращаемоеМетодомЗначение = "ClVScrollBar") или 
						(ВозвращаемоеМетодомЗначение = "ClHScrollBar") или 
						(ВозвращаемоеМетодомЗначение = "ClLabel") или 
						(ВозвращаемоеМетодомЗначение = "ClPanel") или 
						(ВозвращаемоеМетодомЗначение = "ClTabControl") или 
						(ВозвращаемоеМетодомЗначение = "ClImageList") или 
						(ВозвращаемоеМетодомЗначение = "ClListBox") или 
						(ВозвращаемоеМетодомЗначение = "ClListView") или 
						(ВозвращаемоеМетодомЗначение = "ClPropertyGrid") или 
						(ВозвращаемоеМетодомЗначение = "ClTextBox") или 
						(ВозвращаемоеМетодомЗначение = "ClMonthCalendar") или 
						(ВозвращаемоеМетодомЗначение = "ClProcess") или 
						(ВозвращаемоеМетодомЗначение = "ClTreeView") или 
						(ВозвращаемоеМетодомЗначение = "ClFolderBrowserDialog") или 
						(ВозвращаемоеМетодомЗначение = "ClTimer") или 
						(ВозвращаемоеМетодомЗначение = "ClColorDialog") или 
						(ВозвращаемоеМетодомЗначение = "ClFontDialog") или 
						(ВозвращаемоеМетодомЗначение = "ClOpenFileDialog") или 
						(ВозвращаемоеМетодомЗначение = "ClSaveFileDialog") или 
						(ВозвращаемоеМетодомЗначение = "ClType") или 
						(ВозвращаемоеМетодомЗначение = "ClBitmap") или 
						(ВозвращаемоеМетодомЗначение = "ClButton") или 
						(ВозвращаемоеМетодомЗначение = "ClCollection") или 
						(ВозвращаемоеМетодомЗначение = "ClEncoding") или 
						(ВозвращаемоеМетодомЗначение = "ClContextMenu") или 
						(ВозвращаемоеМетодомЗначение = "ClToolBar") или 
						(ВозвращаемоеМетодомЗначение = "ClCursor") или 
						(ВозвращаемоеМетодомЗначение = "ClStream") или 
						(ВозвращаемоеМетодомЗначение = "ClSound") или 
						(ВозвращаемоеМетодомЗначение = "ClSize") или 
						(ВозвращаемоеМетодомЗначение = "ClToolBarButton") или 
						(ВозвращаемоеМетодомЗначение = "ClCursors") или 
						(ВозвращаемоеМетодомЗначение = "ClDictionaryEntry") или 
						
						(ВозвращаемоеМетодомЗначение = "ClGraphics") Тогда
						Комментарий = "";
					КонецЕсли;
				ИначеЕсли ВозвращаемоеМетодомЗначение = "Тип: Строка." Тогда
					ВозвращаемоеМетодомЗначение = "string";
					Комментарий = "";
				ИначеЕсли ВозвращаемоеМетодомЗначение = "Тип: Число." Тогда
					ВозвращаемоеМетодомЗначение = "int";
					Комментарий = "";
				ИначеЕсли ВозвращаемоеМетодомЗначение = "Тип: Булево." Тогда
					ВозвращаемоеМетодомЗначение = "bool";
					Комментарий = "";
				ИначеЕсли ВозвращаемоеМетодомЗначение = "Тип: Дата." Тогда
					ВозвращаемоеМетодомЗначение = "DateTime";
					Комментарий = "";
				ИначеЕсли ВозвращаемоеМетодомЗначение = "Тип: Произвольный." Тогда
					ВозвращаемоеМетодомЗначение = "IValue";
				ИначеЕсли СтрНайти(ВозвращаемоеМетодомЗначение,";") > 0 Тогда
					ВозвращаемоеМетодомЗначение = "dynamic";
				ИначеЕсли СокрЛП(ВозвращаемоеМетодомЗначение) = "" Тогда
					ВозвращаемоеМетодомЗначение = "void";
					Комментарий = "";
				Иначе
					Сообщить("Не хватает ВозвращаемоеМетодомЗначение " + М10[0]);
					ЗавершитьРаботу(4);
				КонецЕсли;
			
				Если ВозвращаемоеМетодомЗначение = "void" Тогда
					Если СтрПараметровВСкобках = "()" Тогда
						// [ContextMethod("ЗавершитьОбновление", "EndUpdate")]
						// public void EndUpdate()
						// {
						//	   Base_obj.EndUpdate();
						// }
						СтрХвост = 
						"        " + Комментарий + "[ContextMethod(""" + МетодРус + """, """ + МетодАнгл + """)]
						|        " + Комментарий + "public void " + МетодАнгл + "()
						|        " + Комментарий + "{
						|        " + Комментарий + "    Base_obj." + МетодАнгл + "();
						|        " + Комментарий + "}
						|					
						|";
						// Сообщить("СтрХвост = " + СтрХвост);
						Стр = Стр + СтрХвост;
					Иначе
						// [ContextMethod("ЗагрузитьФайл", "LoadFile")]
						// public void LoadFile(string p1, ClRichTextBoxStreamType p2)
						// {
						// 	Base_obj.LoadFile(p1, p2.Base_obj);
						// }
						СтрХвост = 
						"        " + Комментарий + "[ContextMethod(""" + МетодРус + """, """ + МетодАнгл + """)]
						|        " + Комментарий + "public void " + МетодАнгл + СтрПараметровВСкобках + "
						|        " + Комментарий + "{
						|        " + Комментарий + "    Base_obj." + МетодАнгл + СтрПараметровВСкобках2 + ";
						|        " + Комментарий + "}" + Символы.ПС +Символы.ПС;
						// Сообщить("СтрХвост = " + СтрХвост);
						Стр = Стр + СтрХвост;
					КонецЕсли;
				ИначеЕсли ВозвращаемоеМетодомЗначение = "string" или 
					ВозвращаемоеМетодомЗначение = "int" или 
					ВозвращаемоеМетодомЗначение = "bool" или 
					ВозвращаемоеМетодомЗначение = "DateTime" Тогда // это простые типы
					Если СтрПараметровВСкобках = "()" Тогда
						// [ContextMethod("ПрочитатьДоКонца", "ReadToEnd")]
						// public string ReadToEnd()
						// {
						// 		return Base_obj.ReadToEnd();
						// }					
						СтрХвост = 
						"        " + Комментарий + "[ContextMethod(""" + МетодРус + """, """ + МетодАнгл + """)]
						|        " + Комментарий + "public " + ВозвращаемоеМетодомЗначение + " " + МетодАнгл + "()
						|        " + Комментарий + "{
						|        " + Комментарий + "    " + Ретён + СтрПараметровВСкобках2 + ";
						|        " + Комментарий + "}" + Символы.ПС +Символы.ПС;
						// Сообщить("СтрХвост = " + СтрХвост);
						Стр = Стр + СтрХвост;
					Иначе
						// [ContextMethod("Найти", "Seek")]
						// public int Seek(int p1, int p2)
						// {
						// 	return Base_obj.Seek(p1, p2);
						// }
						СтрХвост = 
						"        " + Комментарий + "[ContextMethod(""" + МетодРус + """, """ + МетодАнгл + """)]
						|        " + Комментарий + "public " + ВозвращаемоеМетодомЗначение + " " + МетодАнгл + СтрПараметровВСкобках + "
						|        " + Комментарий + "{
						|        " + Комментарий + "    " + Ретён + СтрПараметровВСкобках2 + ";
						|        " + Комментарий + "}" + Символы.ПС +Символы.ПС;
						// Сообщить("СтрХвост = " + СтрХвост);
						Стр = Стр + СтрХвост;
					КонецЕсли;
				ИначеЕсли СтрНайти(ВозвращаемоеМетодомЗначение, "Cl") > 0 Тогда // это класс
					Если СтрПараметровВСкобках = "()" Тогда
						// [ContextMethod("Форма", "Form")]
						// public ClForm Form()
						// {
						// 	return new ClForm();
						// }
						СтрХвост = 
						"        " + Комментарий + "[ContextMethod(""" + МетодРус + """, """ + МетодАнгл + """)]
						|        " + Комментарий + "public " + ВозвращаемоеМетодомЗначение + " " + МетодАнгл + "()
						|        " + Комментарий + "{
						|        " + Комментарий + "    " + Ретён + "();
						|        " + Комментарий + "}" + Символы.ПС +Символы.ПС;
						// Сообщить("СтрХвост = " + СтрХвост);
						Стр = Стр + СтрХвост;
					Иначе
						//[ContextMethod("Вставить", "Insert")]
						//public ClListViewItem Insert(int p1, ClListViewItem p2)
						//{
						//    return new ClListViewItem(p1, p2.Base_obj);
						//}						
						СтрХвост = 
						"        " + Комментарий + "[ContextMethod(""" + МетодРус + """, """ + МетодАнгл + """)]
						|        " + Комментарий + "public " + ВозвращаемоеМетодомЗначение + " " + МетодАнгл + СтрПараметровВСкобках + "
						|        " + Комментарий + "{
						|        " + Комментарий + "    " + Ретён + СтрПараметровВСкобках2 + ";
						|        " + Комментарий + "}" + Символы.ПС +Символы.ПС;
						// Сообщить("СтрХвост = " + СтрХвост);
						Стр = Стр + СтрХвост;
					КонецЕсли;
				Иначе // до сюда не должны дойти, все варианты учтены
					Стр = Стр + 
					"        " + Комментарий + "[ContextMethod(""" + МетодРус + """, """ + МетодАнгл + """)]" + Символы.ПС +
					"        " + Комментарий + "public void " + МетодАнгл + "()" + Символы.ПС +
					"        " + Комментарий + "{" + Символы.ПС;
					Если Не (ВозвращаемоеМетодомЗначение = "void") Тогда
						Стр = Стр + 
						"        " + Комментарий + "    " + Ретён + СтрПараметровВСкобках2 + ";" + Символы.ПС;
					Иначе
						Стр = Стр + 
						"        " + Комментарий + "    Base_obj." + МетодАнгл + СтрПараметровВСкобках2 + ";" + Символы.ПС;
					КонецЕсли;
					Стр = Стр + 
					"        " + Комментарий + "}" + Символы.ПС +Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЦикла;
	Иначе
		Стр = 
		"        //Методы============================================================" + Символы.ПС;
	КонецЕсли;
	
	
	Возврат Стр;
КонецФункции//Методы

Функция Подвал()
	Стр = 
	"    }//endClass";
	Возврат Стр;
КонецФункции

Функция СтрНайтиМежду(СтрПараметр, Фрагмент1 = Неопределено, Фрагмент2 = Неопределено, ИсключитьФрагменты = Истина, БезНаложения = Истина)
	//Стр - исходная строка
	//Фрагмент1 - подстрока поиска от которой ведем поиск
	//Фрагмент2 - подстрока поиска до которой ведем поиск
	//ИсключитьФрагменты - не включать Фрагмент1 и Фрагмент2 в результат
	//БезНаложения - в результат не будут включены участки, содержащие другие найденные участки, удовлетворяющие переданным параметрам
	//функция возвращает массив строк
	Стр = СтрПараметр;
	М = Новый Массив;
	Если (Фрагмент1 <> Неопределено) и (Фрагмент2 = Неопределено) Тогда
		Позиция = Найти(Стр, Фрагмент1);
		Пока Позиция > 0 Цикл
			М.Добавить(?(ИсключитьФрагменты, Сред(Стр, Позиция + СтрДлина(Фрагмент1)), Сред(Стр, Позиция)));
			Стр = Сред(Стр, Позиция + 1);
			Позиция = Найти(Стр, Фрагмент1);
		КонецЦикла;
	ИначеЕсли (Фрагмент1 = Неопределено) и (Фрагмент2 <> Неопределено) Тогда
		Позиция = Найти(Стр, Фрагмент2);
		СуммаПозиций = Позиция;
		Пока Позиция > 0 Цикл
			М.Добавить(?(ИсключитьФрагменты, Сред(Стр, 1, СуммаПозиций - 1), Сред(Стр, 1, СуммаПозиций - 1 + СтрДлина(Фрагмент2))));
			Позиция = Найти(Сред(Стр, СуммаПозиций + 1), Фрагмент2);
			СуммаПозиций = СуммаПозиций + Позиция;
		КонецЦикла;
	ИначеЕсли (Фрагмент1 <> Неопределено) и (Фрагмент2 <> Неопределено) Тогда
		Позиция = Найти(Стр, Фрагмент1);
		Пока Позиция > 0 Цикл
			Стр2 = ?(ИсключитьФрагменты, Сред(Стр, Позиция + СтрДлина(Фрагмент1)), Сред(Стр, Позиция));
			Позиция2 = Найти(Стр2, Фрагмент2);
			СуммаПозиций2 = Позиция2;
			Пока Позиция2 > 0 Цикл
				Если БезНаложения Тогда
					Если Найти(Сред(Стр2, 1, СуммаПозиций2 - 1), Фрагмент2) = 0 Тогда
						М.Добавить("" + ?(ИсключитьФрагменты, Сред(Стр2, 1, СуммаПозиций2 - 1), Сред(Стр2, 1, СуммаПозиций2 - 1 + СтрДлина(Фрагмент2))));
					КонецЕсли;
				Иначе
					М.Добавить("" + ?(ИсключитьФрагменты, Сред(Стр2, 1, СуммаПозиций2 - 1), Сред(Стр2, 1, СуммаПозиций2 - 1 + СтрДлина(Фрагмент2))));
				КонецЕсли;
				Позиция2 = Найти(Сред(Стр2, СуммаПозиций2 + 1), Фрагмент2);
				СуммаПозиций2 = СуммаПозиций2 + Позиция2;
			КонецЦикла;
			Стр = Сред(Стр, Позиция + 1);
			Позиция = Найти(Стр, Фрагмент1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат М;
КонецФункции//СтрНайтиМежду

Процедура ВыгрузкаДляCS()
	Таймер = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ИменаКалассовПеречислений = Новый СписокЗначений;
	ОтобранныеПеречисления = ОтобратьФайлы("Перечисление");
	Для А = 0 По ОтобранныеПеречисления.ВГраница() Цикл
		СтрКлассПеречисления = "" + ОтобранныеПеречисления[А];
		СтрКлассПеречисления = СтрЗаменить(СтрКлассПеречисления, КаталогСправки + "\OneScriptForms.", "Cl");
		СтрКлассПеречисления = СтрЗаменить(СтрКлассПеречисления, ".html", "");
		ИменаКалассовПеречислений.Добавить(СтрКлассПеречисления);
	КонецЦикла;
	// Сообщить("Количество = " + ИменаКалассовПеречислений.Количество());
	// Для А = 0 По ИменаКалассовПеречислений.Количество() - 1 Цикл
		// Сообщить("" + ИменаКалассовПеречислений.Получить(А).Значение);
	// КонецЦикла;
	
	УдалитьФайлы(КаталогВыгрузки, "*.cs");
	
	СоздатьФайлCs("ButtonBase");
	СоздатьФайлCs("Button");
	СоздатьФайлCs("Component");
	СоздатьФайлCs("ContainerControl");
	СоздатьФайлCs("ScrollableControl");
	СоздатьФайлCs("Control");
	СоздатьФайлCs("Form");
	СоздатьФайлCs("Color");
	СоздатьФайлCs("Point");
	СоздатьФайлCs("Size");
	СоздатьФайлCs("EventArgs");
	СоздатьФайлCs("Font");
	СоздатьФайлCs("Version");
	СоздатьФайлCs("Rectangle");
	СоздатьФайлCs("Cursor");
	СоздатьФайлCs("Image");
	СоздатьФайлCs("ImageFormat");
	СоздатьФайлCs("Stream");
	СоздатьФайлCs("MouseEventArgs");
	СоздатьФайлCs("DockPaddingEdges");
	СоздатьФайлCs("CollectionBase");
	СоздатьФайлCs("ControlCollection");
	СоздатьФайлCs("CancelEventArgs");
	СоздатьФайлCs("FileSystemEventArgs");
	СоздатьФайлCs("ColumnClickEventArgs");
	СоздатьФайлCs("LinkLabelLinkClickedEventArgs");
	СоздатьФайлCs("ToolBarButtonClickEventArgs");
	СоздатьФайлCs("PropertyValueChangedEventArgs");
	СоздатьФайлCs("TreeViewCancelEventArgs");
	СоздатьФайлCs("TreeViewEventArgs");
	СоздатьФайлCs("NodeLabelEditEventArgs");
	СоздатьФайлCs("PaintEventArgs");
	СоздатьФайлCs("ControlEventArgs");
	СоздатьФайлCs("SelectedGridItemChangedEventArgs");
	СоздатьФайлCs("ScrollEventArgs");
	СоздатьФайлCs("LinkClickedEventArgs");
	СоздатьФайлCs("RenamedEventArgs");
	СоздатьФайлCs("LabelEditEventArgs");
	СоздатьФайлCs("KeyPressEventArgs");
	СоздатьФайлCs("KeyEventArgs");
	СоздатьФайлCs("ItemCheckEventArgs");
	СоздатьФайлCs("Sound");
	СоздатьФайлCs("FormClosingEventArgs");
	СоздатьФайлCs("Collection");
	СоздатьФайлCs("Graphics");
	СоздатьФайлCs("Brush");
	СоздатьФайлCs("SolidBrush");
	СоздатьФайлCs("Pen");
	СоздатьФайлCs("Type");
	СоздатьФайлCs("Icon");
	СоздатьФайлCs("Bitmap");
	СоздатьФайлCs("PictureBox");
	СоздатьФайлCs("ArrayList");
	СоздатьФайлCs("Menu");
	СоздатьФайлCs("MainMenu");
	СоздатьФайлCs("ContextMenu");
	СоздатьФайлCs("MenuItem");
	СоздатьФайлCs("MenuItemCollection");
	СоздатьФайлCs("Environment");
	СоздатьФайлCs("ScrollBar");
	СоздатьФайлCs("VScrollBar");
	СоздатьФайлCs("HScrollBar");
	СоздатьФайлCs("Label");
	СоздатьФайлCs("Panel");
	СоздатьФайлCs("TabPageCollection");
	СоздатьФайлCs("TabPage");
	СоздатьФайлCs("TabControl");
	СоздатьФайлCs("ImageCollection");
	СоздатьФайлCs("ImageList");
	СоздатьФайлCs("Stream");
	СоздатьФайлCs("StreamReader");
	СоздатьФайлCs("ListControl");
	СоздатьФайлCs("ListBox");
	СоздатьФайлCs("ListItem");
	СоздатьФайлCs("ListBoxObjectCollection");
	СоздатьФайлCs("ListBoxSelectedObjectCollection");
	СоздатьФайлCs("ListBoxSelectedIndexCollection");
	СоздатьФайлCs("DataRowView");
	СоздатьФайлCs("ListView");
	СоздатьФайлCs("ListViewCheckedItemCollection");
	СоздатьФайлCs("ListViewColumnHeaderCollection");
	СоздатьФайлCs("ListViewItem");
	СоздатьФайлCs("ListViewItemCollection");
	СоздатьФайлCs("ListViewSelectedItemCollection");
	СоздатьФайлCs("ListViewSubItem");
	СоздатьФайлCs("ListViewSubItemCollection");
	СоздатьФайлCs("ColumnHeader");
	СоздатьФайлCs("GridItemCollection");
	СоздатьФайлCs("GridItem");
	СоздатьФайлCs("PropertyGrid");
	СоздатьФайлCs("TextBoxBase");
	СоздатьФайлCs("TextBox");
	СоздатьФайлCs("ProcessStartInfo");
	СоздатьФайлCs("Process");
	СоздатьФайлCs("SelectionRange");
	СоздатьФайлCs("MonthCalendar");
	СоздатьФайлCs("ExtractIconClass");
	СоздатьФайлCs("TreeView");
	СоздатьФайлCs("TreeNode");
	СоздатьФайлCs("TreeNodeCollection");
	СоздатьФайлCs("CommonDialog");
	СоздатьФайлCs("FolderBrowserDialog");
	СоздатьФайлCs("Timer");
	СоздатьФайлCs("ColorDialog");
	СоздатьФайлCs("FontDialog");
	СоздатьФайлCs("FileDialog");
	СоздатьФайлCs("OpenFileDialog");
	СоздатьФайлCs("SaveFileDialog");
	СоздатьФайлCs("NotifyIcon");
	СоздатьФайлCs("UserControl");
	СоздатьФайлCs("MessageBox");
	СоздатьФайлCs("ProgressBar");
	СоздатьФайлCs("ToolBarButtonCollection");
	СоздатьФайлCs("ToolBar");
	СоздатьФайлCs("ToolBarButton");
	СоздатьФайлCs("Encoding");
	СоздатьФайлCs("LinkCollection");
	СоздатьФайлCs("LinkLabel");
	СоздатьФайлCs("LinkArea");
	СоздатьФайлCs("Link");
	СоздатьФайлCs("DataColumn");
	СоздатьФайлCs("DataColumnCollection");
	СоздатьФайлCs("DataTableCollection");
	СоздатьФайлCs("DataTable");
	СоздатьФайлCs("DataSet");
	СоздатьФайлCs("DataView");
	СоздатьФайлCs("DataRow");
	СоздатьФайлCs("DataRowCollection");
	СоздатьФайлCs("DataItem");
	СоздатьФайлCs("DataGrid");
	СоздатьФайлCs("DataGridCell");
	СоздатьФайлCs("GridTableStylesCollection");
	СоздатьФайлCs("DataGridTableStyle");
	СоздатьФайлCs("DataGridColumnStyle");
	СоздатьФайлCs("GridColumnStylesCollection");
	СоздатьФайлCs("DataGridTextBox");
	СоздатьФайлCs("DataGridTextBoxColumn");
	СоздатьФайлCs("Cursors");
	СоздатьФайлCs("DictionaryEntry");
	СоздатьФайлCs("SortedList");
	СоздатьФайлCs("FileSystemWatcher");
	СоздатьФайлCs("StatusBar");
	СоздатьФайлCs("StatusBarPanel");
	СоздатьФайлCs("StatusBarPanelCollection");
	СоздатьФайлCs("RadioButton");
	СоздатьФайлCs("ToolTip");
	СоздатьФайлCs("ComboBox");
	СоздатьФайлCs("ComboBoxObjectCollection");
	СоздатьФайлCs("DateTimePicker");
	СоздатьФайлCs("Application");
	СоздатьФайлCs("HatchBrush");
	СоздатьФайлCs("TextureBrush");
	СоздатьФайлCs("Splitter");
	СоздатьФайлCs("GroupBox");
	СоздатьФайлCs("NumericUpDown");
	СоздатьФайлCs("UpDownBase");
	СоздатьФайлCs("DataGridBoolColumn");
	СоздатьФайлCs("BitmapData");
	СоздатьФайлCs("RichTextBox");
	СоздатьФайлCs("DataGridComboBoxColumnStyle");
	СоздатьФайлCs("CheckBox");
	СоздатьФайлCs("HashTable");
	СоздатьФайлCs("Screen");
	СоздатьФайлCs("FormsCollection");
	СоздатьФайлCs("DataGridView");
	СоздатьФайлCs("DataGridViewElement");
	СоздатьФайлCs("DataGridViewCell");
	СоздатьФайлCs("DataGridViewColumnCollection");
	СоздатьФайлCs("DataGridViewBand");
	СоздатьФайлCs("DataGridViewColumn");
	СоздатьФайлCs("DataGridViewButtonCell");
	СоздатьФайлCs("DataGridViewButtonColumn");
	СоздатьФайлCs("DataGridViewCellCollection");
	СоздатьФайлCs("DataGridViewCheckBoxCell");
	СоздатьФайлCs("DataGridViewCheckBoxColumn");
	СоздатьФайлCs("DataGridViewHeaderCell");
	СоздатьФайлCs("DataGridViewColumnHeaderCell");
	СоздатьФайлCs("DataGridViewComboBoxCell");
	СоздатьФайлCs("DataGridViewComboBoxColumn");
	СоздатьФайлCs("DataGridViewImageCell");
	СоздатьФайлCs("DataGridViewImageColumn");
	СоздатьФайлCs("DataGridViewLinkCell");
	СоздатьФайлCs("DataGridViewRow");
	СоздатьФайлCs("DataGridViewLinkColumn");
	СоздатьФайлCs("DataGridViewRowHeaderCell");
	СоздатьФайлCs("DataGridViewTextBoxCell");
	СоздатьФайлCs("DataGridViewTextBoxColumn");
	СоздатьФайлCs("DataGridViewRowCollection");
	СоздатьФайлCs("DataGridViewComboBoxCellObjectCollection");
	СоздатьФайлCs("DataGridViewCellEventArgs");
	СоздатьФайлCs("DataGridViewCellMouseEventArgs");
	СоздатьФайлCs("DataGridViewCellCancelEventArgs");
	СоздатьФайлCs("DataGridViewCellStyle");
	СоздатьФайлCs("Padding");
	СоздатьФайлCs("DataGridViewGrouper");
	СоздатьФайлCs("DataGridViewGrouperControl");
	
	
	
	
	
	
	СписокЗамен = Новый СписокЗначений;
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(КаталогСправки + "\OneScriptForms.OneScriptFormsMethods.html");
	Стр = ТекстДок.ПолучитьТекст();
	Массив1 = СтрНайтиМежду(Стр, "<TR vAlign=top>", "</TD></TR>", Ложь, );
	Если Массив1.Количество() > 0 Тогда
		СтрМетодовСистема = "";
		Для А = 0 По Массив1.ВГраница() Цикл
			М07 = СтрНайтиМежду(Массив1[А], "<TD width=""50%"">", "</TD>", Ложь, );
			СтрХ = М07[0];
			СтрХ = СтрЗаменить(СтрХ, "&nbsp;", " ");
			МетодАнгл = СтрНайтиМежду(СтрХ, "(", ")", , )[0];
			МетодРус = СтрНайтиМежду(СтрХ, ".html"">", " (", , )[0];
			Если А = Массив1.ВГраница() Тогда
				СтрМетодовСистема = СтрМетодовСистема + МетодРус + " (" + МетодАнгл + ")";
			Иначе
				СтрМетодовСистема = СтрМетодовСистема + МетодРус + " (" + МетодАнгл + "),";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СписокСтрМетодовСистема = Новый СписокЗначений;
	М15 = РазобратьСтроку(СтрМетодовСистема, ",");
	Для А = 0 По М15.ВГраница() Цикл
		СписокСтрМетодовСистема.Добавить(СтрНайтиМежду(М15[А], "(", ")", , )[0]);
	КонецЦикла;
	// Сообщить("СписокСтрМетодовСистема.Количество = " + СписокСтрМетодовСистема.Количество());
	
	СписокФайлов = Новый СписокЗначений;
	ВыбранныеФайлы = ОтобратьФайлы("Класс");
	Для А = 0 По ВыбранныеФайлы.ВГраница() Цикл
		
		Если ВыбранныеФайлы[А] = "C:\444\OneScriptFormsru\OneScriptForms.FormsCollection.html" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ВыбранныеФайлы[А]);
		Стр = ТекстДок.ПолучитьТекст();
		СтрЗаголовка = СтрНайтиМежду(Стр, "<H1 class=dtH1", "/H1>", , )[0];
		М01 = СтрНайтиМежду(СтрЗаголовка, "(", ")", , );
		Стр33 = СтрЗаголовка;
		Стр33 = СтрЗаменить(Стр33, "&nbsp;", " ");
		Стр33 = СтрЗаменить(Стр33, ">", "");
		М08 = РазобратьСтроку(Стр33, " ");
		
		// КаталогВыгрузки + "\"
		// КаталогВыгрузки + \"
		
		ИмяФайлаВыгрузки = КаталогВыгрузки + "\" + М01[0] + ".cs";
		
		ИмяКонтекстКлассаАнгл = М01[0];
		ИмяКонтекстКлассаРус = М08[0];
		// находим имя файла членов
		ИмяФайлаЧленов = КаталогСправки + "\OneScriptForms." + М01[0] + "Members.html";
		СтрДирективы = Директивы(ИмяКонтекстКлассаАнгл);
		СтрШапка = Шапка(ИмяКонтекстКлассаАнгл, ИмяКонтекстКлассаРус);
		СтрРазделОбъявленияПеременных = РазделОбъявленияПеременных(ИмяФайлаЧленов, М01[0]);
		СтрКонструктор = Конструктор(ИмяФайлаЧленов, М01[0]);
		СтрBase_obj = Base_obj(ИмяКонтекстКлассаАнгл);
		СтрСвойства = Свойства(ИмяФайлаЧленов, ИмяКонтекстКлассаАнгл);
		СтрПеречисленияКакСвойства = ПеречисленияКакСвойства(ИмяФайлаЧленов);
		СтрМетоды = Методы(ИмяФайлаЧленов, ИмяКонтекстКлассаАнгл);
		СтрПодвал = Подвал();
		
		СортироватьСтрРазделОбъявленияПеременных();
		СтрВыгрузки = "";
		СтрВыгрузки = СтрВыгрузки + СтрШапка + Символы.ПС;
		СтрВыгрузки = СтрВыгрузки + СтрРазделОбъявленияПеременных + Символы.ПС;
		СтрВыгрузки = СтрВыгрузки + СтрКонструктор + Символы.ПС;
		СтрВыгрузки = СтрВыгрузки + СтрBase_obj + Символы.ПС;
		СтрВыгрузки = СтрВыгрузки + СтрСвойства;
		СтрВыгрузки = СтрВыгрузки + "        //endProperty" + Символы.ПС;
		СтрВыгрузки = СтрВыгрузки + СтрПеречисленияКакСвойства;
		СтрВыгрузки = СтрВыгрузки + СтрМетоды;
		СтрВыгрузки = СтрВыгрузки + "        //endMethods" + Символы.ПС;
		СтрВыгрузки = СтрВыгрузки + СтрПодвал + Символы.ПС;
		
		//если это класс ИмяКонтекстКлассаАнгл = OneScriptForms 
		// тогда нужно дозаписать методы создания экземпляров каждого класса если он ещё отсутствует в СтрВыгрузки
		Если ИмяКонтекстКлассаАнгл = "OneScriptForms" Тогда
			ВыбранныеФайлы_2 = ОтобратьФайлы("Класс");
			Для А_2 = 0 По ВыбранныеФайлы_2.ВГраница() Цикл
				ТекстДок_2 = Новый ТекстовыйДокумент;
				ТекстДок_2.Прочитать(ВыбранныеФайлы_2[А_2]);
				Стр_2 = ТекстДок_2.ПолучитьТекст();
				СтрЗаголовка_2 = СтрНайтиМежду(Стр_2, "<H1 class=dtH1", "/H1>", , )[0];
				М01_2 = СтрНайтиМежду(СтрЗаголовка_2, "(", ")", , );
				Стр33_2 = СтрЗаголовка_2;
				Стр33_2 = СтрЗаменить(Стр33_2, "&nbsp;", " ");
				Стр33_2 = СтрЗаменить(Стр33_2, ">", "");
				М08_2 = РазобратьСтроку(Стр33_2, " ");
				ИмяКонтекстКлассаАнгл = М01_2[0];
				ИмяКонтекстКлассаРус = М08_2[0];
				
				// для классов - аргументов свои правила
				Если Прав(ИмяКонтекстКлассаАнгл, 4) = "Args" Тогда
					Если Не (ИмяКонтекстКлассаАнгл = "EventArgs") Тогда
						ПодстрокаПоиска = 
						"        //endMethods";
						ПодстрокаЗамены = 
						"        [ContextMethod(""" + ИмяКонтекстКлассаРус + """, """ + ИмяКонтекстКлассаАнгл + """)]
						|        public Cl" + ИмяКонтекстКлассаАнгл + " " + ИмяКонтекстКлассаАнгл + "()
						|        {
						|        	return (Cl" + ИмяКонтекстКлассаАнгл + ")Event;
						|        }
						|        
						|        //endMethods";
						СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//добавим методы в osf.OneScriptForms
			ПодстрокаПоиска = 
			"        //endMethods";
			ПодстрокаЗамены = 
			"        [ContextMethod(""ДанныеДляДизайнера"", ""DataForDesigner"")] // метод нужен только для дизайнера форм
			|        public string AttributesForDesigner(string p1, string p2) // p1 - строковое представление типа объекта, p2 - имя свойства
			|        {
			|            System.Type Type1 = GetTypeFromName(p1);
			|            string str1 = """";
			|            string DisplayName = """";//ОтображаемоеИмяСвойства
			|            //try
			|            //{
			|            //    System.ComponentModel.PropertyDescriptor PropertyDescriptorCollection1 = System.ComponentModel.TypeDescriptor.GetProperties(Type1)[p2];
			|            //    System.ComponentModel.AttributeCollection attributes = System.ComponentModel.TypeDescriptor.GetProperties(Type1)[p2].Attributes;
			|            //    System.ComponentModel.DisplayNameAttribute myDisplayNameAttribute = (System.ComponentModel.DisplayNameAttribute)attributes[typeof(System.ComponentModel.DisplayNameAttribute)];
			|            //    DisplayName = myDisplayNameAttribute.DisplayName;
			|            //}
			|            //catch { }
			|            str1 = str1 + ""DisplayName="" + DisplayName + ""~"";
			|            string Description = """";//ОписаниеСвойства
			|            //try
			|            //{
			|            //    System.ComponentModel.PropertyDescriptor PropertyDescriptorCollection1 = System.ComponentModel.TypeDescriptor.GetProperties(Type1)[p2];
			|            //    System.ComponentModel.AttributeCollection attributes = System.ComponentModel.TypeDescriptor.GetProperties(Type1)[p2].Attributes;
			|            //    System.ComponentModel.DescriptionAttribute myDescriptionAttribute = (System.ComponentModel.DescriptionAttribute)attributes[typeof(System.ComponentModel.DescriptionAttribute)];
			|            //    Description = myDescriptionAttribute.Description;
			|            //}
			|            //catch { }
			|            str1 = str1 + ""Description="" + Description + ""~"";
			|            string Category = """";//КатегорияСвойства
			|            try
			|            {
			|                System.ComponentModel.PropertyDescriptor PropertyDescriptorCollection1 = System.ComponentModel.TypeDescriptor.GetProperties(Type1)[p2];
			|                System.ComponentModel.AttributeCollection attributes = System.ComponentModel.TypeDescriptor.GetProperties(Type1)[p2].Attributes;
			|                System.ComponentModel.CategoryAttribute myCategoryAttribute = (System.ComponentModel.CategoryAttribute)attributes[typeof(System.ComponentModel.CategoryAttribute)];
			|                Category = myCategoryAttribute.Category;
			|            }
			|            catch { }
			|            str1 = str1 + ""Category="" + Category + ""~"";
			|            string Browsable = ""Неопределено"";//ВидимостьСвойства
			|            try
			|            {
			|                System.ComponentModel.PropertyDescriptor PropertyDescriptorCollection1 = System.ComponentModel.TypeDescriptor.GetProperties(Type1)[p2];
			|                System.ComponentModel.AttributeCollection attributes = System.ComponentModel.TypeDescriptor.GetProperties(Type1)[p2].Attributes;
			|                System.ComponentModel.BrowsableAttribute myBrowsableAttribute = (System.ComponentModel.BrowsableAttribute)attributes[typeof(System.ComponentModel.BrowsableAttribute)];
			|                Browsable = """" + myBrowsableAttribute.Browsable;
			|            }
			|            catch { }
			|            str1 = str1 + ""Browsable="" + Browsable + ""~"";
			|            string ConverterTypeName = """";//КонвертерТипаСвойства
			|            //try
			|            //{
			|            //    System.ComponentModel.PropertyDescriptor PropertyDescriptorCollection1 = System.ComponentModel.TypeDescriptor.GetProperties(Type1)[p2];
			|            //    System.ComponentModel.AttributeCollection attributes = System.ComponentModel.TypeDescriptor.GetProperties(Type1)[p2].Attributes;
			|            //    System.ComponentModel.TypeConverterAttribute myTypeConverterAttribute = (System.ComponentModel.TypeConverterAttribute)attributes[typeof(System.ComponentModel.TypeConverterAttribute)];
			|            //    ConverterTypeName = myTypeConverterAttribute.ConverterTypeName;
			|            //}
			|            //catch { }
			|            str1 = str1 + ""ConverterTypeName="" + ConverterTypeName + ""~"";
			|            string AvailabilityOfTheProperty = ""0"";//НаличиеСвойства
			|            System.Reflection.PropertyInfo[] myPropertyInfo = Type1.GetProperties();
			|            foreach (var prop in myPropertyInfo)
			|            {
			|                if (prop.Name == p2)
			|                {
			|                    AvailabilityOfTheProperty = ""1"";
			|                    break;
			|                }
			|            }
			|            str1 = str1 + ""AvailabilityOfTheProperty="" + AvailabilityOfTheProperty + ""~"";
			|            return str1;
			|        }
			|
			|        public static System.Type GetTypeFromName(string typeName)
			|        {
			|            // необходимо двойное открытие закрытие во избежание проблем
			|            const string typeProgram = @""using System; using System.Collections.Generic; using System.IO;
			|                namespace SimpleTest
			|                {{
			|                    public class Program
			|                    {{
			|                        public static Type GetItemType()
			|                        {{
			|                            {0} typeTest = new {0}();
			|                            if (typeTest == null) return null;
			|                            return typeTest.GetType();
			|                        }}
			|                    }}
			|                }}"";
			|
			|            var formattedCode = String.Format(typeProgram, typeName);
			|            var CompilerParams = new System.CodeDom.Compiler.CompilerParameters
			|            {
			|                GenerateInMemory = true,
			|                TreatWarningsAsErrors = false,
			|                GenerateExecutable = false,
			|                CompilerOptions = ""/optimize""
			|            };
			|
			|            string[] references = { ""System.dll"", ""System.Windows.Forms.dll"" };
			|            CompilerParams.ReferencedAssemblies.AddRange(references);
			|
			|            var provider = new Microsoft.CSharp.CSharpCodeProvider();
			|            System.CodeDom.Compiler.CompilerResults compile = provider.CompileAssemblyFromSource(CompilerParams, formattedCode);
			|            if (compile.Errors.HasErrors) return null;
			|
			|            System.Reflection.Module module = compile.CompiledAssembly.GetModules()[0];
			|            System.Type mt = null; System.Reflection.MethodInfo methInfo = null;
			|
			|            if (module != null) mt = module.GetType(""SimpleTest.Program"");
			|            if (mt != null) methInfo = mt.GetMethod(""GetItemType"");
			|            if (methInfo != null) return (System.Type)methInfo.Invoke(null, null);
			|
			|            return null;
			|        }
			|			
			|        public static void AddToHashtable(dynamic p1, dynamic p2)
			|        {
			|            if (!OneScriptForms.hashtable.ContainsKey(p1))
			|            {
			|                OneScriptForms.hashtable.Add(p1, p2);
			|            }
			|        }
			|
			|        public static IValue RevertObj(dynamic initialObject) 
			|        {
			|            //ScriptEngine.Machine.Values.NullValue NullValue1;
			|            //ScriptEngine.Machine.Values.BooleanValue BooleanValue1;
			|            //ScriptEngine.Machine.Values.DateValue DateValue1;
			|            //ScriptEngine.Machine.Values.NumberValue NumberValue1;
			|            //ScriptEngine.Machine.Values.StringValue StringValue1;
			|
			|            //ScriptEngine.Machine.Values.GenericValue GenericValue1;
			|            //ScriptEngine.Machine.Values.TypeTypeValue TypeTypeValue1;
			|            //ScriptEngine.Machine.Values.UndefinedValue UndefinedValue1;
			|
			|            try
			|            {
			|                if (initialObject == null)
			|                {
			|                    return (IValue)null;
			|                }
			|            }
			|            catch { }
			|
			|            try
			|            {
			|                string str_initialObject = initialObject.GetType().ToString();
			|            }
			|            catch
			|            {
			|                return (IValue)null;
			|            }
			|
			|            dynamic Obj1 = null;
			|            string str1 = initialObject.GetType().ToString();
			|            try
			|            {
			|                Obj1 = initialObject.dll_obj;
			|            }
			|            catch { }
			|            if (Obj1 != null)
			|            {
			|                return (IValue)Obj1;
			|            }
			|
			|            try
			|            {
			|                Obj1 = initialObject.M_Object.dll_obj;
			|            }
			|            catch { }
			|            if (Obj1 != null)
			|            {
			|                return (IValue)Obj1;
			|            }
			|			
			|            try
			|            {
			|                if (str1.Contains(""osf.""))
			|                {
			|                    foreach (System.Collections.DictionaryEntry de in OneScriptForms.hashtable)
			|                    {
			|                        if (de.Key.Equals(initialObject.GetType().GetField(""M_"" + str1.Substring(str1.LastIndexOf(""."") + 1)).GetValue(initialObject)))
			|                        {
			|                            Obj1 = ((dynamic)de.Value).dll_obj;
			|                            break;
			|                        }
			|                    }
			|                }
			|            }
			|            catch { }
			|            if (Obj1 != null)
			|            {
			|                return (IValue)Obj1;
			|            }
			|
			|            try // если initialObject не из пространства имен onescriptgui, то есть Уровень1
			|            {
			|                if (!str1.Contains(""osf.""))
			|                {
			|                    string str2 = ""osf.Cl"" + str1.Substring(str1.LastIndexOf(""."") + 1);
			|                    System.Type TestType = System.Type.GetType(str2, false, true);
			|                    object[] args = { initialObject };
			|                    Obj1 = Activator.CreateInstance(TestType, args);
			|                }
			|            }
			|            catch { }
			|            if (Obj1 != null)
			|            {
			|                return (IValue)Obj1;
			|            }
			|
			|            try // если initialObject из пространства имен onescriptgui, то есть Уровень2
			|            {
			|                if (str1.Contains(""osf.""))
			|                {
			|                    string str3 = str1.Replace(""osf."", ""osf.Cl"");
			|                    System.Type TestType = System.Type.GetType(str3, false, true);
			|                    object[] args = { initialObject };
			|                    Obj1 = Activator.CreateInstance(TestType, args);
			|                }
			|            }
			|            catch { }
			|            if (Obj1 != null)
			|            {
			|                return (IValue)Obj1;
			|            }
			|
			|            string str4 = null;
			|            try
			|            {
			|                str4 = initialObject.SystemType.Name;
			|            }
			|            catch
			|            {
			|                if ((str1 == ""System.String"") ||
			|                (str1 == ""System.Decimal"") ||
			|                (str1 == ""System.Int32"") ||
			|                (str1 == ""System.Boolean"") ||
			|                (str1 == ""System.DateTime""))
			|                {
			|                    return (IValue)ValueFactory.Create(initialObject);
			|                }
			|                else if (str1 == ""System.Byte"")
			|                {
			|                    int vOut = Convert.ToInt32(initialObject);
			|                    return (IValue)ValueFactory.Create(vOut);
			|                }
			|                else if (str1 == ""System.DBNull"")
			|                {
			|                    string vOut = Convert.ToString(initialObject);
			|                    return (IValue)ValueFactory.Create(vOut);
			|                }
			|            }
			|			
			|            if (str4 == ""Неопределено"")
			|            {
			|                return (IValue)null;
			|            }
			|            if (str4 == ""Булево"")
			|            {
			|                return (IValue)initialObject;
			|            }
			|            if (str4 == ""Дата"")
			|            {
			|                return (IValue)initialObject;
			|            }
			|            if (str4 == ""Число"")
			|            {
			|                return (IValue)initialObject;
			|            }
			|            if (str4 == ""Строка"")
			|            {
			|                return (IValue)initialObject;
			|            }
			|            return (IValue)initialObject;
			|        }
			|			
			|        public static dynamic DefineTypeIValue(dynamic p1)
			|        {
			|            if (p1.GetType() == typeof(ScriptEngine.Machine.Values.StringValue))
			|            {
			|                return p1.AsString();
			|            }
			|            else if (p1.GetType() == typeof(ScriptEngine.Machine.Values.NumberValue))
			|            {
			|                return p1.AsNumber();
			|            }
			|            else if (p1.GetType() == typeof(ScriptEngine.Machine.Values.BooleanValue))
			|            {
			|                return p1.AsBoolean();
			|            }
			|            else if (p1.GetType() == typeof(ScriptEngine.Machine.Values.DateValue))
			|            {
			|                return p1.AsDate();
			|            }
			|            else
			|            {
			|                return p1;
			|            }
			|        }
			|			
			|        public static dynamic GetEventParameter(dynamic dll_objEvent)
			|        {
			|            if (dll_objEvent != null)
			|            {
			|                dynamic eventType = dll_objEvent.GetType();
			|                if (eventType == typeof(DelegateAction))
			|                {
			|                    return null;
			|                }
			|                else if (eventType == typeof(ClAction))
			|                {
			|                    return ((ClAction)dll_objEvent).Parameter;
			|                }
			|                else
			|                {
			|                    return null;
			|                }
			|            }
			|            else
			|            {
			|                return null;
			|            }
			|        }
			|
			|        public static void ExecuteEvent(dynamic dll_objEvent)
			|        {
			|            if (!handleEvents)
			|            {
			|                return;
			|            }
			|            if (dll_objEvent == null)
			|            {
			|                return;
			|            }
			|            if (dll_objEvent.GetType() == typeof(DelegateAction))
			|            {
			|                ((DelegateAction)dll_objEvent).CallAsProcedure(0, null);
			|            }
			|            else if (dll_objEvent.GetType() == typeof(ClAction))
			|            {
			|                ClAction Action1 = ((ClAction)dll_objEvent);
			|                IRuntimeContextInstance script = Action1.Script;
			|                string method = Action1.MethodName;
			|                ReflectorContext reflector = new ReflectorContext();
			|                reflector.CallMethod(script, method, null);
			|            }
			|            else
			|            {
			|                //System.Windows.Forms.MessageBox.Show(""Обработчик события "" + dll_objEvent.ToString() + "" задан неверным типом."", ""Обработчик события контрола"", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Warning, System.Windows.Forms.MessageBoxDefaultButton.Button1);
			|            }
			|            Event = null;
			|        }
			|
			|        private enum MesBoxFlags
			|        {
			|            MB_OK = 0x00000000, // Окно сообщения содержит одну кнопку: OK. Это значение по умолчанию.
			|            MB_YESNO = 0x00000004, // Окно сообщения содержит две кнопки: Да и Нет. 
			|            MB_SETFOREGROUND = 0x00010000, // Окно сообщения становится окном переднего плана. Внутренне система вызывает функцию SetForegroundWindow для окна сообщения.
			|            MB_SYSTEMMODAL = 0x00001000, // То же, что и MB_APPLMODAL, за исключением того, что окно сообщения имеет стиль WS_EX_TOPMOST. Используйте окна сообщений системного режима для уведомления пользователя о серьезных, потенциально опасных ошибках, требующих немедленного внимания (например, нехватка памяти). Этот флаг не влияет на способность пользователя взаимодействовать с окнами, отличными от тех, которые связаны с hWnd.
			|            MB_ICONINFORMATION = 0x00000040, // В окне сообщения появится значок, состоящий из строчной буквы i в круге.
			|            MB_APPLMODAL = 0x00000000, // Пользователь должен ответить на окно сообщения, прежде чем продолжить работу в окне, определяемом параметром hWnd. Однако пользователь может перейти к окнам других потоков и работать в этих окнах.
			|                                       // В зависимости от иерархии окон в приложении пользователь может перейти к другим окнам в потоке. Все дочерние окна родительского окна сообщения автоматически отключаются, но всплывающие окна - нет.
			|                                       // MB_APPLMODAL используется по умолчанию, если не указаны ни MB_SYSTEMMODAL, ни MB_TASKMODAL.
			|            MB_TASKMODAL = 0x00002000 // То же, что и MB_APPLMODAL, за исключением того, что все окна верхнего уровня, принадлежащие текущему потоку, отключены, если параметр HWND равен нулю. Используйте этот флаг, когда вызывающее приложение или библиотека не имеют доступного дескриптора окна, но все равно должны запретить ввод в другие окна в вызывающем потоке без приостановки других потоков.
			|        }
			|			
			|        //endMethods";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		
		//последние исправления СтрВыгрузки
		ПодстрокаПоиска = "public ClDataType DataType";
		ПодстрокаЗамены = "public new ClDataType DataType";
		СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		
		ПодстрокаПоиска = "items = new ClListBoxObjectCollection(Base_obj.Items);";
		ПодстрокаЗамены = "items = new ClListBoxObjectCollection(Base_obj.Items);
		|            items.M_obj = this;";
		СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		
		Файл1 = Новый Файл(ИмяФайлаВыгрузки);
		Если Не (Файл1.Существует()) Тогда
			ЗаписьТекста1 = Новый ЗаписьТекста();
			ЗаписьТекста1.Открыть(ИмяФайлаВыгрузки,,,);
			Если ИмяФайлаВыгрузки = КаталогВыгрузки + "\OneScriptForms.cs" Тогда
				Стр88 = 
				"using System;
				|using System.Collections;
				|using System.Collections.Generic;
				|using System.Linq;
				|using ScriptEngine.Machine.Contexts;
				|using ScriptEngine.Machine;
				|using System.Reflection;
	 			|using System.Runtime.InteropServices;
	 			|using ScriptEngine.HostedScript.Library;
				|
				|";
			Иначе
				Стр88 = Директивы(ИмяКонтекстКлассаАнгл);
			КонецЕсли;
			Стр88 = Стр88 + 
			"namespace osf
			|{
			|}//endnamespace
			|";
			ЗаписьТекста1.Записать(Стр88);
			ЗаписьТекста1.Закрыть();
		Иначе

		КонецЕсли;
		
		//не создаем класса с префиксом Cl (остается только класс второго уровня)
		Если Не (
			ИмяКонтекстКлассаАнгл = "ButtonBase" или 
			ИмяКонтекстКлассаАнгл = "UpDownBase" или 
			ИмяКонтекстКлассаАнгл = "Component" или 
			ИмяКонтекстКлассаАнгл = "ScrollableControl" или 
			ИмяКонтекстКлассаАнгл = "Control" или 
			ИмяКонтекстКлассаАнгл = "CollectionBase" или 
			ИмяКонтекстКлассаАнгл = "Brush" или 
			ИмяКонтекстКлассаАнгл = "ScrollBar" или 
			ИмяКонтекстКлассаАнгл = "ListControl" или 
			ИмяКонтекстКлассаАнгл = "TextBoxBase" или 
			ИмяКонтекстКлассаАнгл = "Image" или 
			ИмяКонтекстКлассаАнгл = "CommonDialog" или 
			ИмяКонтекстКлассаАнгл = "DataGridColumnStyle" или 
			ИмяКонтекстКлассаАнгл = "FileDialog" или 
			ИмяКонтекстКлассаАнгл = "DataGridViewBand" или 
			ИмяКонтекстКлассаАнгл = "ContainerControl")
		
		Тогда //дописываем в файл класс с префиксом Cl (класс третьего уровня) для классов
			ЧтениеТекста1 = Новый ЧтениеТекста(ИмяФайлаВыгрузки);
			Стр77 = ЧтениеТекста1.Прочитать();
			ЧтениеТекста1.Закрыть();
			
			ПодстрокаПоиска = "}//endnamespace";
			ПодстрокаЗамены = СтрВыгрузки + Символы.ПС + "}//endnamespace";
			Стр77 = СтрЗаменить(Стр77, ПодстрокаПоиска, ПодстрокаЗамены);
			
			ЗаписьТекста1 = Новый ЗаписьТекста();
			ЗаписьТекста1.Открыть(ИмяФайлаВыгрузки,,,);
			ЗаписьТекста1.Записать(Стр77);
			ЗаписьТекста1.Закрыть();
		КонецЕсли;
	КонецЦикла;
	//===============================================================================================================================
	ВыбранныеФайлы = ОтобратьФайлы("Перечисление");
	Для А = 0 По ВыбранныеФайлы.ВГраница() Цикл
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ВыбранныеФайлы[А]);
		Стр = ТекстДок.ПолучитьТекст();
		СтрЗаголовка= СтрНайтиМежду(Стр, "<H1 class=dtH1", "/H1>", , )[0];
		М01 = СтрНайтиМежду(СтрЗаголовка, "(", ")", , );
		СтрЗаголовка = СтрЗаменить(СтрЗаголовка, "&nbsp;", " ");
		Стр33 = СтрНайтиМежду(СтрЗаголовка, ">", " Перечисление<", , )[0];
		Стр33 = СтрЗаменить(Стр33, "&nbsp;", " ");
		Стр33 = СтрЗаменить(Стр33, ">", "");
		М08 = РазобратьСтроку(Стр33, " ");
		ИмяФайлаВыгрузки = КаталогВыгрузки + "\" + М01[0] + ".cs";
		ИмяКонтекстКлассаАнгл = М01[0];
		ИмяКонтекстКлассаРус = М08[0];
		
		//находим текст таблицы
		СтрТаблица = СтрНайтиМежду(Стр, "</TH></TR>" + Символы.ПС + "  <TR vAlign=top>", "</TBODY></TABLE>", Ложь, );
		СтрТаблицыПеречисления = СтрНайтиМежду(СтрТаблица[0], "<TR vAlign=top>", "</TD></TR>", Ложь, );
		СтрРазделОбъявленияПеременныхДляПеречисления = "";
		СтрСвойстваДляПеречисления = "";
		Для А02 = 0 По СтрТаблицыПеречисления.ВГраница() Цикл
			М12 = СтрНайтиМежду(СтрТаблицыПеречисления[А02], "<TD>", "</TD>", , );
			М14 = СтрНайтиМежду(М12[0], "<B>", "</B>", , );
			М13 = РазобратьСтроку(СтрЗаменить(М14[0], "&nbsp;", " "), " ");
			ИмяПеречАнгл = М01[0];
			ИмяПеречРус = М08[0];
			ИмяЧленаАнгл = М13[1];
			// Сообщить("==" + ИмяЧленаАнгл);
			ИмяЧленаАнгл = СтрНайтиМежду(ИмяЧленаАнгл, "(", ")", , )[0];
			ИмяЧленаРус = М13[0];
			ОписаниеЧлена = М12[1];
			Пока СтрЧислоВхождений(ОписаниеЧлена, Символы.ПС) > 0 Цикл
				ОписаниеЧлена = СтрЗаменить(ОписаниеЧлена, Символы.ПС, " ");
			КонецЦикла;
			Пока СтрЧислоВхождений(ОписаниеЧлена, Символы.Таб) > 0 Цикл
				ОписаниеЧлена = СтрЗаменить(ОписаниеЧлена, Символы.Таб, " ");
			КонецЦикла;
			Пока СтрЧислоВхождений(ОписаниеЧлена, "  ") > 0 Цикл
				ОписаниеЧлена = СтрЗаменить(ОписаниеЧлена, "  ", " ");
			КонецЦикла;
			ЗначениеЧлена = М12[2];
			// Сообщить("--------------");
			// Сообщить("ИмяПеречРус = " + ИмяПеречРус);
			// Сообщить("ИмяПеречАнгл = " + ИмяПеречАнгл);
			// Сообщить("ИмяЧленаРус = " + ИмяЧленаРус);
			// Сообщить("ИмяЧленаАнгл = " + ИмяЧленаАнгл);
			// Сообщить("ОписаниеЧлена = " + ОписаниеЧлена);
			// Сообщить("ЗначениеЧлена = " + ЗначениеЧлена);
			
			СоставнаяСтр = ИмяЧленаАнгл;
			СоставнаяСтр = НРег(Лев(СоставнаяСтр, 1)) + Сред(СоставнаяСтр, 2);
			// private int strikeout = (int)FontStyle.Strikeout; // 8 Зачеркнутый шрифт.
			Если ИмяКонтекстКлассаАнгл = "AnchorStyles" или 
				ИмяКонтекстКлассаАнгл = "Appearance" или 
				ИмяКонтекстКлассаАнгл = "BorderStyle" или 
				ИмяКонтекстКлассаАнгл = "CharacterCasing" или 
				ИмяКонтекстКлассаАнгл = "CheckState" или 
				ИмяКонтекстКлассаАнгл = "CloseReason" или 
				ИмяКонтекстКлассаАнгл = "ColorDepth" или 
				ИмяКонтекстКлассаАнгл = "ColumnHeaderStyle" или 
				ИмяКонтекстКлассаАнгл = "ComboBoxStyle" или 
				ИмяКонтекстКлассаАнгл = "ControlStyles" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewTriState" или 
				ИмяКонтекстКлассаАнгл = "Day" или 
				ИмяКонтекстКлассаАнгл = "DialogResult" или 
				ИмяКонтекстКлассаАнгл = "DockStyle" или 
				ИмяКонтекстКлассаАнгл = "DrawMode" или 
				ИмяКонтекстКлассаАнгл = "FormBorderStyle" или 
				ИмяКонтекстКлассаАнгл = "FormStartPosition" или 
				ИмяКонтекстКлассаАнгл = "FormWindowState" или 
				ИмяКонтекстКлассаАнгл = "GridItemType" или 
				ИмяКонтекстКлассаАнгл = "HorizontalAlignment" или 
				ИмяКонтекстКлассаАнгл = "ImageLayout" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewImageCellLayout" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewAutoSizeColumnMode" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewAutoSizeColumnsMode" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewAutoSizeRowsMode" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewAutoSizeRowMode" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewSelectionMode" или 
				ИмяКонтекстКлассаАнгл = "ItemActivation" или 
				ИмяКонтекстКлассаАнгл = "Keys" или 
				ИмяКонтекстКлассаАнгл = "LeftRightAlignment" или 
				ИмяКонтекстКлассаАнгл = "ListViewAlignment" или 
				ИмяКонтекстКлассаАнгл = "MenuMerge" или 
				ИмяКонтекстКлассаАнгл = "MessageBoxButtons" или 
				ИмяКонтекстКлассаАнгл = "MessageBoxIcon" или 
				ИмяКонтекстКлассаАнгл = "MouseButtons" или 
				ИмяКонтекстКлассаАнгл = "PictureBoxSizeMode" или 
				ИмяКонтекстКлассаАнгл = "PropertySort" или 
				ИмяКонтекстКлассаАнгл = "RichTextBoxFinds" или 
				ИмяКонтекстКлассаАнгл = "RichTextBoxStreamType" или 
				ИмяКонтекстКлассаАнгл = "ScrollBars" или 
				ИмяКонтекстКлассаАнгл = "ScrollEventType" или 
				ИмяКонтекстКлассаАнгл = "ScrollOrientation" или 
				ИмяКонтекстКлассаАнгл = "SelectionMode" или 
				ИмяКонтекстКлассаАнгл = "Shortcut" или 
				ИмяКонтекстКлассаАнгл = "SortOrder" или 
				ИмяКонтекстКлассаАнгл = "StatusBarPanelAutoSize" или 
				ИмяКонтекстКлассаАнгл = "StatusBarPanelBorderStyle" или 
				ИмяКонтекстКлассаАнгл = "TabAlignment" или 
				ИмяКонтекстКлассаАнгл = "TabAppearance" или 
				ИмяКонтекстКлассаАнгл = "TabSizeMode" или 
				ИмяКонтекстКлассаАнгл = "ToolBarAppearance" или 
				ИмяКонтекстКлассаАнгл = "ToolBarButtonStyle" или 
				ИмяКонтекстКлассаАнгл = "ToolBarTextAlign" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewRowHeadersWidthSizeMode" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewContentAlignment" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewComboBoxDisplayStyle" или 
				ИмяКонтекстКлассаАнгл = "DataGridViewImageCellLayout" или 
				ИмяКонтекстКлассаАнгл = "TreeViewAction" Тогда
				ИмяКонтекстКлассаАнгл1 = "System.Windows.Forms." + ИмяКонтекстКлассаАнгл;
			ИначеЕсли ИмяКонтекстКлассаАнгл = "ContentAlignment" или 
				ИмяКонтекстКлассаАнгл = "FontStyle" Тогда
				ИмяКонтекстКлассаАнгл1 = "System.Drawing." + ИмяКонтекстКлассаАнгл;
			ИначеЕсли ИмяКонтекстКлассаАнгл = "NotifyFilters" или 
				ИмяКонтекстКлассаАнгл = "SeekOrigin" или 
				ИмяКонтекстКлассаАнгл = "WatcherChangeTypes" Тогда
				ИмяКонтекстКлассаАнгл1 = "System.IO." + ИмяКонтекстКлассаАнгл;
			ИначеЕсли ИмяКонтекстКлассаАнгл = "ProcessWindowStyle" Тогда
				ИмяКонтекстКлассаАнгл1 = "System.Diagnostics." + ИмяКонтекстКлассаАнгл;
			ИначеЕсли ИмяКонтекстКлассаАнгл = "SpecialFolder" Тогда
				ИмяКонтекстКлассаАнгл1 = "System.Environment." + ИмяКонтекстКлассаАнгл;
			ИначеЕсли ИмяКонтекстКлассаАнгл = "FormatDateTimePicker" Тогда
				ИмяКонтекстКлассаАнгл1 = "System.Windows.Forms.DateTimePickerFormat";
			ИначеЕсли ИмяКонтекстКлассаАнгл = "HatchStyle" Тогда
				ИмяКонтекстКлассаАнгл1 = "System.Drawing.Drawing2D.HatchStyle";
			ИначеЕсли ИмяКонтекстКлассаАнгл = "LinkLabelLinkBehavior" Тогда
				ИмяКонтекстКлассаАнгл1 = "System.Windows.Forms.LinkBehavior";
			ИначеЕсли ИмяКонтекстКлассаАнгл = "PixelFormat" Тогда
				ИмяКонтекстКлассаАнгл1 = "System.Drawing.Imaging." + ИмяКонтекстКлассаАнгл;
			ИначеЕсли ИмяКонтекстКлассаАнгл = "FlatStyle" Тогда
				ИмяКонтекстКлассаАнгл1 = "(System.Windows.Forms.FlatStyle)FlatStyle";
			ИначеЕсли ИмяКонтекстКлассаАнгл = "DataRowState" Тогда
				ИмяКонтекстКлассаАнгл1 = "System.Data.DataRowState";
			Иначе
				ИмяКонтекстКлассаАнгл1 = ИмяКонтекстКлассаАнгл;
			КонецЕсли;
			Если ИмяКонтекстКлассаАнгл = "Sounds" или
				ИмяКонтекстКлассаАнгл = "MouseFlags" или
				ИмяКонтекстКлассаАнгл = "SortType" или
				ИмяКонтекстКлассаАнгл = "DataGridViewGrouperStyle" или
				ИмяКонтекстКлассаАнгл = "DataType" Тогда
				СтрРазделОбъявленияПеременныхДляПеречисления = СтрРазделОбъявленияПеременныхДляПеречисления + Символы.ПС + 
				"        private int m_" + СоставнаяСтр + " = " + ЗначениеЧлена + "; // " + ЗначениеЧлена + " " + ОписаниеЧлена;
				
				СтрСвойстваДляПеречисления = СтрСвойстваДляПеречисления + Символы.ПС + 
				"        [ContextProperty(""" + ИмяЧленаРус + """, """ + ИмяЧленаАнгл + """)]
				|        public int " + ИмяЧленаАнгл + "
				|        {
				|        	get { return m_" + СоставнаяСтр + "; }
				|        }" + ?(А02 = СтрТаблицыПеречисления.ВГраница(), "", Символы.ПС);
			Иначе
				СтрРазделОбъявленияПеременныхДляПеречисления = СтрРазделОбъявленияПеременныхДляПеречисления + Символы.ПС + 
				"        private int m_" + СоставнаяСтр + " = (int)" + ИмяКонтекстКлассаАнгл1 + "." + ИмяЧленаАнгл + "; // " + ЗначениеЧлена + " " + ОписаниеЧлена;
				
				СтрСвойстваДляПеречисления = СтрСвойстваДляПеречисления + Символы.ПС + 
				"        [ContextProperty(""" + ИмяЧленаРус + """, """ + ИмяЧленаАнгл + """)]
				|        public int " + ИмяЧленаАнгл + "
				|        {
				|        	get { return m_" + СоставнаяСтр + "; }
				|        }" + ?(А02 = СтрТаблицыПеречисления.ВГраница(), "", Символы.ПС);
			КонецЕсли;
		КонецЦикла;
		
		//последние исправления СтрСвойстваДляПеречисления
		ПодстрокаПоиска = "(int)System.Environment.SpecialFolder.SystemDirectory;";
		ПодстрокаЗамены = "(int)System.Environment.SpecialFolder.System;";
		СтрРазделОбъявленияПеременныхДляПеречисления = СтрЗаменить(СтрРазделОбъявленияПеременныхДляПеречисления, ПодстрокаПоиска, ПодстрокаЗамены);
		
		СтрВыгрузкиПеречисленийШапка = Директивы(ИмяКонтекстКлассаАнгл);
		СтрВыгрузкиПеречислений = СтрВыгрузкиПеречисленийШапка + Символы.ПС + 
		"
		|namespace osf
		|{
		|    [ContextClass(""Кл" + ИмяКонтекстКлассаРус + """, ""Cl" + ИмяКонтекстКлассаАнгл + """)]
		|    public class Cl" + ИмяКонтекстКлассаАнгл + " : AutoContext<Cl" + ИмяКонтекстКлассаАнгл + ">
		|    {";
		СортироватьСтрРазделОбъявленияПеременныхДляПеречисления();
		СтрВыгрузкиПеречислений = СтрВыгрузкиПеречислений + СтрРазделОбъявленияПеременныхДляПеречисления + Символы.ПС;
		СтрВыгрузкиПеречислений = СтрВыгрузкиПеречислений + СтрСвойстваДляПеречисления + Символы.ПС;
		СтрВыгрузкиПеречислений = СтрВыгрузкиПеречислений + Символы.ПС + 
		"    }//endClass" + Символы.ПС + 
		"}//endnamespace";
	
		ТекстДокПеречислений = Новый ТекстовыйДокумент;
		ТекстДокПеречислений.УстановитьТекст(СтрВыгрузкиПеречислений);
		ТекстДокПеречислений.Записать(ИмяФайлаВыгрузки);
		
	КонецЦикла;
	
	// СписокЗамен.СортироватьПоЗначению();
	// Сообщить("=СписокЗамен========================================================");
	// Для А = 0 По СписокЗамен.Количество() - 1 Цикл
		// Сообщить("" + СписокЗамен.Получить(А).Значение);
	// КонецЦикла;
	

	
	Сообщить("Выполнено за: " + ((ТекущаяУниверсальнаяДатаВМиллисекундах()-Таймер)/1000)/60 + " мин." + " " + ТекущаяДата());
КонецПроцедуры//ВыгрузкаДляCS

Процедура СоздатьФайлCs(ИмяФайлаCs)
	СтрВыгрузки = Директивы(ИмяФайлаCs);
	Если Ложь Тогда
	// ИначеЕсли ИмяФайлаCs = "" Тогда
		// СтрВыгрузки = СтрВыгрузки + 
		// "namespace osf
		// |{

		// |}//endnamespace
		// |";
		// ТекстДокХХХ = Новый ТекстовыйДокумент;
		// ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		// ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
		
		
		
		
		
		
		
	ИначеЕсли ИмяФайлаCs = "DataGridViewGrouperControl" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace Subro.Controls
		|{
		|    // Этот элемент управления используется для обеспечения пользовательского интерфейса для DataGridViewGrouper.
		|    // Код создан на основе разработки автора Robert.Verpalen https://www.codeproject.com/Tips/995958/DataGridViewGrouper под лицензией 
		|    // The Code Project Open License (CPOL) 1.02 https://www.codeproject.com/info/cpol10.aspx
		|		
		|    public partial class DataGridViewGrouperControl : UserControl
		|    {
		|        private System.ComponentModel.IContainer components = null;
		|        private System.Windows.Forms.ComboBox cmbFields;
		|        private System.Windows.Forms.CheckBox chk;
		|        public ClDataGridViewGrouperControl dll_obj;
		|
		|        public DataGridViewGrouperControl()
		|        {
		|            cmbFields = new System.Windows.Forms.ComboBox();
		|            chk = new System.Windows.Forms.CheckBox();
		|            SuspendLayout();
		|
		|            cmbFields.DisplayMember = ""Name"";
		|            cmbFields.Dock = System.Windows.Forms.DockStyle.Fill;
		|            cmbFields.DropDownWidth = 120;
		|            cmbFields.FormattingEnabled = true;
		|            cmbFields.Location = new System.Drawing.Point(90, 0);
		|            cmbFields.Margin = new System.Windows.Forms.Padding(4);
		|            cmbFields.Name = ""cmbFields"";
		|            cmbFields.Size = new System.Drawing.Size(176, 24);
		|            cmbFields.Sorted = true;
		|            cmbFields.TabIndex = 0;
		|            cmbFields.SelectedIndexChanged += new System.EventHandler(this.cmbFields_SelectedIndexChanged);
		|
		|            chk.AutoSize = true;
		|            chk.Dock = System.Windows.Forms.DockStyle.Left;
		|            chk.Location = new System.Drawing.Point(0, 0);
		|            chk.Margin = new System.Windows.Forms.Padding(4);
		|            chk.Name = ""chk"";
		|            chk.Size = new System.Drawing.Size(90, 25);
		|            chk.TabIndex = 1;
		|            chk.Text = """";
		|            chk.UseVisualStyleBackColor = true;
		|            chk.CheckedChanged += new System.EventHandler(this.chk_CheckedChanged);
		|
		|            //AllowDrop = true; // иначе ошибка Регистрация DragDrop невозможна. Или можно поставить false, чтобы не возникла ошибка.
		|            AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
		|            AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
		|            BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
		|            Controls.Add(this.cmbFields);
		|            Controls.Add(this.chk);
		|            Margin = new System.Windows.Forms.Padding(4);
		|            Name = ""DataGridViewGrouperControl"";
		|            Padding = new System.Windows.Forms.Padding(0, 0, 13, 0);
		|            Size = new System.Drawing.Size(279, 25);
		|            ResumeLayout(false);
		|            PerformLayout();
		|        }
		|		
		|        public System.Windows.Forms.ComboBox CmbFields
		|        {
		|            get { return cmbFields; }
		|        }
		|		
		|        public System.Windows.Forms.CheckBox Chk
		|        {
		|            get { return chk; }
		|        }
		|
		|        private DataGridViewGrouper grouper;
		|
		|        // Компонент grouper, используемый для выполнения фактической группировки. Если ни один из них не задан или не может быть 
		|        // получен, DataGridViewGrouper создается, когда задано свойство DataGridView.
		|        [DefaultValue(null)]
		|        public DataGridViewGrouper Grouper
		|        {
		|            get { return grouper; }
		|            set
		|            {
		|                if (grouper == value)
		|                {
		|                    return;
		|                }
		|                if (!DesignMode)
		|                {
		|                    cmbFields.Enabled = value != null;
		|                }
		|
		|                if (grouper != null)
		|                {
		|                    grouper.PropertiesChanged -= new EventHandler(GroupingSource_DataSourceChanged);
		|                    grouper.GroupingChanged -= new EventHandler(grouper_GroupingChanged);
		|                    if (grouperowned)
		|                    {
		|                        if (grouper is IDisposable)
		|                        {
		|                            (grouper as IDisposable).Dispose();
		|                        }
		|                        grouperowned = false;
		|                    }
		|                }
		|                grouper = value;
		|                if (grouper != null)
		|                {
		|                    grouper.PropertiesChanged += new EventHandler(GroupingSource_DataSourceChanged);
		|                    grouper.GroupingChanged += new EventHandler(grouper_GroupingChanged);
		|                }
		|
		|                setprops();
		|
		|                if (cm != null)
		|                {
		|                    cm.Grouper = value;
		|                }
		|            }
		|        }
		|
		|        bool settingvalues;
		|
		|        bool ShouldSerializeGrouper()
		|        {
		|            return grouper != null && !grouperowned;
		|        }
		|
		|        bool grouperowned;
		|
		|        // Очистите все используемые ресурсы.
		|        protected override void Dispose(bool disposing)
		|        {
		|            Grouper = null;
		|            if (cm != null)
		|            {
		|                cm.Dispose();
		|            }
		|            if (disposing && (components != null))
		|            {
		|                components.Dispose();
		|            }
		|            base.Dispose(disposing);
		|        }
		|
		|        public override string Text
		|        {
		|            get { return chk.Text; }
		|            set { chk.Text = value; }
		|        }
		|
		|        [DefaultValue(null)]
		|        public DataGridView DataGridView
		|        {
		|            get
		|            {                
		|                if (grouper != null)
		|                {
		|                    return grouper.DataGridView;
		|                }
		|                return null;
		|            }
		|            set
		|            {
		|                if (DataGridView == value)
		|                {
		|                    return;
		|                }
		|                if (DataGridView != null)
		|                {
		|                    DataGridView.DataSourceChanged -= value_DataSourceChanged;
		|                }
		|                if (grouperowned || value == null)
		|                {
		|                    Grouper = null;
		|                }
		|                if (value != null)
		|                {
		|                    if (grouper != null)
		|                    {
		|                        grouper.DataGridView = value;
		|                    }
		|                    else if (value is IDataGridViewGrouperOwner)
		|                    {
		|                        Grouper = (value as IDataGridViewGrouperOwner).Grouper;
		|                        grouper.DataGridView = value;
		|                    }
		|                    else
		|                    {
		|                        Grouper = new DataGridViewGrouper(value);
		|                        grouperowned = true;
		|                    }
		|                }
		|            }
		|        }
		|
		|        void value_DataSourceChanged(object sender, EventArgs e)
		|        {
		|            setprops();
		|        }
		|
		|        public GroupingSource GroupingSource
		|        {
		|            get
		|            {
		|                if (grouper == null)
		|                {
		|                    return null;
		|                }
		|                return grouper.GroupingSource;
		|            }
		|        }
		|
		|        void setprops()
		|        {
		|            if (settingvalues)
		|            {
		|                return;
		|            }
		|            settingvalues = true;
		|            cmbFields.BeginUpdate();
		|            cmbFields.Items.Clear();
		|
		|            try
		|            {
		|                if (grouper != null)
		|                {
		|                    IEnumerable<PropertyDescriptor> props = grouper.GetProperties();
		|                    if (props != null)
		|                    {
		|                        GroupingInfo cur = grouper.GroupOn;
		|                        foreach (PropertyDescriptor p in props)
		|                        {
		|                            cmbFields.Items.Add(p);
		|                            if (cur != null && cur.IsProperty(p.Name))
		|                            {
		|                                cmbFields.SelectedItem = p;
		|                            }
		|                        }
		|                    }
		|                }
		|                chk.Checked = grouper != null && grouper.GroupOn != null;
		|            }
		|            catch (Exception ex)
		|            {
		|                ShowEx(ex);
		|            }
		|            settingvalues = false;
		|            cmbFields.EndUpdate();
		|        }
		|
		|        void ShowEx(Exception ex)
		|        {
		|            MessageBox.Show(ex.Message);
		|        }
		|
		|        void grouper_GroupingChanged(object sender, EventArgs e)
		|        {
		|            if (settingvalues)
		|            {
		|                return;
		|            }
		|            settingvalues = true;
		|            try
		|            {
		|                GroupingInfo gr = grouper.GroupOn;
		|                chk.Checked = gr != null;
		|                if (chk.Checked)
		|                {
		|                    var prop = FindProperty(gr);
		|                    cmbFields.SelectedItem = prop;
		|                    if (prop == null)
		|                    {
		|                        cmbFields.Text = gr.ToString();
		|                    }
		|                }
		|                /*if (cm != null)cm.Grouper = dgvGrouper;*/
		|            }
		|            finally
		|            {
		|                settingvalues = false;
		|            }
		|        }
		|
		|        public PropertyDescriptor FindProperty(GroupingInfo gr)
		|        {
		|            foreach (PropertyDescriptor pd in cmbFields.Items)
		|            {
		|                if (gr.IsProperty(pd.Name))
		|                {
		|                    return pd;
		|                }
		|            }
		|            return null;
		|        }
		|
		|        public bool IsGrouped
		|        {
		|            get { return grouper != null && grouper.GroupOn != null; }
		|        }
		|
		|        void GroupingSource_DataSourceChanged(object sender, EventArgs e)
		|        {
		|            setprops();
		|        }
		|
		|        private void chk_CheckedChanged(object sender, EventArgs e)
		|        {
		|            setgroup();
		|        }
		|
		|        private void cmbFields_SelectedIndexChanged(object sender, EventArgs e)
		|        {
		|            if (!chk.Checked)
		|            {
		|                return;
		|            }
		|            setgroup();
		|        }
		|
		|        void setgroup()
		|        {
		|            if (settingvalues || grouper == null)
		|            {
		|                return;
		|            }
		|            settingvalues = true;
		|            if (!chk.Checked || cmbFields.SelectedItem == null)
		|            {
		|                grouper.RemoveGrouping();
		|            }
		|            else
		|            {
		|                PropertyDescriptor p = SelectedProperty;
		|                try
		|                {
		|                    grouper.SetGroupOn(p);
		|                    /*if (cm != null)cm.Grouper = dgvGrouper;*/
		|                }
		|                catch (Exception ex)
		|                {
		|                    ShowEx(new Exception(""Error while grouping on "" + p.Name + "": "" + ex.Message, ex));
		|                }
		|            }
		|            settingvalues = false;
		|        }
		|
		|        public PropertyDescriptor SelectedProperty
		|        {
		|            get { return (PropertyDescriptor)cmbFields.SelectedItem; }
		|        }
		|
		|        protected override void OnPaint(PaintEventArgs e)
		|        {
		|            base.OnPaint(e);
		|            try
		|            {
		|                Rectangle r = e.ClipRectangle;
		|                if (r.IsEmpty)
		|                {
		|                    return;
		|                }
		|                ControlPaint.DrawButton(e.Graphics, r, down ? ButtonState.Pushed : ButtonState.Normal);
		|
		|                if (down)
		|                {
		|                    r.Offset(1, 1);
		|                }
		|                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
		|                Point p = new Point(r.X + 2, r.Y + r.Height / 2 - 2);
		|                for (int i = 0; i < 2; i++)
		|                {
		|                    int w = r.Right - p.X - 4;
		|                    Point[] ps = { p, new Point(p.X + w / 2, p.Y + 2), new Point(p.X + w, p.Y) };
		|                    e.Graphics.DrawLines(Pens.Black, ps);
		|                    p.Y += 3;
		|                }
		|            }
		|            catch { }
		|        }
		|
		|        protected override void OnMouseDown(MouseEventArgs e)
		|        {
		|            base.OnMouseDown(e);
		|            if (!down)
		|            {
		|                down = true;
		|                ContextMenuStrip.Show(this, new Point(Width, Height), ToolStripDropDownDirection.BelowLeft);
		|                Invalidate();
		|            }
		|        }
		|
		|        DataGridViewGrouperContextMenuStrip cm;
		|
		|        [Browsable(false)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public new DataGridViewGrouperContextMenuStrip ContextMenuStrip
		|        {
		|            get
		|            {
		|                if (cm == null)
		|                {
		|                    cm = new DataGridViewGrouperContextMenuStrip(grouper);
		|                    cm.Closed += new ToolStripDropDownClosedEventHandler(cm_Closed);
		|                }
		|                return cm;
		|            }
		|        }
		|
		|        void cm_Closed(object sender, ToolStripDropDownClosedEventArgs e)
		|        {
		|            down = false;
		|            Invalidate();
		|        }
		|
		|        bool down;
		|    }
		|
		|    // Инкапсулирует DataGridViewGrouperControl в ToolStripItem.
		|    public class DataGridViewGrouperControlItem : ToolStripControlHost
		|    {
		|        public DataGridViewGrouperControlItem() : base(new DataGridViewGrouperControl())
		|        {
		|            DataGridViewGrouperControl.MinimumSize = new Size(150, 20);
		|        }
		|
		|        public DataGridViewGrouperControl DataGridViewGrouperControl
		|        {
		|            get { return (DataGridViewGrouperControl)Control; }
		|        }
		|
		|        [DefaultValue(null)]
		|        public DataGridView DataGridView
		|        {
		|            get { return DataGridViewGrouperControl.DataGridView; }
		|            set { DataGridViewGrouperControl.DataGridView = value; }
		|        }
		|    }
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewGrouper" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"#region файл Support.cs
		|
		|// Код создан на основе разработки автора Robert.Verpalen https://www.codeproject.com/Tips/995958/DataGridViewGrouper под лицензией 
		|// The Code Project Open License (CPOL) 1.02 https://www.codeproject.com/info/cpol10.aspx
		|		
		|namespace Subro.IO
		|{
		|    public static class IOFunctions
		|    {
		|        public static SimpleObjectSerializer Serialize(object o, Stream s)
		|        {
		|            var os = new SimpleObjectSerializer(o);
		|            os.SerializeTo(s);
		|            return os;
		|        }
		|
		|        public static byte[] Serialize(object o)
		|        {
		|            var os = new SimpleObjectSerializer(o);
		|            return os.Serialize();
		|        }
		|
		|        public static byte[] Serialize(object o, SimpleObjectFieldSerializationMode FieldMode)
		|        {
		|            var os = new SimpleObjectSerializer(o, FieldMode);
		|            return os.Serialize();
		|        }
		|
		|        public static object Deserialize(byte[] data)
		|        {
		|            using (var ms = new MemoryStream(data))
		|            using (var b = new BinaryReader(ms))
		|            {
		|                return new SimpleObjectDeserializer(b).Object;
		|            }
		|        }
		|
		|        public static object Deserialize(BinaryReader b)
		|        {
		|            return new SimpleObjectDeserializer(b).Object;
		|        }
		|
		|        public static SimpleObjectFieldSerializationMode DefaultFieldSerialization = SimpleObjectFieldSerializationMode.Fields;
		|
		|        public static string GetTempFile(string Extension)
		|        {
		|            if (Extension == null) return Path.GetTempFileName();
		|            return Path.Combine(Path.GetTempPath(), Path.ChangeExtension(Guid.NewGuid().ToString(), Extension));
		|        }
		|    }
		|
		|    public enum SimpleObjectFieldSerializationMode
		|    {
		|        // То же, что и двоичная сериализация: открытые и закрытые поля.
		|        Fields,
		|        // То же, что и xml: общедоступные поля и свойства, доступные для записи.
		|        PublicFieldsAndProperties,
		|    }
		|
		|    public abstract class SimpleObjectSerializationBase
		|    {
		|        public readonly TypeCode TypeCode;
		|        public readonly object Object;
		|        public readonly bool IsArray;
		|        protected readonly DefinitionList defs;
		|        protected readonly TypeReference TypeRef;
		|        protected int ObjectIndex;
		|
		|        protected const byte CommandArraySpecifier = 128;
		|        protected const byte TypeCodeCompressedStringCollection = 64;
		|        protected const byte TypeCodeTypeCollection = 65;
		|        protected const byte TypeCodePreviousObject = 66;
		|        protected const BindingFlags Fieldflags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;
		|
		|        SimpleObjectSerializationBase(DefinitionList defs)
		|        {
		|            this.defs = defs;
		|        }
		|
		|        protected SimpleObjectSerializationBase(object Value, DefinitionList defs) : this(defs)
		|        {
		|            this.Object = Value;
		|            if (Value == null)
		|            {
		|                return;
		|            }
		|
		|            var type = Value.GetType();
		|            if (type.IsArray)
		|            {
		|                IsArray = true;
		|                type = type.GetElementType();
		|            }
		|            this.TypeCode = Type.GetTypeCode(type);
		|            if (TypeCode == TypeCode.Object)
		|            {
		|                TypeRef = defs.RegisterType(type);
		|            }
		|
		|            if (NeedRegister)
		|            {
		|                defs.Register(Object, this);
		|            }
		|        }
		|
		|        protected bool NeedRegister
		|        {
		|            get
		|            {
		|                return IsArray || TypeCode == TypeCode.Object;
		|            }
		|        }
		|
		|        // Конструктор десериализации.
		|        protected SimpleObjectSerializationBase(BinaryReader b, DefinitionList defs) : this(defs)
		|        {
		|            var by = b.ReadByte();
		|
		|            while (true)
		|            {
		|                if (by == TypeCodeCompressedStringCollection)
		|                {
		|                    defs.Strings.Deserialize(b);
		|                }
		|                else if (by == TypeCodeTypeCollection)
		|                {
		|                    defs.DeserializeTypes(b);
		|                }
		|                else if (by == TypeCodePreviousObject)
		|                {
		|                    ObjectIndex = b.ReadUInt16();
		|                    var po = defs.Objects[ObjectIndex];
		|                    Object = po.Object;
		|                    TypeCode = po.Serializer.TypeCode;
		|                    IsArray = po.Serializer.IsArray;
		|                    return;
		|                }
		|                else
		|                {
		|                    break;
		|                }
		|
		|                by = b.ReadByte();
		|            }
		|
		|            if ((by & CommandArraySpecifier) > 0)
		|            {
		|                IsArray = true;
		|                by ^= CommandArraySpecifier;
		|            }
		|
		|            if (by == 0)
		|            {
		|                return;
		|            }
		|            TypeCode = (TypeCode)by;
		|
		|            if (TypeCode == TypeCode.Object)
		|            {
		|                var tn = b.ReadUInt16();
		|                TypeRef = defs.GetType(tn);
		|            }
		|            this.Object = Restore(b);
		|        }
		|
		|        protected virtual object Restore(BinaryReader b)
		|        {
		|            return null;
		|        }
		|
		|        protected class RegisteredObject
		|        {
		|            public object Object;
		|            public SimpleObjectSerializationBase Serializer;
		|            public int Index;
		|        }
		|
		|        protected class DefinitionList
		|        {
		|            List<TypeReference> types = new List<TypeReference>();
		|            public readonly StringCompacterCollection Strings = new StringCompacterCollection();
		|            public readonly List<RegisteredObject> Objects = new List<RegisteredObject>();
		|
		|            public TypeReference RegisterType(Type type)
		|            {
		|                var tr = types.FirstOrDefault(t => t.Type == type);
		|                if (tr == null)
		|                {
		|                    tr = new TypeReference(
		|                         type,
		|                         Strings.Add(type.FullName + "", "" + type.Assembly.GetName().Name),
		|                         types.Count);
		|                    // if (tr.Constructor == null)throw new Exception(type.FullName + "" is not valid for serialization: the object does not contain a parameterless constructor"");
		|                    types.Add(tr);
		|                }
		|                return tr;
		|            }
		|
		|            public RegisteredObject Register(object obj, SimpleObjectSerializationBase o)
		|            {
		|                var r = new RegisteredObject { Object = obj, Serializer = o, Index = Objects.Count };
		|                Objects.Add(r);
		|                o.ObjectIndex = r.Index;
		|                return r;
		|            }
		|
		|            public TypeReference GetType(int i)
		|            {
		|                return types[i];
		|            }
		|
		|            public int AddString(string s)
		|            {
		|                return Strings.Add(s);
		|            }
		|
		|            internal void Serialize(SimpleObjectSerializer s)
		|            {
		|                var w = s.Writer;
		|                if (Strings.Count > 0)
		|                {
		|                    w.Write(TypeCodeCompressedStringCollection);
		|                    Strings.Serialize(s);
		|                }
		|                if (types.Count > 0)
		|                {
		|                    w.Write(TypeCodeTypeCollection);
		|                    w.Write((UInt16)types.Count);
		|                    for (int i = 0; i < types.Count; i++)
		|                    {
		|                        w.Write((UInt16)types[i].StringIndex);
		|                    }
		|                }
		|            }
		|
		|            public SimpleObjectSerializer NullValueSerializer;
		|
		|            public void DeserializeTypes(BinaryReader b)
		|            {
		|                types.Clear();
		|                int cnt = b.ReadUInt16();
		|                for (int i = 0; i < cnt; i++)
		|                {
		|                    int ti = b.ReadUInt16();
		|                    var name = Strings[ti];
		|                    Type type = null;
		|                    try
		|                    {
		|                        type = Type.GetType(name, false);
		|                    }
		|                    catch { }
		|
		|                    if (type == null)
		|                    {
		|                        if (clean(ref name))
		|                        {
		|                            try
		|                            {
		|                                type = Type.GetType(name, false);
		|                            }
		|                            catch { }
		|                        }
		|
		|                        if (type == null)
		|                        {
		|                            throw new TypeLoadException(""Could not determine type for "" + name + "". Does the executing assembly contain the specified assembly?"");
		|                        }
		|                    }
		|                    types.Add(new TypeReference(type, ti, i));
		|                }
		|            }
		|
		|            // public bool IgnoreTypeErrors = true;
		|
		|            bool clean(ref string name)
		|            {
		|                var cleaned = System.Text.RegularExpressions.Regex.Replace(name, @"",\s*Version=[0-9\.]+"", string.Empty);
		|                if (cleaned == name)
		|                {
		|                    return false;
		|                }
		|                name = cleaned;
		|                return true;
		|            }
		|        }
		|
		|        public class TypeReference
		|        {
		|            public readonly Type Type;
		|            public readonly int StringIndex;
		|            public readonly int Index;
		|
		|            public TypeReference(Type Type, int StringIndex, int Index)
		|            {
		|                this.Type = Type;
		|                this.StringIndex = StringIndex;
		|                this.Index = Index;
		|            }
		|
		|            ConstructorInfo ci;
		|            public ConstructorInfo Constructor
		|            {
		|                get
		|                {
		|                    if (ci == null)
		|                    {
		|                        ci = Type.GetConstructor(Fieldflags, null, Type.EmptyTypes, null);
		|                    }
		|                    return ci;
		|                }
		|            }
		|        }
		|
		|        public override string ToString()
		|        {
		|            if (Object == null)
		|            {
		|                return null;
		|            }
		|            return Object.ToString();
		|        }
		|
		|        public bool IsEmpty
		|        {
		|            get
		|            {
		|                return TypeCode == TypeCode.Empty;
		|            }
		|        }
		|    }
		|
		|    public interface IContentWriter
		|    {
		|        void WriteContents(BinaryWriter w);
		|    }
		|
		|    public class SimpleObjectSerializer : SimpleObjectSerializationBase, IContentWriter
		|    {
		|        public readonly SimpleObjectFieldSerializationMode FieldMode;
		|        public readonly IContentWriter[] Children;
		|        public readonly ICustomSerializer CustomSerializer;
		|        protected readonly int StringIndex;
		|
		|        public SimpleObjectSerializer(object Value) : this(Value, IOFunctions.DefaultFieldSerialization)
		|        {
		|        }
		|
		|        public SimpleObjectSerializer(object Value, SimpleObjectFieldSerializationMode FieldMode) : this(Value, FieldMode, new DefinitionList())
		|        {
		|        }
		|
		|        private SimpleObjectSerializer(object Value, SimpleObjectFieldSerializationMode FieldMode, DefinitionList Types) : base(Value, Types)
		|        {
		|            this.FieldMode = FieldMode;
		|            if (IsEmpty)
		|            {
		|                return;
		|            }
		|
		|            if (IsArray)
		|            {
		|                Children = GetArrayValues().ToArray();
		|            }
		|            else if (TypeCode == TypeCode.Object)
		|            {
		|                this.CustomSerializer = Object as ICustomSerializer;
		|                if (CustomSerializer != null && CustomSerializer.Initialize(this))
		|                {
		|                    return;
		|                }
		|                Children = GetFields().ToArray();
		|            }
		|            else if (TypeCode == TypeCode.String)
		|            {
		|                StringIndex = defs.Strings.Add((string)Value);
		|            }
		|        }
		|
		|        IEnumerable<IContentWriter> GetArrayValues()
		|        {
		|            var arr = (Array)Object;
		|            for (int i = 0; i < arr.Length; i++)
		|            {
		|                var o = arr.GetValue(i);
		|                yield return GetSubValue(o);
		|            }
		|        }
		|
		|        IContentWriter GetSubValue(object o)
		|        {
		|            if (o == null)
		|            {
		|                if (defs.NullValueSerializer == null)
		|                {
		|                    defs.NullValueSerializer = new SimpleObjectSerializer(null, FieldMode, defs);
		|                }
		|                return defs.NullValueSerializer;
		|            }
		|            var res = defs.Objects.FirstOrDefault(r => r.Object == o);
		|            if (res == null)
		|            {
		|                return new SimpleObjectSerializer(o, FieldMode, defs);
		|            }
		|            return new PreviousObjectWriter { Object = (SimpleObjectSerializer)res.Serializer };
		|        }
		|
		|        class PreviousObjectWriter : IContentWriter
		|        {
		|            public SimpleObjectSerializer Object;
		|
		|            public void WriteContents(BinaryWriter w)
		|            {
		|                w.Write(TypeCodePreviousObject);
		|                w.Write((UInt16)Object.ObjectIndex);
		|            }
		|        }
		|
		|        IEnumerable<FieldReference> GetFields()
		|        {
		|            var vars = GetVariables(TypeRef.Type).Select(mi => new MemberValue { Member = mi }).Where(m => ShouldSerialize(m.Member, ref m.Value)).ToArray();
		|
		|            foreach (var mi in vars)
		|            {
		|                var o = GetSubValue(mi.Value);
		|                yield return new FieldReference
		|                {
		|                    FieldIndex = defs.Strings.Add(mi.Member.Name),
		|                    Serializer = o
		|                };
		|            }
		|        }
		|
		|        BinaryWriter w;
		|        public BinaryWriter Writer
		|        {
		|            get { return w; }
		|        }
		|
		|        public void SerializeTo(Stream s)
		|        {
		|            var b = new BinaryWriter(s);
		|            SerializeTo(b);
		|        }
		|
		|        void writeindex(int i)
		|        {
		|            w.Write((UInt16)i);
		|        }
		|
		|        void IContentWriter.WriteContents(BinaryWriter w)
		|        {
		|            WriteContents(w);
		|        }
		|
		|        void WriteContents(BinaryWriter w)
		|        {
		|            this.w = w;
		|
		|            if (IsEmpty)
		|            {
		|                WriteEmpty();
		|                return;
		|            }
		|
		|            var tc = (byte)TypeCode;
		|            if (IsArray)
		|            {
		|                tc |= CommandArraySpecifier;
		|            }
		|            w.Write(tc);
		|
		|            if (TypeRef != null)
		|            {
		|                writeindex(TypeRef.Index);
		|            }
		|
		|            if (CustomSerializer != null)
		|            {
		|                if (CustomSerializer.Serialize(this))
		|                {
		|                    return;
		|                }
		|            }
		|
		|            if (Children != null)
		|            {
		|                if (IsArray)
		|                {
		|                    w.Write(Children.Length);
		|                }
		|                else
		|                {
		|                    w.Write((UInt16)Children.Length);
		|                }
		|                foreach (var o in Children)
		|                {
		|                    o.WriteContents(w);
		|                }
		|            }
		|            else if (TypeCode != TypeCode.DBNull)
		|            {
		|                WriteValue();
		|            }
		|        }
		|
		|        public void SerializeTo(BinaryWriter w)
		|        {
		|            this.w = w;
		|
		|            //write defs
		|            defs.Serialize(this);
		|
		|            //write
		|            WriteContents(w);
		|        }
		|
		|        public byte[] Serialize()
		|        {
		|            using (var ms = new MemoryStream())
		|            {
		|                SerializeTo(ms);
		|                return ms.ToArray();
		|            }
		|        }
		|
		|        void WriteEmpty()
		|        {
		|            w.Write((byte)0);
		|        }
		|
		|        public void WriteSubValue(object value)
		|        {
		|            if (value == null)
		|            {
		|                WriteEmpty();
		|            }
		|            else
		|            {
		|                GetSubValue(value).WriteContents(w);
		|            }
		|        }
		|
		|        void WriteValue()
		|        {
		|            if (TypeCode == TypeCode.DateTime)
		|            {
		|                w.Write(((DateTime)Object).Ticks);
		|            }
		|            else if (TypeCode == TypeCode.String)
		|            {
		|                w.Write((UInt16)StringIndex);
		|            }
		|            else if (TypeCode == TypeCode.Int32)
		|            {
		|                w.Write((int)Object);
		|            }
		|            else if (TypeCode == TypeCode.Int64)
		|            {
		|                w.Write((long)Object);
		|            }
		|            else if (TypeCode == TypeCode.UInt32)
		|            {
		|                w.Write((uint)Object);
		|            }
		|            else if (TypeCode == TypeCode.UInt64)
		|            {
		|                w.Write((ulong)Object);
		|            }
		|            else if (TypeCode == TypeCode.Double)
		|            {
		|                w.Write((double)Object);
		|            }
		|            else if (TypeCode == TypeCode.Single)
		|            {
		|                w.Write((float)Object);
		|            }
		|            else if (TypeCode == TypeCode.Byte)
		|            {
		|                w.Write((byte)Object);
		|            }
		|            else if (TypeCode == TypeCode.Boolean)
		|            {
		|                w.Write((bool)Object);
		|            }
		|            else
		|            {
		|                var type = Type.GetType(""System."" + TypeCode);
		|                var p = w.GetType().GetMethod(""Write"", new Type[] { type });
		|                p.Invoke(w, new object[] { Object });
		|            }
		|        }
		|
		|        protected bool ShouldSerialize(MemberInfo m, ref object val)
		|        {
		|            if (!m.GetIsWritable())
		|            {
		|                // Не сериализуйте поля и свойства, доступные только для чтения.
		|                return false;
		|            }
		|            if (m.GetCustomAttributes(typeof(NonSerializedAttribute), false).Length > 0)
		|            {
		|                // Пропускать поля/реквизиты с несериализованным атрибутом.
		|                return false;
		|            }
		|            var shs = m.DeclaringType.GetMethod(
		|                ""ShouldSerialize"" + m.Name,
		|                BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public,
		|                null,
		|                Type.EmptyTypes,
		|                null);
		|            if (shs != null && !(bool)shs.Invoke(Object, null))
		|            {
		|                return false;
		|            }
		|            val = m.GetValue(Object);
		|            if (val is Pointer || val is IntPtr)
		|            {
		|                return false;
		|            }
		|            var dv = (DefaultValueAttribute)m.GetCustomAttributes(typeof(DefaultValueAttribute), true).FirstOrDefault();
		|            if (dv == null)
		|            {
		|                return true;
		|            }
		|            return !object.Equals(val, dv.Value);
		|        }
		|
		|        protected virtual IEnumerable<MemberInfo> GetVariables(Type type)
		|        {
		|            if (FieldMode == SimpleObjectFieldSerializationMode.Fields)
		|            {
		|                while (type != typeof(object))
		|                {
		|                    foreach (var m in type.GetFields(Fieldflags))
		|                    {
		|                        yield return m;
		|                    }
		|                    type = type.BaseType;
		|                }
		|            }
		|            else
		|            {
		|                foreach (var m in type.GetFields())
		|                {
		|                    yield return m;
		|                }
		|                foreach (var m in type.GetProperties())
		|                {
		|                    yield return m;
		|                }
		|            }
		|        }
		|
		|        class FieldReference : IContentWriter
		|        {
		|            public IContentWriter Serializer;
		|            public int FieldIndex;
		|            public void WriteContents(BinaryWriter w)
		|            {
		|                w.Write((UInt16)FieldIndex);
		|                Serializer.WriteContents(w);
		|            }
		|        }
		|
		|        class MemberValue
		|        {
		|            public MemberInfo Member;
		|            public object Value;
		|        }
		|    }
		|
		|    public class SimpleObjectDeserializer : SimpleObjectSerializationBase
		|    {
		|        internal SimpleObjectDeserializer(BinaryReader b) : this(b, new DefinitionList())
		|        {
		|        }
		|
		|        private SimpleObjectDeserializer(BinaryReader b, DefinitionList types) : base(b, types)
		|        {
		|        }
		|
		|        Type GetObjectType()
		|        {
		|            if (TypeRef == null)
		|            {
		|                return Type.GetType(""System."" + TypeCode);
		|            }
		|            return TypeRef.Type;
		|        }
		|
		|        public BinaryReader Reader
		|        {
		|            get { return b; }
		|        }
		|
		|        BinaryReader b;
		|
		|        protected override object Restore(BinaryReader reader)
		|        {
		|            this.b = reader;
		|            if (IsArray)
		|            {
		|                return RestoreArray();
		|            }
		|            else if (TypeCode == TypeCode.Object)
		|            {
		|                return restoreobject();
		|            }
		|            else if (TypeCode == TypeCode.DateTime)
		|            {
		|                return new DateTime(b.ReadInt64());
		|            }
		|            else if (TypeCode == TypeCode.Int32)
		|            {
		|                return b.ReadInt32();
		|            }
		|            else if (TypeCode == TypeCode.String)
		|            {
		|                return defs.Strings[b.ReadUInt16()];
		|            }
		|            else if (TypeCode == TypeCode.DBNull)
		|            {
		|                return DBNull.Value;
		|            }
		|            else
		|            {
		|                // Наиболее распространенные типы имеют строгие ссылки, на другие методы ссылаются с помощью отражения.
		|                var p = b.GetType().GetMethod(""Read"" + TypeCode.ToString());
		|                return p.Invoke(b, null);
		|            }
		|        }
		|
		|        public Array RestoreArray()
		|        {
		|            var len = b.ReadInt32();
		|            var arr = Array.CreateInstance(GetObjectType(), len);
		|            defs.Register(arr, this);
		|            for (int i = 0; i < len; i++)
		|            {
		|                var val = GetSubValue();
		|                arr.SetValue(val, i);
		|            }
		|            return arr;
		|        }
		|
		|        public object GetSubValue()
		|        {
		|            return new SimpleObjectDeserializer(b, defs).Object;
		|        }
		|
		|        object restoreobject()
		|        {
		|            var ci = TypeRef.Constructor;
		|            if (ci == null)
		|            {
		|                throw new Exception(""Cannot create an instance of "" + TypeRef.Type.FullName);
		|            }
		|            var o = ci.Invoke(null);
		|            defs.Register(o, this);
		|            var co = o as ICustomSerializer;
		|            if (co != null)
		|            {
		|                if (co.Deserialize(this)) return o;
		|            }
		|
		|            var cnt = b.ReadUInt16(); // Количество сериализованных полей объекта.
		|            if (cnt > 0)
		|            {
		|                for (int i = 0; i < cnt; i++)
		|                {
		|                    int fi = b.ReadUInt16();
		|                    string name = defs.Strings[fi];
		|                    var mi = GetMember(TypeRef.Type, name);
		|                    var val = GetSubValue();
		|                    if (mi == null)
		|                    {
		|                        // Возможная разница в версии.
		|                        continue;
		|                    }
		|                    mi.SetValue(o, val);
		|                }
		|            }
		|            return o;
		|        }
		|
		|        MemberInfo GetMember(Type type, string field)
		|        {
		|            var mi = type.GetMember(field, MemberTypes.Field | MemberTypes.Property, Fieldflags);
		|            if (mi.Length == 0)
		|            {
		|                if (type == typeof(object))
		|                {
		|                    return null;
		|                }
		|                return GetMember(type.BaseType, field);
		|            }
		|            return mi[0];
		|        }
		|    }
		|
		|    public interface ICustomSerializer
		|    {
		|        bool Initialize(SimpleObjectSerializer serializer);
		|        bool Serialize(SimpleObjectSerializer serializer);
		|        bool Deserialize(SimpleObjectDeserializer deserializer);
		|    }
		|
		|    public class StringCompacter
		|    {
		|        List<char> chars;
		|
		|        public StringCompacter()
		|        {
		|            chars = new List<char>();
		|            for (char c = 'A'; c < 91; c++)
		|            {
		|                chars.Add(c);
		|                chars.Add(char.ToLower(c));
		|            }
		|            chars.AddRange(""._+, <>"");
		|            setbase();
		|        }
		|
		|        public StringCompacter(IEnumerable<char> chars)
		|        {
		|            this.chars = new List<char>(chars);
		|            setbase();
		|        }
		|
		|        public StringCompacter(params char[] chars)
		|        {
		|            this.chars = new List<char>(chars);
		|            setbase();
		|        }
		|
		|        void setbase()
		|        {
		|            Base = (int)Math.Ceiling(Math.Log(chars.Count + 1, 2));
		|        }
		|
		|        int Base;
		|
		|        public char[] GetChars()
		|        {
		|            return chars.ToArray();
		|        }
		|
		|        public byte[] Serialize(string s)
		|        {
		|            var ba = new System.Collections.BitArray(s.Length * Base);
		|
		|            int pos = 0;
		|            foreach (var c in s)
		|            {
		|                int mask = 1;
		|                int val = chars.IndexOf(c) + 1;
		|                if (val == 0)
		|                {
		|                    throw new ArgumentException();
		|                }
		|                for (int i = 0; i < Base; i++)
		|                {
		|                    if ((val & mask) > 0)
		|                    {
		|                        ba[pos] = true;
		|                    }
		|                    mask <<= 1;
		|                    pos++;
		|                }
		|            }
		|
		|            int len = (int)Math.Ceiling((ba.Length + Base) / 8d);
		|            byte[] arr = new byte[len];
		|
		|            ba.CopyTo(arr, 0);
		|
		|            return arr;
		|        }
		|
		|        public string Deserialize(BinaryReader b)
		|        {
		|            return Deserialize(Enumerate(b));
		|        }
		|
		|        IEnumerable<byte> Enumerate(BinaryReader b)
		|        {
		|            var s = b.BaseStream;
		|            var len = s.Length;
		|            while (s.Position < len)
		|            {
		|                yield return b.ReadByte();
		|            }
		|        }
		|
		|        StringBuilder sb;
		|        public string Deserialize(IEnumerable<byte> data)
		|        {
		|            if (sb == null)
		|            {
		|                sb = new StringBuilder();
		|            }
		|            else
		|            {
		|                sb.Length = 0;
		|            }
		|
		|            var en = data.GetEnumerator();
		|
		|            int pos = 256;
		|            byte b = 0;
		|            while (true)
		|            {
		|                int val = 0;
		|                for (int i = 0; i < Base; i++)
		|                {
		|                    if (pos > 128)
		|                    {
		|                        pos = 1;
		|                        if (!en.MoveNext())
		|                        {
		|                            break;
		|                        }
		|                        b = en.Current;
		|                    }
		|                    if ((b & pos) > 0)
		|                    {
		|                        val |= (1 << i);
		|                    }
		|
		|                    pos <<= 1;
		|                }
		|                if (val == 0)
		|                {
		|                    break;
		|                }
		|                sb.Append(chars[--val]);
		|            }
		|
		|            return sb.ToString();
		|        }
		|    }
		|
		|    public class StringCompacterCollection : ICustomSerializer
		|    {
		|        List<string> list = new List<string>();
		|
		|        public int Count
		|        {
		|            get { return list.Count; }
		|        }
		|
		|        public int Add(string s)
		|        {
		|            int i = list.IndexOf(s);
		|            if (i == -1)
		|            {
		|                list.Add(s);
		|                compacter = null;
		|                return list.Count - 1;
		|            }
		|            return i;
		|        }
		|
		|        public string this[int index]
		|        {
		|            get { return list[index]; }
		|        }
		|
		|        StringCompacter compacter;
		|
		|        public bool Serialize(SimpleObjectSerializer serializer)
		|        {
		|            serializer.Writer.Write((UInt16)Count);
		|            if (Count == 0)
		|            {
		|                return true;
		|            }
		|
		|            if (compacter == null)
		|            {
		|                var chars = new List<char>();
		|                foreach (var s in list)
		|                {
		|                    foreach (var c in s)
		|                    {
		|                        if (!chars.Contains(c))
		|                        {
		|                            chars.Add(c);
		|                        }
		|                    }
		|                }
		|
		|                compacter = new StringCompacter(chars);
		|            }
		|
		|            serializer.Writer.Write(new string(compacter.GetChars()));
		|            foreach (var s in list)
		|            {
		|                serializer.Writer.Write(compacter.Serialize(s));
		|            }
		|            return true;
		|        }
		|
		|        bool ICustomSerializer.Initialize(SimpleObjectSerializer s)
		|        {
		|            return true;
		|        }
		|
		|        public bool SerializationHandled
		|        {
		|            get { return true; }
		|        }
		|
		|        internal void Deserialize(BinaryReader reader)
		|        {
		|            list.Clear();
		|            compacter = null;
		|            int cnt = reader.ReadUInt16();
		|            if (cnt > 0)
		|            {
		|                var chars = reader.ReadString();
		|                compacter = new StringCompacter(chars);
		|
		|                for (int i = 0; i < cnt; i++)
		|                {
		|                    list.Add(compacter.Deserialize(reader));
		|                }
		|            }
		|        }
		|
		|        public bool Deserialize(SimpleObjectDeserializer deserializer)
		|        {
		|            Deserialize(deserializer.Reader);
		|            return true;
		|        }
		|    }
		|}
		|
		|namespace Subro
		|{
		|    public static class ReflectionExtensions
		|    {
		|        [DebuggerHidden]
		|        public static object GetValue(this MemberInfo mi, object o)
		|        {
		|            //if (o == null) return null; // Может быть статичным.
		|            if (mi is PropertyInfo)
		|            {
		|                return ((PropertyInfo)mi).GetValue(o, null);
		|            }
		|            if (mi is FieldInfo)
		|            {
		|                return ((FieldInfo)mi).GetValue(o);
		|            }
		|            return null;
		|        }
		|
		|        [DebuggerHidden]
		|        public static object GetValue(this PropertyInfo pi, object o)
		|        {
		|            //if (o == null) return null;
		|            return pi.GetValue(o, null);
		|        }
		|
		|        public static Type GetMemberType(this MemberInfo mi)
		|        {
		|            if (mi is PropertyInfo)
		|            {
		|                return ((PropertyInfo)mi).PropertyType;
		|            }
		|            if (mi is FieldInfo)
		|            {
		|                return ((FieldInfo)mi).FieldType;
		|            }
		|            return null;
		|        }
		|
		|        public static bool GetIsWritable(this MemberInfo mi)
		|        {
		|            if (mi is FieldInfo)
		|            {
		|                return !((FieldInfo)mi).IsInitOnly;
		|            }
		|            return ((PropertyInfo)mi).CanWrite;
		|        }
		|
		|        public static IEnumerable<MemberInfo> GetFieldsAndProperties(this Type type)
		|        {
		|            MemberInfo[] fields = type.GetFields();
		|            return fields.Concat(type.GetProperties());
		|        }
		|
		|        [DebuggerHidden]
		|        public static void SetValue(this MemberInfo mi, object obj, object value)
		|        {
		|            if (mi is PropertyInfo)
		|            {
		|                ((PropertyInfo)mi).SetValue(obj, value, null);
		|            }
		|            else
		|            {
		|                ((FieldInfo)mi).SetValue(obj, value);
		|            }
		|        }
		|
		|        public static IEnumerable<T> GetAttributes<T>(this ICustomAttributeProvider cap)
		|        {
		|            return from a in cap.GetCustomAttributes(typeof(T), true) select (T)a;
		|        }
		|
		|        public static T GetAttribute<T>(this ICustomAttributeProvider cap) where T : Attribute
		|        {
		|            return GetAttributes<T>(cap).FirstOrDefault();
		|        }
		|    }
		|}
		|
		|namespace Subro
		|{
		|    // Comparer, который пытается найти ""самый сильный"" компаратор для типа. 
		|    // Если тип реализует универсальный IComparable, он используется.
		|    // В противном случае, если он реализует обычный IComparable, он используется.
		|    // Если ни то, ни другое не реализовано, сравниваются версии приведенные ToString. 
		|    // Также поддерживаются заполняемые структуры.
		|    // Таким образом, DefaultComparer может сравнивать любые типы объектов и может использоваться для сортировки любого источника.
		|    public class GenericComparer : IGenericComparer
		|    {
		|        public GenericComparer()
		|        {
		|        }
		|
		|        public GenericComparer(Type Type)
		|        {
		|            this.Type = Type;
		|        }
		|
		|        Type type;
		|        public Type Type
		|        {
		|            get { return type; }
		|            set
		|            {
		|                if (type == value) return;
		|                if (value == null) throw new ArgumentNullException();
		|                type = value;
		|                reset();
		|            }
		|        }
		|
		|        Type targettype;
		|        // Обычно совпадает с типом, но может быть установлен другой тип.
		|        public Type TargetType
		|        {
		|            get
		|            {
		|                if (targettype == null)
		|                {
		|                    return type;
		|                }
		|                return targettype;
		|            }
		|            set
		|            {
		|                if (TargetType == value)
		|                {
		|                    return;
		|                }
		|                targettype = value;
		|                reset();
		|            }
		|        }
		|
		|        void reset()
		|        {
		|            comp = null;
		|            eq = null;
		|        }
		|
		|        IComparer comp;
		|        IEqualityComparer eq;
		|
		|        public bool Descending
		|        {
		|            get { return factor < 0; }
		|            set { factor = value ? -1 : 1; }
		|        }
		|
		|        int factor = 1;
		|
		|        public int Compare(object x, object y)
		|        {
		|            if (x == y)
		|            {
		|                return 0;
		|            }
		|            if (x == null)
		|            {
		|                return -factor;
		|            }
		|            if (y == null)
		|            {
		|                return factor;
		|            }
		|            if (type == null)
		|            {
		|                Type = x.GetType();
		|            }
		|            if (comp == null)
		|            {
		|                comp = CompareFunctions.GetComparer(type, TargetType);
		|            }
		|            return factor * comp.Compare(x, y);
		|        }
		|
		|        public new bool Equals(object x, object y)
		|        {
		|            if (x == y)
		|            {
		|                return true;
		|            }
		|            if (x == null || y == null)
		|            {
		|                return false;
		|            }
		|            if (type == null)
		|            {
		|                Type = x.GetType();
		|            }
		|            if (eq == null)
		|            {
		|                eq = CompareFunctions.GetEqualityComparer(type, TargetType);
		|            }
		|            return eq.Equals(x, y);
		|        }
		|
		|        public int GetHashCode(object obj)
		|        {
		|            if (obj == null)
		|            {
		|                return 0;
		|            }
		|            return obj.GetHashCode();
		|        }
		|
		|        public IGenericComparer ThenBy(GenericComparer cmp)
		|        {
		|            var list = new GenericComparers();
		|            list.Add(cmp);
		|            return list;
		|        }
		|    }
		|
		|    public interface IGenericComparer : IComparer, IEqualityComparer
		|    {
		|        IGenericComparer ThenBy(GenericComparer cmp);
		|    }
		|
		|    // Список для сравнения нескольких GenericComparers после одного и другого.
		|    public class GenericComparers : List<GenericComparer>, IGenericComparer
		|    {
		|        public int Compare(object x, object y)
		|        {
		|            return ObjectExtensions.Compare(this, x, y);
		|        }
		|
		|        public new bool Equals(object x, object y)
		|        {
		|            return this.All(c => c.Equals(x, y));
		|        }
		|
		|        public int GetHashCode(object obj)
		|        {
		|            if (obj == null)
		|            {
		|                return 0;
		|            }
		|            return obj.GetHashCode();
		|        }
		|
		|        public IGenericComparer ThenBy(GenericComparer cmp)
		|        {
		|            Add(cmp);
		|            return this;
		|        }
		|    }
		|
		|    public static partial class ObjectExtensions
		|    {
		|        public static int Compare(this IEnumerable<IComparer> cmp, object x, object y)
		|        {
		|            foreach (var c in cmp)
		|            {
		|                int i = c.Compare(x, y);
		|                if (i != 0)
		|                {
		|                    return i;
		|                }
		|            }
		|            return 0;
		|        }
		|    }
		|
		|    static partial class CompareFunctions
		|    {
		|        static IComparer GetGenericComparer(Type From, Type To)
		|        {
		|            return (IComparer)GetGeneric(From, To, typeof(IComparable<>));
		|        }
		|
		|        static IEqualityComparer GetGenericEqualityComparer(Type From, Type To)
		|        {
		|            return (IEqualityComparer)GetGeneric(From, To, typeof(IEquatable<>), typeof(IComparable<>));
		|        }
		|
		|        static Type GetInnerType(Type type)
		|        {
		|            if (type.IsGenericType && typeof(Nullable<>) == type.GetGenericTypeDefinition())
		|            {
		|                return type.GetGenericArguments()[0];
		|            }
		|            return type;
		|        }
		|
		|        static bool hasbase(Type type)
		|        {
		|            return type.BaseType != null && type.BaseType != typeof(object);
		|        }
		|
		|        static object GetGeneric(Type From, Type To, params Type[] GenericBaseTypes)
		|        {
		|            //From = GetBaseType(From);
		|            while (true)
		|            {
		|                foreach (var g in GenericBaseTypes)
		|                {
		|                    var type = To;
		|                    while (type != null)
		|                    {
		|                        if (g.MakeGenericType(type).IsAssignableFrom(From))
		|                        {
		|                            if (g == typeof(IEquatable<>))
		|                            {
		|                                return Activator.CreateInstance(typeof(StrongEquatable<,>).MakeGenericType(From, type));
		|                            }
		|                            return Activator.CreateInstance(typeof(StrongCompare<,>).MakeGenericType(From, type));
		|                        }
		|                        var inner = GetInnerType(type);
		|                        if (inner == type)
		|                        {
		|                            type = type.BaseType;
		|                        }
		|                        else
		|                        {
		|                            type = inner;
		|                        }
		|                    }
		|                }
		|
		|                if (hasbase(From))
		|                {
		|                    From = From.BaseType;
		|                }
		|                else
		|                {
		|                    return null;
		|                }
		|            }
		|            //return null;
		|        }
		|
		|        internal static IComparer GetComparer(Type From, Type To)
		|        {
		|            if (From == To && From == typeof(string))
		|            {
		|                return new StringComparer();
		|            }
		|            From = GetInnerType(From);
		|
		|            var gen = GetGenericComparer(From, To);
		|            if (gen != null)
		|            {
		|                return gen;
		|            }
		|            else if (typeof(IComparable).IsAssignableFrom(From))
		|            {
		|                return (IComparer)Activator.CreateInstance(typeof(NonGenericCompare<>).MakeGenericType(From));
		|            }
		|            return new StringComparer();
		|        }
		|
		|        internal static IEqualityComparer GetEqualityComparer(Type From, Type To)
		|        {
		|            if (From == To && From == typeof(string))
		|            {
		|                return new StringComparer();
		|            }
		|            From = GetInnerType(From);
		|
		|            var eq = GetGenericEqualityComparer(From, To);
		|            if (eq != null)
		|            {
		|                return eq;
		|            }
		|            return new DefaultEquals();
		|        }
		|
		|        class DefaultEquals : IEqualityComparer
		|        {
		|            public new bool Equals(object x, object y)
		|            {
		|                return x.Equals(y);
		|            }
		|
		|            public int GetHashCode(object o)
		|            {
		|                return o.GetHashCode();
		|            }
		|        }
		|        /*
		|        class NullableComparer<T> : IComparer
		|            where T : struct
		|        {
		|
		|            public readonly IComparer BaseComparer;
		|            public NullableComparer(IComparer BaseComparer)
		|            {
		|                this.BaseComparer = BaseComparer;
		|
		|            }
		|
		|            object getval(object o)
		|            {
		|                return ((Nullable<T>)o).Value;
		|            }
		|
		|            public int Compare(object x, object y)
		|            {
		|                return BaseComparer.Compare(getval(x), getval(y));
		|            }
		|        }*/
		|
		|        class StrongEquatable<F, T> : IEqualityComparer where F : IEquatable<T>
		|        {
		|            public new bool Equals(object x, object y)
		|            {
		|                return ((F)x).Equals((T)y);
		|            }
		|
		|            public int GetHashCode(object o)
		|            {
		|                return o.GetHashCode();
		|            }
		|        }
		|
		|        class StrongCompare<F, T> : IComparer, IEqualityComparer where F : IComparable<T>
		|        {
		|            public int Compare(object x, object y)
		|            {
		|                return ((F)x).CompareTo((T)y);
		|            }
		|
		|            public new bool Equals(object x, object y)
		|            {
		|                return Compare(x, y) == 0;
		|            }
		|
		|            public int GetHashCode(object o)
		|            {
		|                return o.GetHashCode();
		|            }
		|        }
		|
		|        class NonGenericCompare<T> : IComparer where T : IComparable
		|        {
		|            public int Compare(object x, object y)
		|            {
		|                return ((T)x).CompareTo(y);
		|            }
		|        }
		|
		|        class StringComparer : IComparer, IEqualityComparer
		|        {
		|            public int Compare(object x, object y)
		|            {
		|                return string.Compare(x.ToString(), y.ToString());
		|            }
		|
		|            public new bool Equals(object x, object y)
		|            {
		|                return string.Equals(x.ToString(), y.ToString());
		|            }
		|
		|            public int GetHashCode(object o)
		|            {
		|                return o.GetHashCode();
		|            }
		|        }
		|    }
		|
		|    public class GenericComparer<T> : GenericComparer, IComparer<T>
		|    {
		|        public GenericComparer() : base(typeof(T))
		|        {
		|        }
		|
		|        public int Compare(T a, T b)
		|        {
		|            return base.Compare(a, b);
		|        }
		|    }
		|
		|    public class GenericComparer<T1, T2> : GenericComparer
		|    {
		|        public GenericComparer() : base(typeof(T1))
		|        {
		|            TargetType = typeof(T2);
		|        }
		|
		|        public int Compare(T1 a, T2 b)
		|        {
		|            return base.Compare(a, b);
		|        }
		|
		|        public bool Equals(T1 a, T2 b)
		|        {
		|            return base.Equals(a, b);
		|        }
		|    }
		|
		|    public class PropertyDescriptorComparer : GenericComparer
		|    {
		|        public readonly PropertyDescriptor Prop;
		|
		|        public PropertyDescriptorComparer(PropertyDescriptor Prop) : this(Prop, true)
		|        {
		|        }
		|
		|        public PropertyDescriptorComparer(PropertyDescriptor Prop, bool Descending) : base(Prop.PropertyType)
		|        {
		|            this.Prop = Prop;
		|            this.Descending = Descending;
		|        }
		|    }
		|
		|    static class Parser
		|    {
		|        public static string GetFieldName(Expression Field)
		|        {
		|            var arr = GetMembers(Field).ToArray();
		|            if (arr.Length == 0)
		|            {
		|                throw new Exception(""Could not resolve FieldName of "" + Field);
		|            }
		|            if (arr.Length == 1)
		|            {
		|                return arr[0].Member.Name;
		|            }
		|            throw new Exception(""Multipe field names found for "" + Field);
		|        }
		|
		|        public static string GetFieldName<RecordType, T>(Expression<Func<RecordType, T>> Field)
		|        {
		|            return GetFieldName((LambdaExpression)Field);
		|        }
		|
		|        public static IEnumerable<string> GetFieldNames<RecordType, T>(params Expression<Func<RecordType, T>>[] Fields)
		|        {
		|            return GetMembers(Fields).Select(f => f.Member.Name);
		|        }
		|
		|        static IEnumerable<MemberExpression> GetMembers(params Expression[] expr)
		|        {
		|            foreach (var e in expr)
		|            {
		|                var exp = e;
		|                if (exp is LambdaExpression)
		|                {
		|                    exp = (exp as LambdaExpression).Body;
		|                }
		|                if (exp.NodeType == ExpressionType.Convert)
		|                {
		|                    exp = (exp as UnaryExpression).Operand;
		|                }
		|                if (exp is MemberExpression)
		|                {
		|                    yield return (MemberExpression)exp;
		|                }
		|                else if (exp is NewExpression)
		|                {
		|                    foreach (var me in from ne in ((NewExpression)exp).Arguments from m in GetMembers(ne) select m)
		|                    {
		|                        yield return me;
		|                    }
		|                }
		|            }
		|        }
		|    }
		|}
		|
		|#endregion
		|
		|namespace Subro.Controls
		|{
		|    // Добавьте этот компонент во время выполнения или во время разработки и назначьте ему datagridview, чтобы включить группировку в этой сетке.
		|    // Вы также можете добавить DataGridViewGrouperControl, который создаст свой собственный grouper.
		|    [DefaultEvent(""DisplayGroup"")]
		|    public partial class DataGridViewGrouper : Component
		|    {
		|        public ClDataGridViewGrouper dll_obj;
		|        private int dataGridViewGrouperStyle;
		|        private bool forceAsText;
		|        public DataGridViewGrouperContextMenuStrip ContextMenuStrip1;
		|
		|        public DataGridViewGrouper()
		|        {
		|            source.DataSourceChanged += new EventHandler(source_DataSourceChanged);
		|            source.Grouper = this;
		|        }
		|
		|        public DataGridViewGrouper(DataGridView Grid) : this()
		|        {
		|            this.DataGridView = Grid;
		|            ContextMenuStrip1 = new DataGridViewGrouperContextMenuStrip(this);
		|        }
		|
		|        public DataGridViewGrouper(IContainer Container) : this()
		|        {
		|            Container.Add(this);
		|        }
		|
		|        public bool ForceAsText
		|        {
		|            get { return forceAsText; }
		|            set
		|            {
		|                if (!value)
		|                {
		|                    return;
		|                }
		|                Subro.Controls.DataGridViewGrouperContextMenuStrip.GroupOnItem item = (Subro.Controls.DataGridViewGrouperContextMenuStrip.GroupOnItem)ContextMenuStrip1.ForceAsText;
		|                if (item == null)
		|                {
		|                    return;
		|                }
		|                var cur = ContextMenuStrip1.Grouper.GroupOn;
		|                if (item.EqualsInfo(cur))
		|                {
		|                    if (cur is GroupWrapper)
		|                    {
		|                        ContextMenuStrip1.Grouper.GroupOn = ((GroupWrapper)cur).Grouper;
		|                    }
		|                    item.Checked = false;
		|                }
		|                else
		|                {
		|                    ContextMenuStrip1.Grouper.GroupOn = item.CreateInfo();
		|                    item.Checked = true;
		|                }
		|                forceAsText = value;
		|            }
		|        }
		|
		|        public int DataGridViewGrouperStyle
		|        {
		|            get { return dataGridViewGrouperStyle; }
		|            set
		|            {
		|                Subro.Controls.DataGridViewGrouperContextMenuStrip.GroupOnItem item = null;
		|
		|                if (value == 0)
		|                {
		|                    item = (Subro.Controls.DataGridViewGrouperContextMenuStrip.GroupOnItem)ContextMenuStrip1.FirstLetter;
		|                }
		|                else if (value == 1)
		|                {
		|                    item = (Subro.Controls.DataGridViewGrouperContextMenuStrip.GroupOnItem)ContextMenuStrip1.FirstWord;
		|                }
		|                else if (value == 2)
		|                {
		|                    item = (Subro.Controls.DataGridViewGrouperContextMenuStrip.GroupOnItem)ContextMenuStrip1.LastWord;
		|                }
		|
		|                if (item == null)
		|                {
		|                    return;
		|                }
		|                var cur = ContextMenuStrip1.Grouper.GroupOn;
		|                if (item.EqualsInfo(cur))
		|                {
		|                    if (cur is GroupWrapper)
		|                    {
		|                        ContextMenuStrip1.Grouper.GroupOn = ((GroupWrapper)cur).Grouper;
		|                    }
		|                    item.Checked = false;
		|                }
		|                else
		|                {
		|                    ContextMenuStrip1.Grouper.GroupOn = item.CreateInfo();
		|                    item.Checked = true;
		|                }
		|                dataGridViewGrouperStyle = value;
		|            }
		|        }
		|
		|        private DataGridView grid;
		|
		|        [DefaultValue(null)]
		|        public DataGridView DataGridView
		|        {
		|            get { return grid; }
		|            set
		|            {
		|                if (grid == value)
		|                {
		|                    return;
		|                }
		|
		|                if (grid != null)
		|                {
		|                    //grid.Sorted -= new EventHandler(grid_Sorted);
		|                    grid.RowPrePaint -= new DataGridViewRowPrePaintEventHandler(grid_RowPrePaint);
		|                    grid.RowPostPaint -= new DataGridViewRowPostPaintEventHandler(grid_RowPostPaint);
		|                    grid.CellBeginEdit -= new DataGridViewCellCancelEventHandler(grid_CellBeginEdit);
		|                    grid.CellDoubleClick -= new DataGridViewCellEventHandler(grid_CellDoubleClick);
		|                    grid.CellClick -= new DataGridViewCellEventHandler(grid_CellClick);
		|                    grid.MouseMove -= new MouseEventHandler(grid_MouseMove);
		|                    grid.SelectionChanged -= new EventHandler(grid_SelectionChanged);
		|                    grid.DataSourceChanged -= new EventHandler(grid_DataSourceChanged);
		|                    grid.AllowUserToAddRowsChanged -= new EventHandler(grid_AllowUserToAddRowsChanged);    
		|                }
		|                RemoveGrouping();
		|                selectedGroups.Clear();
		|                grid = value;
		|
		|                if (grid != null)
		|                {
		|                    //grid.Sorted += new EventHandler(grid_Sorted);
		|                    grid.RowPrePaint += new DataGridViewRowPrePaintEventHandler(grid_RowPrePaint);
		|                    grid.RowPostPaint += new DataGridViewRowPostPaintEventHandler(grid_RowPostPaint);
		|                    grid.CellBeginEdit += new DataGridViewCellCancelEventHandler(grid_CellBeginEdit);
		|                    grid.CellDoubleClick += new DataGridViewCellEventHandler(grid_CellDoubleClick);
		|                    grid.CellClick += new DataGridViewCellEventHandler(grid_CellClick);
		|                    grid.MouseMove += new MouseEventHandler(grid_MouseMove);
		|                    grid.SelectionChanged += new EventHandler(grid_SelectionChanged);
		|                    grid.DataSourceChanged += new EventHandler(grid_DataSourceChanged);
		|                    grid.AllowUserToAddRowsChanged += new EventHandler(grid_AllowUserToAddRowsChanged);       
		|                }
		|            }
		|        }
		|
		|        void grid_AllowUserToAddRowsChanged(object sender, EventArgs e)
		|        {
		|            source.CheckNewRow();
		|        }
		|
		|        Point capturedcollapsebox = new Point(-1, -1);
		|
		|        void grid_MouseMove(object sender, MouseEventArgs e)
		|        {
		|            if (e.X < HeaderOffset && e.X >= HeaderOffset - collapseboxwidth)
		|            {
		|                DataGridView.HitTestInfo ht = grid.HitTest(e.X, e.Y);
		|                if (IsGroupRow(ht.RowIndex))
		|                {
		|                    var y = e.Y - ht.RowY;
		|
		|                    if (y >= CollapseBox_Y_Offset && y <= CollapseBox_Y_Offset + collapseboxwidth)
		|                    {
		|                        checkcollapsedfocused(ht.ColumnIndex, ht.RowIndex);
		|                        return;
		|                    }
		|                }
		|            }            
		|            checkcollapsedfocused(-1, -1);
		|        }
		|
		|        void InvalidateCapturedBox()
		|        {
		|            if (capturedcollapsebox.Y == -1)
		|            {
		|                return;
		|            }
		|            try
		|            {
		|                grid.InvalidateCell(capturedcollapsebox.X, capturedcollapsebox.Y);
		|            }
		|            catch
		|            {
		|                capturedcollapsebox = new Point(-1, -1);
		|            }
		|        }
		|
		|        void checkcollapsedfocused(int col, int row)
		|        {
		|            if (capturedcollapsebox.X != col || capturedcollapsebox.Y != row)
		|            {
		|                InvalidateCapturedBox();
		|                capturedcollapsebox = new Point(col, row);
		|                InvalidateCapturedBox();
		|            }
		|        }
		|
		|        void grid_CellClick(object sender, DataGridViewCellEventArgs e)
		|        {
		|            if (e.RowIndex == -1)
		|            {
		|                return;
		|            }
		|            if (e.RowIndex == capturedcollapsebox.Y)
		|            {
		|                var gr = GetGroupRow(e.RowIndex);
		|                gr.Collapsed = !gr.Collapsed;
		|            }
		|        }
		|
		|        // Выбранные строки группы хранятся отдельно, чтобы при изменении выделения сделать недействительной всю строку, а не только одну ячейку.
		|        List<int> selectedGroups = new List<int>();
		|
		|        void grid_SelectionChanged(object sender, EventArgs e)
		|        {
		|            if (selectionset)
		|            {
		|                selectionset = false;
		|                invalidateselected();
		|            }
		|        }
		|
		|        bool selectionset;
		|
		|        void setselection()
		|        {
		|            //invalidateselected();
		|
		|            selectionset = true;
		|            selectedGroups.Clear();
		|            foreach (DataGridViewCell c in grid.SelectedCells)
		|            {
		|                if (IsGroupRow(c.RowIndex))
		|                {
		|                    if (!selectedGroups.Contains(c.RowIndex))
		|                    {
		|                        selectedGroups.Add(c.RowIndex);
		|                    }
		|                }
		|            }
		|            invalidateselected();
		|        }
		|        
		|        void invalidateselected()
		|        {
		|            if (selectedGroups.Count == 0 || grid.SelectionMode == DataGridViewSelectionMode.FullRowSelect)
		|            {
		|                return;
		|            }
		|            int count = grid.Rows.Count;
		|            foreach (int i in selectedGroups)
		|            {
		|                if (i < count)
		|                {
		|                    grid.InvalidateRow(i);
		|                }
		|            }
		|        }
		|
		|        public void ExpandAll()
		|        {
		|            source.CollapseExpandAll(false);
		|        }
		|
		|        public void CollapseAll()
		|        {
		|            source.CollapseExpandAll(true);
		|        }
		|
		|        void grid_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
		|        {
		|            if (IsGroupRow(e.RowIndex) && capturedcollapsebox.Y != e.RowIndex && Options.SelectRowsOnDoubleClick)
		|            {
		|                var gr = GetGroupRow(e.RowIndex);
		|                gr.Collapsed = false;                
		|                grid.SuspendLayout();
		|                grid.CurrentCell = grid[1, e.RowIndex + 1];
		|                grid.Rows[e.RowIndex].Selected = false;
		|                SelectGroup(e.RowIndex);
		|                grid.ResumeLayout();
		|            }
		|        }
		|
		|        GroupRow GetGroupRow(int RowIndex)
		|        {
		|            return (GroupRow)source.Groups.Rows[RowIndex];
		|        }
		|
		|        IEnumerable<DataGridViewRow> GetRows(int index)
		|        {
		|            var gr = GetGroupRow(index);
		|            
		|            for (int i = 0; i < gr.Count; i++)
		|            {
		|                yield return grid.Rows[++index];
		|            }
		|        }
		|
		|        void SelectGroup(int offset)
		|        {
		|            foreach (DataGridViewRow row in GetRows(offset))
		|            {
		|                row.Selected = true;
		|            }
		|        }
		|
		|        public GroupList Groups
		|        {
		|            get { return source.Groups; }
		|        }
		|
		|        public bool IsGroupRow(int RowIndex)
		|        {
		|            return source.IsGroupRow(RowIndex);
		|        }
		|
		|        void source_DataSourceChanged(object sender, EventArgs e)
		|        {
		|            OnPropertiesChanged();
		|        }
		|
		|        void OnPropertiesChanged()
		|        {
		|            if (PropertiesChanged != null)
		|            {
		|                PropertiesChanged(this, EventArgs.Empty);
		|            }
		|        }
		|
		|        public event EventHandler PropertiesChanged;
		|
		|        public IEnumerable<PropertyDescriptor> GetProperties()
		|        {
		|            foreach (PropertyDescriptor pd in source.GetItemProperties(null))
		|            {
		|                yield return pd;
		|            }
		|        }
		|
		|        void grid_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
		|        {
		|            if (IsGroupRow(e.RowIndex))
		|            {
		|                e.Cancel = true;
		|            }
		|        }
		|
		|        protected override void Dispose(bool disposing)
		|        {
		|            DataGridView = null;
		|            source.Dispose();
		|            base.Dispose(disposing);
		|        }
		|        /*
		|        void grid_Sorted(object sender, EventArgs e)
		|        {
		|            ResetGrouping();
		|        }*/
		|
		|        readonly GroupingSource source = new GroupingSource();
		|
		|        public GroupingSource GroupingSource
		|        {
		|            get { return source; }
		|        }
		|
		|        void grid_DataSourceChanged(object sender, EventArgs e)
		|        {
		|            if (!GridUsesGroupSource)
		|            {
		|                try
		|                {
		|                    source.DataSource = grid.DataSource;
		|                }
		|                catch
		|                {
		|                    source.RemoveGrouping();
		|                }
		|            }
		|        }
		|
		|        public bool RemoveGrouping()
		|        {
		|            if (GridUsesGroupSource)
		|            {
		|                try
		|                {
		|                    grid.DataSource = source.DataSource;
		|                    grid.DataMember = source.DataMember;
		|                    source.RemoveGrouping();
		|                    return true;
		|                }
		|                catch { }
		|            }
		|            return false;
		|        }
		|
		|        public event EventHandler GroupingChanged
		|        {
		|            add { source.GroupingChanged += value; }
		|            remove { source.GroupingChanged -= value; }
		|        }
		|
		|        bool GridUsesGroupSource
		|        {
		|            get { return grid != null && grid.DataSource == source; }
		|        }
		|
		|        public void ResetGrouping()
		|        {
		|            if (!GridUsesGroupSource)
		|            {
		|                return;
		|            }
		|            this.capturedcollapsebox = new Point(-1, -1);
		|            source.ResetGroups();
		|        }
		|
		|        [DefaultValue(null)]
		|        public GroupingInfo GroupOn
		|        {
		|            get { return source.GroupOn; }
		|            set
		|            {
		|                if (GroupOn == value)
		|                {
		|                    return;
		|                }
		|                if (value == null)
		|                {
		|                    RemoveGrouping();
		|                }
		|                else
		|                {
		|                    CheckSource().GroupOn = value;
		|                }
		|            }
		|        }
		|
		|        public bool IsGrouped
		|        {
		|            get { return source.IsGrouped; }
		|        }
		|
		|        [DefaultValue(SortOrder.Ascending)]
		|        public SortOrder GroupSortOrder
		|        {
		|            get { return source.GroupSortOrder; }
		|            set { source.GroupSortOrder = value; }
		|        }
		|
		|        [DefaultValue(null)]
		|        public GroupingOptions Options
		|        {
		|            get { return source.Options; }
		|            set { source.Options = value; }
		|        }
		|
		|        public bool SetGroupOn(DataGridViewColumn col)
		|        {
		|            return SetGroupOn(col == null ? null : col.DataPropertyName);
		|        }
		|
		|        public bool SetGroupOn(PropertyDescriptor Property)
		|        {
		|            return CheckSource().SetGroupOn(Property);
		|        }
		|
		|        public void SetCustomGroup<T>(Func<T,object> GroupValueProvider, string Description = null)
		|        {
		|            CheckSource().SetCustomGroup(GroupValueProvider, Description);
		|        }
		|
		|        public void SetGroupOnStartLetters(GroupingInfo g, int Letters)
		|        {
		|            CheckSource().SetGroupOnStartLetters(g, Letters);
		|        }
		|
		|        public void SetGroupOnStartLetters(string Property, int Letters)
		|        {
		|            CheckSource().SetGroupOnStartLetters(Property, Letters);
		|        }
		|
		|        public bool SetGroupOn(string Name)
		|        {
		|            if (string.IsNullOrEmpty(Name))
		|            {
		|                return RemoveGrouping();
		|            }
		|            return CheckSource().SetGroupOn(Name);
		|        }
		|
		|        // Добавлено после добавления linq в фреймворк для облегчения настройки свойств.
		|        public bool SetGroupOn<T>(System.Linq.Expressions.Expression<Func<T, object>> Property)
		|        {
		|            if (Property == null)
		|            {
		|                return RemoveGrouping();
		|            }
		|            return CheckSource().SetGroupOn(Parser.GetFieldName(Property));
		|        }
		|
		|        public PropertyDescriptor GetProperty(string Name)
		|        {
		|            return CheckSource().GetProperty(Name);
		|        }
		|
		|        // Гарантирует, что datagridview использует groupingsource в качестве своего источника данных.
		|        GroupingSource CheckSource()
		|        {
		|            if (grid == null)
		|            {
		|                throw new Exception(""Нет целевого набора Таблица (Datagridview)"");
		|            }
		|
		|            if (!GridUsesGroupSource)
		|            {
		|                source.DataSource = grid.DataSource;
		|                source.DataMember = grid.DataMember;
		|                grid.DataSource = source;
		|            }
		|            return source;
		|        }
		|
		|        void grid_RowPrePaint(object sender, DataGridViewRowPrePaintEventArgs e)
		|        {
		|            if (IsGroupRow(e.RowIndex))
		|            {
		|                e.Handled = true;
		|                PaintGroupRow(e);                
		|            }
		|        }
		|
		|        const int collapseboxwidth = 10;
		|        const int lineoffset = collapseboxwidth / 2;
		|
		|        int HeaderOffset
		|        {
		|            get
		|            {
		|                if (grid.RowHeadersVisible)
		|                {
		|                    return grid.RowHeadersWidth;
		|                }
		|                return lineoffset * 4;
		|            }
		|        }
		|
		|        Pen linepen = Pens.SteelBlue;
		|
		|        bool DrawExpandCollapseLines
		|        {
		|            get { return grid.RowHeadersVisible; }
		|        }
		|
		|        void grid_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
		|        {
		|            if (!DrawExpandCollapseLines || e.RowIndex >= source.Count || source.GroupOn == null)
		|            {
		|                return;
		|            }
		|            int next = e.RowIndex + 1;
		|
		|            int r = grid.RowHeadersWidth;
		|            int x = HeaderOffset - lineoffset;
		|            int y = e.RowBounds.Top + e.RowBounds.Height / 2;
		|            e.Graphics.DrawLine(linepen, x, y, r, y);
		|
		|            if (next < source.Count && !IsGroupRow(next))
		|            {
		|                y = e.RowBounds.Bottom;
		|            }
		|
		|            e.Graphics.DrawLine(linepen, x, e.RowBounds.Top, x, y);
		|        }
		|
		|        // Это событие срабатывает, когда необходимо закрасить строку группы и запрашиваются отображаемые значения.
		|        public event EventHandler<GroupDisplayEventArgs> DisplayGroup
		|        {
		|            add { source.DisplayGroup += value; }
		|            remove { source.DisplayGroup -= value; }
		|        }
		|
		|        public DataGridViewGrouper this[int GroupIndex]
		|        {
		|            get { return (DataGridViewGrouper)source[GroupIndex]; }
		|        }
		|
		|        void PaintGroupRow(DataGridViewRowPrePaintEventArgs e)
		|        {
		|            var grouprow = (GroupRow)source[e.RowIndex];
		|            if (!selectionset)
		|            {
		|                setselection();
		|            }
		|            var info = grouprow.GetDisplayInfo(selectedGroups.Contains(e.RowIndex));
		|            if (info == null || info.Cancel)
		|            {
		|                return; // Отмененный.
		|            }
		|
		|            if (info.Font == null)
		|            {
		|                info.Font = e.InheritedRowStyle.Font;
		|            }
		|            var r = e.RowBounds;
		|            r.Height--;
		|            
		|            using (var bgb = new SolidBrush(info.BackColor))
		|            {
		|                // Строка под строкой группы.
		|                e.Graphics.DrawLine(Pens.SteelBlue, r.Left, r.Bottom, r.Right, r.Bottom);
		|
		|                // Значение группы.
		|                {
		|                    int l = HeaderOffset + 1;
		|                    r.X = l - grid.HorizontalScrollingOffset;
		|
		|                    // Очистить фон.
		|                    e.Graphics.FillRectangle(bgb, r);
		|
		|                    using (var fb = new SolidBrush(info.ForeColor))
		|                    {
		|                        var sf = new StringFormat { LineAlignment = StringAlignment.Center };
		|                        if (info.Header != null)
		|                        {
		|                            var size = e.Graphics.MeasureString(info.Header, info.Font);
		|                            e.Graphics.DrawString(info.Header, info.Font, fb, r, sf);
		|                            r.X += (int)size.Width + 5;
		|                        }
		|
		|                        if (info.DisplayValue != null)
		|                        {
		|                            using (var f = new Font(info.Font.FontFamily, info.Font.Size + 2, FontStyle.Bold))
		|                            {
		|                                var size = e.Graphics.MeasureString(info.DisplayValue, f);
		|                                e.Graphics.DrawString(info.DisplayValue, f, fb, r, sf);
		|                                r.X += (int)size.Width + 10;
		|                            }
		|                        }
		|                        if (info.Summary != null)
		|                        {
		|                            e.Graphics.DrawString(info.Summary, info.Font, fb, r, sf);
		|                        }
		|                    }
		|                    e.Graphics.FillRectangle(bgb, 0, r.Top, l, r.Height);
		|                }
		|            }
		|
		|            // Свернуть/развернуть символ.
		|            {
		|                var cer = GetCollapseBoxBounds(e.RowBounds.Y);
		|
		|                if (capturedcollapsebox.Y == e.RowIndex)
		|                {
		|                    e.Graphics.FillEllipse(Brushes.Yellow, cer);
		|                }
		|                e.Graphics.DrawEllipse(linepen, cer);
		|                bool collapsed = grouprow.Collapsed;
		|                int cx;
		|
		|                if (DrawExpandCollapseLines && !collapsed)
		|                {
		|                    cx = HeaderOffset - lineoffset;
		|                    e.Graphics.DrawLine(linepen, cx, cer.Bottom, cx, r.Bottom);
		|                }
		|                cer.Inflate(-2, -2);
		|                var cy = cer.Y + cer.Height / 2;
		|                e.Graphics.DrawLine(linepen, cer.X, cy, cer.Right, cy);
		|                if (collapsed)
		|                {
		|                    cx = cer.X + cer.Width / 2;
		|                    e.Graphics.DrawLine(linepen, cx, cer.Top, cx, cer.Bottom);
		|                }
		|            }
		|        }
		|
		|        const int CollapseBox_Y_Offset = 5;
		|
		|        private Rectangle GetCollapseBoxBounds(int Y_Offset)
		|        {
		|            return new Rectangle(HeaderOffset - collapseboxwidth, Y_Offset + CollapseBox_Y_Offset, collapseboxwidth, collapseboxwidth);
		|        }
		|
		|        public bool CurrentRowIsGroupRow
		|        {
		|            get
		|            {
		|                if (grid == null)
		|                {
		|                    return false;
		|                }
		|                return IsGroupRow(grid.CurrentCellAddress.Y);
		|            }
		|        }
		|
		|        [DefaultValue(null)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public GroupRow CurrentGroup
		|        {
		|            get { return source.CurrentGroup; }
		|            set { source.CurrentGroup = value; }
		|        }
		|    }
		|
		|    public class GroupDisplayEventArgs : CancelEventArgs
		|    {
		|        // Содержит подробные сведения о отображаемой информации о группировке.
		|        public readonly GroupRow Group;
		|        public readonly GroupingInfo GroupingInfo;
		|
		|        public GroupDisplayEventArgs(GroupRow Row, GroupingInfo Info)
		|        {
		|            this.Group = Row;
		|            this.GroupingInfo = Info;
		|        }
		|        
		|        // Возвращает значение группировки для рисуемой строки.
		|        public object Value { get { return Group.Value; } }
		|        
		|        // Возвращает или задает отображаемое значение (после заголовка).
		|        public string DisplayValue { get; set; }
		|        
		|        // Заголовок обычно содержит имя свойства / группы, его можно изменить здесь.
		|        public string Header { get; set; }
		|
		|        // Итоговое значение - это меньшее значение, отображаемое между () после displayValue.
		|        // С настройками по умолчанию это содержит количество строк.
		|        public string Summary { get; set; }
		|        public Color BackColor { get; set; }
		|        public Color ForeColor { get; set; }
		|        public Font Font { get; set; }
		|        
		|        // Указывает, выбрана ли в данный момент отображаемая строка.
		|        public bool Selected { get; internal set; }
		|
		|        public override string ToString()
		|        {
		|            if (Summary == null)
		|            {
		|                return DisplayValue;
		|            }
		|            return string.Format(""{0}   {1}"", DisplayValue, Summary);            
		|        }
		|
		|        // То же, что и Group. Добавлено для обеспечения обратной совместимости.
		|        public GroupRow Row
		|        {
		|            get { return Group; }
		|        }
		|    }
		|
		|    public interface IDataGridViewGrouperOwner
		|    {
		|        DataGridViewGrouper Grouper { get; }
		|    }
		|
		|    #region файл DataGridViewGrouperContextMenuStrip.cs
		|
		|    public partial class DataGridViewGrouperContextMenuStrip : ContextMenuStrip
		|    {
		|        public readonly ToolStripMenuItem
		|            CollapseAllItem,
		|            ExpandAllItem,
		|            RemoveGroupingItem,
		|            GroupOnMenuItem,
		|            OverViewMenuItem,
		|            SortMenuItem,
		|            OptionsMenuItem,
		|            ForceAsText,
		|            FirstLetter,
		|            FirstWord,
		|            LastWord;
		|
		|        public DataGridViewGrouperContextMenuStrip(DataGridViewGrouper Grouper) : this()
		|        {
		|            this.Grouper = Grouper;
		|        }
		|
		|        partial void GetText(string keyword, ref string Value);
		|
		|        public DataGridViewGrouperContextMenuStrip()
		|        {
		|            CollapseAllItem = Add(""CollapseAll"", ""Свернуть все"", collapse);
		|            ExpandAllItem = Add(""ExpandAll"", ""Развернуть все"", expand);
		|
		|            GroupOnMenuItem = Add(""Стиль группировки"", null);
		|            GroupOnMenuItem.DropDown.ItemClicked += new ToolStripItemClickedEventHandler(GroupOnDropDown_ItemClicked);
		|            ForceAsText = AddGroupOnItem(""Как текст"", () => new StringGroupWrapper(grouper.GroupOn));
		|            FirstLetter = AddGroupOnItem(""Первый символ"", () => new StartLetterGrouper(grouper.GroupOn));
		|            FirstWord = AddGroupOnItem(""Первое слово"", () => new FirstWordGrouper(grouper.GroupOn));
		|            LastWord = AddGroupOnItem(""Последнее слово"", () => new LastWordGrouper(grouper.GroupOn));
		|
		|            SortMenuItem = Add(""Сортировка групп"", null);
		|            foreach (SortOrder s in Enum.GetValues(typeof(SortOrder)))
		|            {
		|                if (s.ToString() == ""None"")
		|                {
		|                    SortMenuItem.DropDownItems.Add(""Отсутствие"");
		|                }
		|                else if (s.ToString() == ""Ascending"")
		|                {
		|                    SortMenuItem.DropDownItems.Add(""По возрастанию"");
		|                }
		|                else if (s.ToString() == ""Descending"")
		|                {
		|                    SortMenuItem.DropDownItems.Add(""По убыванию"");
		|                }
		|            }
		|            SortMenuItem.DropDown.ItemClicked += new ToolStripItemClickedEventHandler(SortDropDown_ItemClicked);
		|
		|            OptionsMenuItem = Add(""OtherOptions"", ""Другие настройки"", null);
		|            AddOption(""Свернуто при старте"", GroupingOption.StartCollapsed);
		|            AddOption(""Всегда группировать как текстовое значение"", GroupingOption.AlwaysGroupOnText);
		|            OptionsMenuItem.DropDownItems.Add(new ToolStripSeparator());
		|            AddOption(""Показать количество строк"", GroupingOption.ShowCount);
		|            AddOption(""Показать имена групповых полей"", GroupingOption.ShowGroupName);
		|            AddOption(""Выделять строки, при двойном щелчке по заголовку"", GroupingOption.SelectRowsOnDoubleClick);
		|
		|            Items.Add(new ToolStripSeparator());
		|            OverViewMenuItem = Add(""JumpGroup"", ""Перейти к ..."", jumptogroup);
		|            Items.Add(new ToolStripSeparator());
		|            RemoveGroupingItem = Add(""RemoveGroup"", ""Удалить группировку"", RemoveGrouping);
		|        }
		|
		|        void SortDropDown_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
		|        {
		|            var item = e.ClickedItem as SortItem;
		|            if (item == null)
		|            {
		|                return;
		|            }
		|            grouper.Options.GroupSortOrder = item.SortOrder;
		|        }
		|
		|        void GroupOnDropDown_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
		|        {
		|            var item = e.ClickedItem as GroupOnItem;
		|            if (item == null)
		|            {
		|                return;
		|            }
		|            var cur = grouper.GroupOn;
		|            if (item.EqualsInfo(cur))
		|            {
		|                if (cur is GroupWrapper)
		|                {
		|                    grouper.GroupOn = ((GroupWrapper)cur).Grouper;
		|                }
		|                item.Checked = false;
		|            }
		|            else
		|            {
		|                grouper.GroupOn = item.CreateInfo();
		|                item.Checked = true;
		|            }
		|        }
		|
		|        void jumptogroup(object sender, EventArgs e)
		|        {
		|
		|            var f = new FormJumpTo(Grouper);
		|            //f.MakeDialogForm(MessageBoxButtons.OK);
		|            f.Show(this);
		|        }
		|
		|        class FormJumpTo : Form
		|        {
		|            public readonly DataGridViewGrouper Grouper;
		|            DataGridView GrouperGrid;
		|            DataGridView dg = new DataGridView();
		|
		|            public FormJumpTo(DataGridViewGrouper Grouper)
		|            {
		|                this.Grouper = Grouper;
		|                this.GrouperGrid = Grouper.DataGridView;
		|
		|                dg.AutoGenerateColumns = false;
		|                dg.Columns.Add(new DataGridViewTextBoxColumn()
		|                {
		|                    DataPropertyName = ""Value"",
		|                    HeaderText = ""Group"",
		|                    AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill,
		|                    ReadOnly = true
		|                });
		|                dg.Columns.Add(new DataGridViewTextBoxColumn()
		|                {
		|                    DataPropertyName = ""Count"",
		|                    Width = 60,
		|                    ReadOnly = true
		|                });
		|                dg.Columns.Add(new DataGridViewCheckBoxColumn()
		|                {
		|                    DataPropertyName = ""Collapsed"",
		|                    HeaderText = ""Свернуть"",
		|                    Width = 60
		|                });
		|
		|                dg.AllowUserToAddRows = false;
		|                dg.AllowUserToDeleteRows = false;
		|
		|                ClientSize = new Size(400, 400);
		|
		|                dg.Dock = DockStyle.Fill;
		|
		|                Controls.Add(dg);
		|                Controls.Add(new DataGridSearchBox() { DataGridView = dg, Dock = DockStyle.Top, ShowOptionsButton = true });
		|                dg.CreateControl();
		|            }
		|
		|            void setdata()
		|            {
		|                var groups = Grouper.GroupingSource.Groups;
		|                var arr = groups == null ? null : groups.ToArray();
		|                settingcur = true;
		|                try
		|                {
		|                    dg.DataSource = arr;
		|                }
		|                finally
		|                {
		|                    settingcur = false;
		|                }
		|                dg.Enabled = arr != null;
		|                syncwithdg();
		|            }
		|
		|            protected override void OnClosing(CancelEventArgs e)
		|            {
		|                Grouper.GroupingChanged -= new EventHandler(Grouper_GroupingChanged);
		|                GrouperGrid.CurrentCellChanged -= new EventHandler(GrouperGrid_CurrentCellChanged);
		|                base.OnClosing(e);
		|            }
		|
		|            protected override void OnLoad(EventArgs e)
		|            {
		|                base.OnLoad(e);
		|
		|                dg.CurrentCellChanged += new EventHandler(dg_CurrentCellChanged);
		|                dg.CellDoubleClick += new DataGridViewCellEventHandler(dg_CellDoubleClick);
		|                GrouperGrid.CurrentCellChanged += new EventHandler(GrouperGrid_CurrentCellChanged);
		|                Grouper.GroupingChanged += new EventHandler(Grouper_GroupingChanged);
		|                setdata();
		|            }
		|
		|            void Grouper_GroupingChanged(object sender, EventArgs e)
		|            {
		|                setdata();
		|            }
		|
		|            void GrouperGrid_CurrentCellChanged(object sender, EventArgs e)
		|            {
		|                syncwithdg();
		|            }
		|
		|            void dg_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
		|            {
		|                SelectCurrent();
		|                DialogResult = DialogResult.OK;
		|                Close();
		|            }
		|
		|            void syncwithdg()
		|            {
		|                if (settingcur)
		|                {
		|                    return;
		|                }
		|                var gr = Grouper.GroupingSource.CurrentGroup;
		|                if (gr == null)
		|                {
		|                    return;
		|                }
		|                int pos = Grouper.GroupingSource.Groups.IndexOf(gr);
		|                if (dg.CurrentCellAddress.Y == pos)
		|                {
		|                    return;
		|                }
		|                settingcur = true;
		|                try
		|                {
		|                    dg.CurrentCell = dg[0, pos];
		|                }
		|                catch { }
		|                finally
		|                {
		|                    settingcur = false;
		|                }
		|            }
		|
		|            void dg_CurrentCellChanged(object sender, EventArgs e)
		|            {
		|                SelectCurrent();
		|            }
		|
		|            bool settingcur;
		|
		|            public void SelectCurrent()
		|            {
		|                if (settingcur)
		|                {
		|                    return;
		|                }
		|                settingcur = true;
		|                try
		|                {
		|                    Grouper.GroupingSource.CurrentGroup = Current;
		|                }
		|                finally
		|                {
		|                    settingcur = false;
		|                }
		|            }
		|
		|            public GroupRow Current
		|            {
		|                get { return (GroupRow)dg.CurrentRow.DataBoundItem; }
		|            }
		|        }
		|
		|        private DataGridViewGrouper grouper;
		|
		|        public DataGridViewGrouper Grouper
		|        {
		|            get { return grouper; }
		|            set { grouper = value; }
		|        }
		|
		|        protected override void OnOpening(CancelEventArgs e)
		|        {
		|            Initialize();
		|            base.OnOpening(e);
		|        }
		|
		|        public void Initialize()
		|        {
		|            bool hasgrouper = grouper != null;
		|            bool isgrouped = hasgrouper && grouper.IsGrouped;
		|            CollapseAllItem.Enabled = isgrouped;
		|            ExpandAllItem.Enabled = isgrouped;
		|            RemoveGroupingItem.Enabled = isgrouped;
		|            GroupOnMenuItem.Enabled = isgrouped;
		|            OverViewMenuItem.Enabled = isgrouped;
		|            SortMenuItem.Enabled = hasgrouper;
		|            OptionsMenuItem.Enabled = hasgrouper;
		|
		|            if (hasgrouper)
		|            {
		|                var sort = grouper.Options.GroupSortOrder;
		|                foreach (var si in GetSortItems())
		|                {
		|                    si.Checked = si.SortOrder == sort;
		|                }
		|
		|                foreach (var m in OptionsMenuItem.DropDownItems)
		|                {
		|                    if (m is booloption)
		|                    {
		|                        ((booloption)m).Init();
		|                    }
		|                }
		|            }
		|
		|            if (isgrouped)
		|            {
		|                var cur = grouper.GroupOn;
		|                foreach (var item in this.GetGroupOnItems())
		|                {
		|                    item.Checked = item.EqualsInfo(cur);
		|                }
		|            }
		|        }
		|
		|        ToolStripMenuItem Add(string txt)
		|        {
		|            return Add(txt, null);
		|        }
		|
		|        ToolStripMenuItem Add(string txt, EventHandler onClick)
		|        {
		|            return Add(null, txt, onClick);
		|        }
		|
		|        ToolStripMenuItem Add(string kw, string txt, EventHandler onClick)
		|        {
		|            if (kw != null)
		|            {
		|                GetText(kw, ref txt);
		|            }
		|            return Add(txt, onClick, Items);
		|        }
		|
		|        ToolStripMenuItem Add(string txt, EventHandler onClick, ToolStripItemCollection Items)
		|        {
		|            ToolStripMenuItem m = new ToolStripMenuItem(txt, null, onClick);
		|            Items.Add(m);
		|            return m;
		|        }
		|
		|        booloption AddOption(string txt, GroupingOption o)
		|        {
		|            var res = new booloption(o);
		|            res.Text = txt;
		|            res.Strip = this;
		|            OptionsMenuItem.DropDownItems.Add(res);
		|            return res;
		|        }
		|
		|        void expand(object sender, EventArgs e)
		|        {
		|            Grouper.GroupingSource.CollapseExpandAll(false);
		|        }
		|
		|        void collapse(object sender, EventArgs e)
		|        {
		|            Grouper.GroupingSource.CollapseExpandAll(true);
		|        }
		|
		|        void RemoveGrouping(object sender, EventArgs e)
		|        {
		|            Grouper.GroupOn = null;
		|        }
		|
		|        public ToolStripMenuItem AddGroupOnItem<T>(string Text, Func<T> Creator) where T : GroupingInfo
		|        {
		|            var mi = new GroupOnItem<T>();
		|            mi.Text = Text;
		|            mi.CreateInfoDelegate = Creator;
		|            GroupOnMenuItem.DropDownItems.Add(mi);
		|            return mi;
		|        }
		|
		|        public IEnumerable<GroupOnItem> GetGroupOnItems()
		|        {
		|            foreach (var item in GroupOnMenuItem.DropDownItems)
		|            {
		|                if (item is GroupOnItem)
		|                {
		|                    yield return (GroupOnItem)item;
		|                }
		|            }
		|        }
		|
		|        public abstract class GroupOnItem : ToolStripMenuItem
		|        {
		|            public virtual GroupingInfo CreateInfo()
		|            {
		|                return (GroupingInfo)Activator.CreateInstance(GroupInfoType);
		|            }
		|
		|            public abstract Type GroupInfoType { get; }
		|
		|            public virtual bool EqualsInfo(GroupingInfo g)
		|            {
		|                return GroupInfoType.IsAssignableFrom(g.GetType());
		|            }
		|        }
		|
		|        public class GroupOnItem<T> : GroupOnItem where T : GroupingInfo
		|        {
		|            public override Type GroupInfoType
		|            {
		|                get { return typeof(T); }
		|            }
		|
		|            public Func<T> CreateInfoDelegate;
		|
		|            public override GroupingInfo CreateInfo()
		|            {
		|                if (CreateInfoDelegate == null)
		|                {
		|                    return base.CreateInfo();
		|                }
		|                return CreateInfoDelegate();
		|            }
		|
		|            public override bool EqualsInfo(GroupingInfo g)
		|            {
		|                return g is T;
		|            }
		|        }
		|
		|        public IEnumerable<SortItem> GetSortItems()
		|        {
		|            foreach (var item in SortMenuItem.DropDownItems)
		|            {
		|                if (item is SortItem)
		|                {
		|                    yield return (SortItem)item;
		|                }
		|            }
		|        }
		|
		|        public class SortItem : ToolStripMenuItem
		|        {
		|            public readonly SortOrder SortOrder;
		|
		|            public SortItem(SortOrder SortOrder)
		|            {
		|                this.SortOrder = SortOrder;
		|                this.Text = SortOrder.ToString();
		|            }
		|        }
		|
		|        //////SortItem AddSortItem(SortOrder s)
		|        //////{
		|        //////    var si = new SortItem(s);
		|        //////    SortMenuItem.DropDownItems.Add(si);
		|        //////    return si;
		|        //////}
		|
		|        class booloption : ToolStripMenuItem
		|        {
		|            public readonly GroupingOption Option;
		|
		|            public booloption(GroupingOption Option)
		|            {
		|                this.Option = Option;
		|            }
		|
		|            internal DataGridViewGrouperContextMenuStrip Strip;
		|
		|            GroupingOptionValue<bool> GetOption()
		|            {
		|                return (GroupingOptionValue<bool>)Strip.grouper.Options[Option];
		|            }
		|
		|            protected override void OnClick(EventArgs e)
		|            {
		|                base.OnClick(e);
		|                var o = GetOption();
		|                Checked = !Checked;
		|                o.Value = Checked;
		|            }
		|
		|            public void Init()
		|            {
		|                Checked = GetOption().Value;
		|            }
		|        }
		|    }
		|
		|    #endregion
		|
		|    #region файл GroupingInfo.cs
		|
		|    // Информация о том, как GroupingSource должен группировать свою информацию.
		|    public abstract class GroupingInfo
		|    {
		|        public abstract object GetGroupValue(object Row);
		|
		|        public virtual bool IsProperty(PropertyDescriptor p)
		|        {
		|            return p != null && IsProperty(p.Name);
		|        }
		|
		|        public virtual bool IsProperty(string Name)
		|        {
		|            return Name == ToString();
		|        }
		|
		|        public static implicit operator GroupingInfo(PropertyDescriptor p)
		|        {
		|            return new PropertyGrouper(p);
		|        }
		|
		|        public virtual Type GroupValueType
		|        {
		|            get { return typeof(object); }
		|        }
		|
		|        public virtual void SetDisplayValues(GroupDisplayEventArgs e)
		|        {
		|            var o = e.Value;
		|
		|            if (o.ToString() == ""False"")
		|            {
		|                e.DisplayValue = o == null ? ""<Null>"" : ""Ложь"";
		|            }
		|            else if(o.ToString() == ""True"")
		|            {
		|                e.DisplayValue = o == null ? ""<Null>"" : ""Истина"";
		|            }
		|            else
		|            {
		|                e.DisplayValue = o == null ? ""<Null>"" : o.ToString();
		|            }
		|        }
		|    }
		|
		|    // Группы по значению свойства.
		|    public class PropertyGrouper : GroupingInfo
		|    {
		|        public readonly PropertyDescriptor Property;
		|
		|        public PropertyGrouper(PropertyDescriptor Property)
		|        {
		|            if (Property == null)
		|            {
		|                throw new ArgumentNullException();
		|            }
		|            this.Property = Property;
		|        }
		|
		|        public override bool IsProperty(PropertyDescriptor p)
		|        {
		|            return p == Property || (p != null && p.Name == Property.Name);
		|        }
		|
		|        public override object GetGroupValue(object Row)
		|        {
		|            return Property.GetValue(Row);
		|        }
		|
		|        public override string ToString()
		|        {
		|            return Property.Name;
		|        }
		|
		|        public override Type GroupValueType
		|        {
		|            get { return Property.PropertyType; }
		|        }
		|    }
		|
		|    public class DelegateGrouper<T> : GroupingInfo
		|    {
		|        public readonly string Name;
		|        public readonly Func<T, object> GroupProvider;
		|
		|        public DelegateGrouper(Func<T, object> GroupProvider, string Name)
		|        {
		|            if (GroupProvider == null)
		|            {
		|                throw new ArgumentNullException();
		|            }
		|            this.Name = Name;
		|            if (Name == null)
		|            {
		|                this.Name = GroupProvider.ToString();
		|            }
		|            this.GroupProvider = GroupProvider;
		|        }
		|
		|        public override string ToString()
		|        {
		|            return Name;
		|        }
		|
		|        public override object GetGroupValue(object Row)
		|        {
		|            return GroupProvider((T)Row);
		|        }
		|    }
		|
		|    public abstract class GroupWrapper : GroupingInfo
		|    {
		|        public readonly GroupingInfo Grouper;
		|
		|        public GroupWrapper(GroupingInfo Grouper) : this(Grouper, true)
		|        {
		|        }
		|
		|        public GroupWrapper(GroupingInfo Grouper, bool RemovePreviousWrappers)
		|        {
		|            if (Grouper == null)
		|            {
		|                throw new ArgumentNullException();
		|            }
		|            if (RemovePreviousWrappers)
		|            {
		|                while (Grouper is GroupWrapper)
		|                {
		|                    Grouper = ((GroupWrapper)Grouper).Grouper;
		|                }
		|            }
		|            this.Grouper = Grouper;
		|        }
		|
		|        public override string ToString()
		|        {
		|            return Grouper.ToString();
		|        }
		|
		|        public override bool IsProperty(PropertyDescriptor p)
		|        {
		|            return Grouper.IsProperty(p);
		|        }
		|
		|        public override object GetGroupValue(object Row)
		|        {
		|            return GetValue(Grouper.GetGroupValue(Row));
		|        }
		|
		|        public override Type GroupValueType
		|        {
		|            get { return Grouper.GroupValueType; }
		|        }
		|
		|        protected abstract object GetValue(object GroupValue);
		|    }
		|
		|    // Принудительная группировка значения по его строковому значению независимо от того, какое значение сгруппировано.
		|    public class StringGroupWrapper : GroupWrapper
		|    {
		|        public StringGroupWrapper(GroupingInfo Grouper) : base(Grouper)
		|        {
		|        }
		|
		|        protected override object GetValue(object GroupValue)
		|        {
		|            if (GroupValue == null)
		|            {
		|                return (string)null;
		|            }
		|            return GetValue(GroupValue.ToString());
		|        }
		|
		|        public override Type GroupValueType
		|        {
		|            get { return typeof(string); }
		|        }
		|
		|        protected virtual string GetValue(string s)
		|        {
		|            return s;
		|        }
		|    }
		|
		|    public class StartLetterGrouper : StringGroupWrapper
		|    {
		|        public readonly int Letters;
		|
		|        public StartLetterGrouper(GroupingInfo Grouper) : this(Grouper, 1)
		|        {
		|        }
		|
		|        public StartLetterGrouper(GroupingInfo Grouper, int Letters) : base(Grouper)
		|        {
		|            this.Letters = Letters;
		|        }
		|
		|        protected override string GetValue(string s)
		|        {
		|            if (s.Length < Letters)
		|            {
		|                return s;
		|            }
		|            return s.Substring(0, Letters);
		|        }
		|    }
		|
		|    public class FirstWordGrouper : StringGroupWrapper
		|    {
		|        public FirstWordGrouper(GroupingInfo Grouper) : base(Grouper)
		|        {
		|        }
		|
		|        internal static char[] EndOfWordChars = new char[] { ' ', '\r', '\n', '\t' };
		|
		|        protected override string GetValue(string s)
		|        {
		|            int i = s.IndexOfAny(EndOfWordChars);
		|            if (i == -1)
		|            {
		|                return s;
		|            }
		|            return s.Substring(0, i);
		|        }
		|    }
		|
		|    public class LastWordGrouper : StringGroupWrapper
		|    {
		|        public LastWordGrouper(GroupingInfo Grouper) : base(Grouper)
		|        {
		|        }
		|
		|        protected override string GetValue(string s)
		|        {
		|            int i = s.LastIndexOfAny(FirstWordGrouper.EndOfWordChars);
		|            if (i == -1)
		|            {
		|                return s;
		|            }
		|            return s.Substring(++i);
		|        }
		|    }
		|
		|    public class DateTimeGrouper : GroupWrapper
		|    {
		|        public readonly DateTimeGrouping Mode;
		|
		|        public DateTimeGrouper(GroupingInfo Grouper) : this(Grouper, DateTimeGrouping.Date)
		|        {
		|        }
		|
		|        public DateTimeGrouper(GroupingInfo Grouper, DateTimeGrouping Mode) : base(Grouper)
		|        {
		|            this.Mode = Mode;
		|        }
		|
		|        bool set(DateTimeGrouping val)
		|        {
		|            return (Mode & val) > 0;
		|        }
		|
		|        public override Type GroupValueType
		|        {
		|            get
		|            {
		|                if (Mode == DateTimeGrouping.Date)
		|                {
		|                    return typeof(DateTime);
		|                }
		|                return typeof(int);
		|            }
		|        }
		|
		|        protected override object GetValue(object GroupValue)
		|        {
		|            DateTime dt = (DateTime)GroupValue;
		|            if (Mode == DateTimeGrouping.Date)
		|            {
		|                return dt.Date;
		|            }
		|            if (Mode == DateTimeGrouping.WeekDay)
		|            {
		|                return (int)dt.DayOfWeek;
		|            }
		|            int i = 0;
		|            if (set(DateTimeGrouping.Year))
		|            {
		|                i += dt.Year * 10000;
		|            }
		|            if (set(DateTimeGrouping.Month))
		|            {
		|                i += dt.Month * 100;
		|            }
		|            if (set(DateTimeGrouping.Day))
		|            {
		|                i += dt.Day;
		|            }
		|            return i;
		|        }
		|
		|        public override void SetDisplayValues(GroupDisplayEventArgs e)
		|        {
		|            base.SetDisplayValues(e);
		|            if (Mode == DateTimeGrouping.Date)
		|            {
		|                e.DisplayValue = ((DateTime)e.Value).ToShortDateString();
		|            }
		|            else if (e.Value is int)
		|            {
		|                int i = (int)e.Value;
		|                string value = null;
		|                if (set(DateTimeGrouping.Year))
		|                {
		|                    value = ""Year: "" + i / 10000;
		|                }
		|                if (set(DateTimeGrouping.Month))
		|                {
		|                    if (value != null)
		|                    {
		|                        value += "", "";
		|                    }
		|                    int m = (i / 100) % 100;
		|                    value += System.Globalization.DateTimeFormatInfo.CurrentInfo.GetMonthName(m);
		|                }
		|                if (set(DateTimeGrouping.Day) || set(DateTimeGrouping.WeekDay))
		|                {
		|                    if (value != null)
		|                    {
		|                        value += "", "";
		|                    }
		|                    int d = i % 10000;
		|                    value += set(DateTimeGrouping.WeekDay)
		|                        ? System.Globalization.DateTimeFormatInfo.CurrentInfo.GetDayName((DayOfWeek)d)
		|                        : ""Day: "" + d;
		|                }
		|                e.DisplayValue = value;
		|            }
		|        }
		|    }
		|
		|    public enum DateTimeGrouping
		|    {
		|        Year = 1,
		|        Month = 2,
		|        YearAndMonth = 3,
		|        Day = 4,
		|        Date = 7,
		|        WeekDay = 32
		|    }
		|
		|    #endregion
		|
		|    #region файл GroupingOptions.cs
		|
		|    [Serializable]
		|    public partial class GroupingOptions : INotifyPropertyChanged, IEquatable<GroupingOptions>
		|    {
		|        public GroupingOptions()
		|        {
		|            add(GroupingOption.StartCollapsed, false);
		|            add(GroupingOption.GroupSortOrder, DefaultGroupSortOrder);
		|            add(GroupingOption.AlwaysGroupOnText, false);
		|            add(GroupingOption.ShowCount, true);
		|            add(GroupingOption.ShowGroupName, true);
		|            add(GroupingOption.SelectRowsOnDoubleClick, true);
		|        }
		|
		|        List<GroupingOptionValue> list = new List<GroupingOptionValue>();
		|
		|        void add<T>(GroupingOption o, T Default)
		|        {
		|            list.Add(new GroupingOptionValue<T>(Default, o)
		|            {
		|                Owner = this
		|            });
		|        }
		|
		|        public GroupingOptionValue this[GroupingOption option]
		|        {
		|            get
		|            {
		|                for (int i = 0; i < list.Count; i++)
		|                {
		|                    if (list[i].Option == option)
		|                    {
		|                        return list[i];
		|                    }
		|                }
		|                return null;
		|            }
		|        }
		|
		|        T GetValue<T>(GroupingOption o)
		|        {
		|            return ((GroupingOptionValue<T>)this[o]).Value;
		|        }
		|
		|        void SetValue<T>(GroupingOption o, T value)
		|        {
		|            ((GroupingOptionValue<T>)this[o]).Value = value;
		|        }
		|
		|        bool ShouldSerialize(GroupingOption o)
		|        {
		|            return !this[o].IsDefault;
		|        }
		|
		|        // Если значение true, новые группы всегда начинают сворачиваться.
		|        public bool StartCollapsed
		|        {
		|            get { return GetValue<bool>(GroupingOption.StartCollapsed); }
		|            set { SetValue(GroupingOption.StartCollapsed, value); }
		|        }
		|
		|        bool ShouldSerializeStartCollapsed()
		|        {
		|            return ShouldSerialize(GroupingOption.StartCollapsed);
		|        }
		|
		|        public const SortOrder DefaultGroupSortOrder = SortOrder.Ascending;
		|
		|        [DefaultValue(DefaultGroupSortOrder)]
		|        public SortOrder GroupSortOrder
		|        {
		|            get { return GetValue<SortOrder>(GroupingOption.GroupSortOrder); }
		|            set { SetValue(GroupingOption.GroupSortOrder, value); }
		|        }
		|
		|        bool ShouldSerializeGroupSortOrder()
		|        {
		|            return ShouldSerialize(GroupingOption.GroupSortOrder);
		|        }
		|
		|        public bool AlwaysGroupOnText
		|        {
		|            get { return GetValue<bool>(GroupingOption.AlwaysGroupOnText); }
		|            set { SetValue(GroupingOption.AlwaysGroupOnText, value); }
		|        }
		|
		|        bool ShouldSerializeAlwaysGroupOnText()
		|        {
		|            return ShouldSerialize(GroupingOption.AlwaysGroupOnText);
		|        }
		|
		|        public bool ShowCount
		|        {
		|            get { return GetValue<bool>(GroupingOption.ShowCount); }
		|            set { SetValue(GroupingOption.ShowCount, value); }
		|        }
		|
		|        bool ShouldSerializeShowCount()
		|        {
		|            return ShouldSerialize(GroupingOption.ShowCount);
		|        }
		|
		|        public bool ShowGroupName
		|        {
		|            get { return GetValue<bool>(GroupingOption.ShowGroupName); }
		|            set { SetValue(GroupingOption.ShowGroupName, value); }
		|        }
		|
		|        bool ShouldSerializeShowGroupName()
		|        {
		|            return ShouldSerialize(GroupingOption.ShowGroupName);
		|        }
		|
		|        public bool SelectRowsOnDoubleClick
		|        {
		|            get { return GetValue<bool>(GroupingOption.SelectRowsOnDoubleClick); }
		|            set { SetValue(GroupingOption.SelectRowsOnDoubleClick, value); }
		|        }
		|
		|        bool ShouldSerializeSelectRowsOnDoubleClick()
		|        {
		|            return ShouldSerialize(GroupingOption.SelectRowsOnDoubleClick);
		|        }
		|
		|        public bool HasNonDefaultValues
		|        {
		|            get
		|            {
		|                foreach (var g in list)
		|                {
		|                    if (!g.IsDefault)
		|                    {
		|                        return true;
		|                    }
		|                }
		|                return false;
		|            }
		|        }
		|
		|        public void CopyValues(GroupingOptions options)
		|        {
		|            foreach (var g in list)
		|            {
		|                g.CopyValue(options[g.Option]);
		|            }
		|        }
		|
		|        public void SetDefaults()
		|        {
		|            foreach (var g in list)
		|            {
		|                g.Reset();
		|            }
		|        }
		|
		|        internal void NotifyChanged(GroupingOption o)
		|        {
		|            if (OptionChanged != null)
		|            {
		|                OptionChanged(this, new GroupingOptionChangedEventArgs(o));
		|            }
		|            if (PropertyChanged != null)
		|            {
		|                PropertyChanged(this, new PropertyChangedEventArgs(o.ToString()));
		|            }
		|        }
		|
		|        [field: NonSerialized]
		|        public event PropertyChangedEventHandler PropertyChanged;
		|
		|        [field: NonSerialized]
		|        public event EventHandler<GroupingOptionChangedEventArgs> OptionChanged;
		|
		|        public bool Equals(GroupingOptions o)
		|        {
		|            if (o == null)
		|            {
		|                return false;
		|            }
		|            if (o.list.Count != list.Count)
		|            {
		|                return false;
		|            }
		|            foreach (var g in list)
		|            {
		|                if (!g.Equals(o[g.Option]))
		|                {
		|                    return false;
		|                }
		|            }
		|            return true;
		|        }
		|    }
		|
		|    partial class GroupingOptions : ISerializable
		|    {
		|        GroupingOptions(SerializationInfo info, StreamingContext context) : this()
		|        {
		|            foreach (var kv in info)
		|            {
		|                try
		|                {
		|                    var o = EnumFunctions.Parse<GroupingOption>(kv.Name);
		|                    this[o].SetValue(kv.Value);
		|                }
		|                catch { }
		|            }
		|        }
		|
		|        public void GetObjectData(SerializationInfo info, StreamingContext context)
		|        {
		|            foreach (var g in list)
		|            {
		|                if (!g.IsDefault)
		|                {
		|                    info.AddValue(g.Option.ToString(), g.GetValue());
		|                }
		|            }
		|        }
		|    }
		|
		|    partial class GroupingOptions : ICustomSerializer
		|    {
		|        bool ICustomSerializer.Serialize(SimpleObjectSerializer s)
		|        {
		|            var vals = list.Where(g => !g.IsDefault).ToArray();
		|            s.Writer.Write((byte)vals.Length);
		|            if (vals.Length > 0)
		|            {
		|                foreach (var g in vals)
		|                {
		|                    s.Writer.Write(g.Option.ToString());
		|                    s.WriteSubValue(g.GetValue());
		|                }
		|            }
		|            return true;
		|        }
		|
		|        bool ICustomSerializer.Deserialize(SimpleObjectDeserializer ds)
		|        {
		|            int cnt = ds.Reader.ReadByte();
		|            for (int i = 0; i < cnt; i++)
		|            {
		|                var name = ds.Reader.ReadString();
		|                var val = ds.GetSubValue();
		|                var o = EnumFunctions.Parse<GroupingOption>(name);
		|                this[o].SetValue(val);
		|            }
		|            return true;
		|        }
		|
		|        bool ICustomSerializer.Initialize(SimpleObjectSerializer s)
		|        {
		|            return true;
		|        }
		|    }
		|
		|    public enum GroupingOption
		|    {
		|        StartCollapsed,
		|        GroupSortOrder,
		|        AlwaysGroupOnText,
		|        ShowCount,
		|        ShowGroupName,
		|        SelectRowsOnDoubleClick
		|    }
		|
		|    public class GroupingOptionChangedEventArgs : EventArgs
		|    {
		|        public readonly GroupingOption Option;
		|
		|        public GroupingOptionChangedEventArgs(GroupingOption Option)
		|        {
		|            this.Option = Option;
		|        }
		|    }
		|
		|    [Serializable]
		|    public abstract class GroupingOptionValue
		|    {
		|        internal GroupingOptions Owner;
		|        public readonly GroupingOption Option;
		|
		|        protected GroupingOptionValue(GroupingOption o)
		|        {
		|            this.Option = o;
		|        }
		|
		|        public abstract bool IsDefault
		|        {
		|            get;
		|        }
		|
		|        public abstract object GetValue();
		|        public abstract object GetDefaultValue();
		|        public abstract void Reset();
		|        internal abstract void CopyValue(GroupingOptionValue o);
		|        public abstract Type ValueType { get; }
		|        public abstract void SetValue(object value);
		|        public abstract bool Equals(GroupingOptionValue v);
		|    }
		|
		|
		|    [Serializable]
		|    internal class GroupingOptionValue<T> : GroupingOptionValue
		|    {
		|        public GroupingOptionValue(T Default, GroupingOption o) : base(o)
		|        {
		|            this.DefaultValue = Default;
		|            this.value = DefaultValue;
		|        }
		|
		|        [NonSerialized]
		|        public T DefaultValue;
		|
		|        T value;
		|
		|        public T Value
		|        {
		|            get { return value; }
		|            set
		|            {
		|                if (Equals(value, this.value))
		|                {
		|                    return;
		|                }
		|                this.value = value;
		|                Owner.NotifyChanged(Option);
		|            }
		|        }
		|
		|        [NonSerialized]
		|        EqualityComparer<T> eq;
		|        bool Equals(T t1, T t2)
		|        {
		|            if (eq == null)
		|            {
		|                eq = EqualityComparer<T>.Default;
		|            }
		|            return eq.Equals(t1, t2);
		|        }
		|
		|        public override bool Equals(GroupingOptionValue v)
		|        {
		|            if (v == null)
		|            {
		|                return false;
		|            }
		|            var o = v.GetValue();
		|            if (o is T)
		|            {
		|                return Equals(value, (T)o);
		|            }
		|            return false;
		|        }
		|
		|        public override bool IsDefault
		|        {
		|            get { return Equals(value, DefaultValue); }
		|        }
		|
		|        public override Type ValueType
		|        {
		|            get { return typeof(T); }
		|        }
		|
		|        public override object GetValue()
		|        {
		|            return value;
		|        }
		|
		|        public override void SetValue(object value)
		|        {
		|            Value = (T)value;
		|        }
		|
		|        public override object GetDefaultValue()
		|        {
		|            return DefaultValue;
		|        }
		|
		|        internal override void CopyValue(GroupingOptionValue o)
		|        {
		|            Value = ((GroupingOptionValue<T>)o).value;
		|        }
		|
		|        public override void Reset()
		|        {
		|            Value = DefaultValue;
		|        }
		|    }
		|
		|    public static class EnumFunctions
		|    {
		|        // Возвращает все значения указанного перечисления.
		|        public static IEnumerable<T> GetValues<T>() where T : IComparable, IFormattable, IConvertible
		|        {
		|            return GetValues<T>(x => x);
		|        }
		|
		|        // Возвращает все значения указанного перечисления.
		|        public static IEnumerable<T> GetValues<T>(Func<T, T> pred) where T : IComparable, IFormattable, IConvertible
		|        {
		|            foreach (T item in Enum.GetValues(typeof(T)))
		|            {
		|                yield return pred(item);
		|            }
		|        }
		|
		|        // Возвращает все значения указанного перечисления, которые соответствуют указанному предикату.
		|        public static IEnumerable<T> GetValues<T>(Func<T, bool> predicate) where T : IComparable, IFormattable, IConvertible
		|        {
		|            foreach (var item in GetValues<T>())
		|            {
		|                if (predicate(item))
		|                {
		|                    yield return item;
		|                }
		|            }
		|        }
		|
		|        // Проверяет, установлен ли для указанного значения перечисления бит флага.
		|        [Obsolete(""Framework 4.0 contains a native HasFlag function :D"")]
		|        public static bool HasFlag<T>(this T value, T flag) where T : IComparable, IFormattable, IConvertible
		|        {
		|            int fl = flag.ToInt32(null);
		|            return (value.ToInt32(null) & fl) == fl;
		|        }
		|
		|        // Вызывает Enum.Parse и создает строго типизированный результат.
		|        public static T Parse<T>(string Value) where T : IComparable, IFormattable, IConvertible
		|        {
		|            if (string.IsNullOrEmpty(Value))
		|            {
		|                return default(T);
		|            }
		|            return (T)Enum.Parse(typeof(T), Value, true);
		|        }
		|
		|        // Разбивает перечисление флагов на его базовые значения.
		|        public static IEnumerable<T> Select<T>(this T e, Func<T, T> pred) where T : IComparable, IFormattable, IConvertible
		|        {
		|            foreach (T item in Split(e))
		|            {
		|                yield return pred(item);
		|            }
		|        }
		|
		|        // Разбивает перечисление флагов на его базовые значения.
		|        public static IEnumerable<T> Split<T>(this T enumeration) where T : IComparable, IFormattable, IConvertible
		|        {
		|            int val = Convert.ToInt32(enumeration);
		|            foreach (var item in GetValues<T>())
		|            {
		|                int i = item.ToInt32(null);
		|                if (i > 0 & (i & val) == i)
		|                {
		|                    yield return item;
		|                }
		|            }
		|        }
		|
		|        // Разбивает перечисление флагов на его базовые значения и фильтрует значения, уже установленные с помощью маски.
		|        public static IEnumerable<T> Split<T>(this T enumeration, bool CompactMaskedValues) where T : IComparable, IFormattable, IConvertible
		|        {
		|            var res = Split(enumeration);
		|            if (!CompactMaskedValues)
		|            {
		|                return res;
		|            }
		|
		|            var list = res.OrderByDescending(r => r.ToInt32(null)).ToList();
		|            for (int i = 0; i < list.Count; i++)
		|            {
		|                var val = list[i].ToInt32(null);
		|                for (int j = i + 1; j < list.Count; j++)
		|                {
		|                    if ((val & list[j].ToInt32(null)) == list[j].ToInt32(null))
		|                    {
		|                        list.RemoveAt(j--);
		|                    }
		|                }
		|            }
		|            return list;
		|        }
		|
		|        public static IEnumerable<T> GetValues<T>(this T e, Func<T, bool> pred) where T : IComparable, IFormattable, IConvertible
		|        {
		|            foreach (T item in Split(e))
		|            {
		|                if (pred(item))
		|                {
		|                    yield return item;
		|                }
		|            }
		|        }
		|    }
		|
		|    #endregion
		|
		|    #region файл GroupingSource.cs
		|
		|    [DefaultEvent(""GroupingChanged"")]
		|    public partial class GroupingSource : BindingSource, ICancelAddNew
		|    {
		|        public GroupingSource()
		|        {
		|        }
		|
		|        public GroupingSource(object DataSource) : this()
		|        {
		|            this.DataSource = DataSource;
		|        }
		|
		|        public GroupingSource(object DataSource, string GroupOn) : this(DataSource)
		|        {
		|        }
		|
		|        GroupingInfo groupon;
		|
		|        [DefaultValue(null)]
		|        public GroupingInfo GroupOn
		|        {
		|            get { return groupon; }
		|            set
		|            {
		|                if (groupon == value)
		|                {
		|                    return;
		|                }
		|
		|                if (value == null)
		|                {
		|                    RemoveGrouping();
		|                }
		|                else
		|                {
		|                    if (value.Equals(groupon))
		|                    {
		|                        return;
		|                    }
		|                    setgroupon(value, Options.AlwaysGroupOnText);
		|                }
		|            }
		|        }
		|
		|        void setgroupon(GroupingInfo value, bool forcetext)
		|        {
		|            info = null;
		|            if (forcetext && value.GroupValueType != typeof(string))
		|            {
		|                value = new StringGroupWrapper(value);
		|            }
		|            groupon = value;
		|            OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));
		|            OnGroupingChanged();
		|        }
		|
		|        public bool IsGrouped
		|        {
		|            get { return groupon != null; }
		|        }
		|
		|        internal DataGridViewGrouper Grouper;
		|
		|        public void RemoveGrouping()
		|        {
		|            if (groupon == null)
		|            {
		|                return;
		|            }
		|            groupon = null;
		|            ResetGroups();
		|            OnGroupingChanged();
		|        }
		|
		|        public bool SetGroupOn(string Property)
		|        {
		|            return SetGroupOn(GetProperty(Property));
		|        }
		|
		|        public PropertyDescriptor GetProperty(string Name)
		|        {
		|            var pd = this.GetItemProperties(null)[Name];
		|            if (pd == null)
		|            {
		|                throw new Exception(Name + "" is not a valid property"");
		|            }
		|            return pd;
		|        }
		|
		|        public bool SetGroupOn(PropertyDescriptor p)
		|        {
		|            if (p == null)
		|            {
		|                throw new ArgumentNullException();
		|            }
		|            if (groupon == null || !groupon.IsProperty(p))
		|            {
		|                GroupOn = new PropertyGrouper(p);
		|                return true;
		|            }
		|            return false;
		|        }
		|
		|        public void SetCustomGroup<T>(Func<T, object> GroupValueProvider, string Description = null)
		|        {
		|            if (GroupValueProvider == null)
		|            {
		|                throw new ArgumentNullException();
		|            }
		|            GroupOn = new DelegateGrouper<T>(GroupValueProvider, Description);
		|        }
		|
		|        public void SetGroupOnStartLetters(GroupingInfo g, int Letters)
		|        {
		|            GroupOn = new StartLetterGrouper(g, Letters);
		|        }
		|
		|        public void SetGroupOnStartLetters(string Property, int Letters)
		|        {
		|            SetGroupOnStartLetters(GetProperty(Property), Letters);
		|        }
		|
		|        public bool IsGroupRow(int Index)
		|        {
		|            if (info == null)
		|            {
		|                return false;
		|            }
		|            if (Index < 0 || Index >= Count)
		|            {
		|                return false;
		|            }
		|            return info.Rows[Index] is GroupRow;
		|        }
		|
		|        public void CollapseExpandAll(bool collapse)
		|        {
		|            if (Groups == null)
		|            {
		|                return;
		|            }
		|            var cur = CurrentGroup;
		|            Groups.CollapseExpandAll(collapse);
		|            if (cur != null)
		|            {
		|                try
		|                {
		|                    CurrentGroup = cur;
		|                }
		|                catch { }
		|            }
		|        }
		|
		|        [DefaultValue(GroupingOptions.DefaultGroupSortOrder)]
		|        public SortOrder GroupSortOrder
		|        {
		|            get
		|            {
		|                if (options == null)
		|                {
		|                    return GroupingOptions.DefaultGroupSortOrder;
		|                }
		|                return options.GroupSortOrder;
		|            }
		|            set { Options.GroupSortOrder = value; }
		|        }
		|
		|        GroupingOptions options;
		|        [DefaultValue(null)]
		|        public GroupingOptions Options
		|        {
		|            get
		|            {
		|                if (options == null && !DesignMode)
		|                {
		|                    Options = new GroupingOptions();
		|                }
		|                return options;
		|            }
		|            set
		|            {
		|                if (options == value)
		|                {
		|                    return;
		|                }
		|                var cursort = GroupSortOrder;
		|                if (options != null)
		|                {
		|                    options.OptionChanged -= new EventHandler<GroupingOptionChangedEventArgs>(options_OptionChanged);
		|                    cursort = options.GroupSortOrder;
		|                }
		|                options = value;
		|                if (options != null)
		|                {
		|                    options.OptionChanged += new EventHandler<GroupingOptionChangedEventArgs>(options_OptionChanged);
		|                }
		|                if (GroupSortOrder != cursort)
		|                {
		|                    sort();
		|                }
		|            }
		|        }
		|
		|        void options_OptionChanged(object sender, GroupingOptionChangedEventArgs e)
		|        {
		|
		|            if (!shouldreset)
		|            {
		|                return;
		|            }
		|            if (e.Option == GroupingOption.GroupSortOrder)
		|            {
		|                sort();
		|            }
		|            else if (e.Option == GroupingOption.AlwaysGroupOnText)
		|            {
		|                setgroupontext();
		|            }
		|            else if (e.Option == GroupingOption.StartCollapsed)
		|            {
		|                CollapseExpandAll(options.StartCollapsed);
		|            }
		|            else if (e.Option == GroupingOption.ShowCount || e.Option == GroupingOption.ShowGroupName)
		|            {
		|                if (Grid != null)
		|                {
		|                    InvalidateGridGroupRows();
		|                }
		|            }
		|        }
		|
		|        void InvalidateGridGroupRows()
		|        {
		|            var grid = Grid;
		|            foreach (var gr in info.Groups)
		|            {
		|                grid.InvalidateRow(gr.Index);
		|            }
		|        }
		|
		|        void setgroupontext()
		|        {
		|            var istext = groupon.GroupValueType == typeof(string);
		|            if (istext == options.AlwaysGroupOnText)
		|            {
		|                return;
		|            }
		|            if (istext)
		|            {
		|                if (groupon is StringGroupWrapper)
		|                {
		|                    GroupOn = ((StringGroupWrapper)groupon).Grouper;
		|                }
		|            }
		|            else
		|            {
		|                setgroupon(groupon, true);
		|            }
		|        }
		|
		|        void sort()
		|        {
		|            if (info == null)
		|            {
		|                return;
		|            }
		|            if (GroupSortOrder == SortOrder.None)
		|            {
		|                reset(false);
		|            }
		|            else
		|            {
		|                info.Sort();
		|            }
		|        }
		|
		|        [DefaultValue(null)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public GroupRow CurrentGroup
		|        {
		|            get { return GetGroup(Position); }
		|            set
		|            {
		|                if (value == null)
		|                {
		|                    throw new ArgumentNullException();
		|                }
		|                Position = value.Index;
		|                if (!value.Collapsed)
		|                {
		|                    Position++;
		|                }
		|            }
		|        }
		|
		|        public GroupRow GetGroup(int RowIndex)
		|        {
		|            if (RowIndex == -1 || Groups == null)
		|            {
		|                return null;
		|            }
		|            return Groups.GetByRow(RowIndex);
		|        }
		|
		|        public GroupList Groups
		|        {
		|            get { return Info.Groups; }
		|        }
		|
		|        internal void CheckNewRow()
		|        {
		|            if (shouldreset)
		|            {
		|                info.Groups.CheckNewRow(true);
		|            }
		|        }
		|
		|        class NullValue
		|        {
		|            public override string ToString()
		|            {
		|                return ""<Null>"";
		|            }
		|
		|            public static readonly NullValue Instance = new NullValue();
		|        }
		|
		|        class GroupInfo
		|        {
		|            public readonly GroupingSource Owner;
		|
		|            public GroupInfo(GroupingSource Owner)
		|            {
		|                this.Owner = Owner;
		|                set();
		|            }
		|
		|            public IList Rows;
		|            //public List<GroupRow> Groups = new List<GroupRow>();
		|            public GroupList Groups;
		|
		|            void set()
		|            {
		|                Groups = null;
		|                if (Owner.groupon == null)
		|                {
		|                    Rows = Owner.List;
		|                    return;
		|                }
		|                Groups = new GroupList(Owner);
		|                Rows = Groups.Fill();
		|            }
		|
		|            public void ReBuild()
		|            {
		|                if (Groups == null)
		|                {
		|                    set();
		|                }
		|                else
		|                {
		|                    Groups.Fill();
		|                }
		|            }
		|
		|            public void Sort()
		|            {
		|                if (Groups == null)
		|                {
		|                    return;
		|                }
		|                Groups.Sort(Owner.GroupSortOrder);
		|            }
		|        }
		|
		|        GroupInfo info;
		|
		|        GroupInfo Info
		|        {
		|            get
		|            {
		|                if (info == null)
		|                {
		|                    info = new GroupInfo(this);
		|                    if (NeedSync)
		|                    {
		|                        SyncCurrencyManagers();
		|                    }
		|                }
		|                return info;
		|            }
		|        }
		|
		|        void OnGroupingChanged()
		|        {
		|            if (GroupingChanged != null)
		|            {
		|                GroupingChanged(this, EventArgs.Empty);
		|            }
		|        }
		|
		|        public event EventHandler GroupingChanged;
		|
		|        internal DataGridView Grid
		|        {
		|            get
		|            {
		|                if (Grouper == null)
		|                {
		|                    return null;
		|                }
		|                return Grouper.DataGridView;
		|            }
		|        }
		|
		|        public void ResetGroups()
		|        {
		|            reset(false);
		|        }
		|
		|        bool resetting;
		|
		|        void reset(bool fromlistchange)
		|        {
		|            if (info == null || resetting)
		|            {
		|                return;
		|            }
		|            int pos = Position;
		|            var cur = Current;
		|            var grid = Grid;
		|            int? firstrow = grid == null ? (int?)null : grid.FirstDisplayedScrollingRowIndex;
		|            resetting = true;
		|            try
		|            {
		|                if (fromlistchange)
		|                {
		|                    info.ReBuild();
		|                }
		|                else
		|                {
		|                    info = null;
		|                }
		|                base.OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));
		|
		|                if (pos != -1)
		|                {
		|                    int i = cur is GroupRow ? pos : IndexOf(cur);
		|                    if (i == -1)
		|                    {
		|                        i = pos;
		|                    }
		|
		|                    if (Position == i)
		|                    {
		|                        OnPositionChanged(EventArgs.Empty);
		|                    }
		|                    else
		|                    {
		|                        this.Position = i;
		|                    }
		|
		|                    if (firstrow.HasValue)
		|                    {
		|                        try
		|                        {
		|                            if (grid.Rows.Count > firstrow.Value && firstrow.Value > -1)
		|                            {
		|                                grid.FirstDisplayedScrollingRowIndex = firstrow.Value;
		|                            }
		|                            //OnPositionChanged(EventArgs.Empty);
		|                        }
		|                        catch { }
		|                    }
		|                }
		|            }
		|            finally
		|            {
		|                resetting = false;
		|
		|                if (NeedSync)
		|                {
		|                    SyncCurrencyManagers();
		|                }
		|            }
		|        }
		|
		|        internal void FireBaseReset(bool PreserveScrollPosition)
		|        {
		|            FireBaseChanged(new ListChangedEventArgs(ListChangedType.Reset, -1), PreserveScrollPosition);
		|        }
		|
		|        internal void FireBaseChanged(ListChangedType type, int index, bool PreserveScrollPosition)
		|        {
		|            FireBaseChanged(new ListChangedEventArgs(type, index), PreserveScrollPosition);
		|        }
		|        internal void FireBaseChanged(ListChangedEventArgs e, bool PreserveScrollPosition)
		|        {
		|            int soffset = -1;
		|            PreserveScrollPosition &= Grid != null;
		|            if (PreserveScrollPosition)
		|            {
		|                soffset = Grid.FirstDisplayedScrollingRowIndex;
		|            }
		|            base.OnListChanged(e);
		|            if (soffset > 0)
		|            {
		|                try
		|                {
		|                    Grid.FirstDisplayedScrollingRowIndex = soffset;
		|                }
		|                catch { }
		|            }
		|        }
		|
		|        // Это событие срабатывает, когда необходимо закрасить строку группы и запрашиваются отображаемые значения.
		|        public event EventHandler<GroupDisplayEventArgs> DisplayGroup;
		|
		|        internal void FireDisplayGroup(GroupDisplayEventArgs e)
		|        {
		|            if (DisplayGroup != null)
		|            {
		|                DisplayGroup(this, e);
		|            }
		|        }
		|
		|        CurrencyManager cm;
		|
		|        void UnwireCurMan()
		|        {
		|            if (cm == null)
		|            {
		|                return;
		|            }
		|            cm.CurrentChanged -= new EventHandler(bsource_CurrentChanged);
		|        }
		|
		|        protected override void Dispose(bool disposing)
		|        {
		|            UnwireCurMan();
		|            groupon = null;
		|            base.Dispose(disposing);
		|        }
		|
		|        protected override void OnDataSourceChanged(EventArgs e)
		|        {
		|            UnwireCurMan();
		|            ResetGroups();
		|            var ds = DataSource;
		|            if (ds is ICurrencyManagerProvider)
		|            {
		|                cm = ((ICurrencyManagerProvider)ds).CurrencyManager;
		|            }
		|            else
		|            {
		|                //find from bindingcontext?
		|            }
		|
		|            if (cm != null)
		|            {
		|                cm.CurrentChanged += new EventHandler(bsource_CurrentChanged);
		|                if (NeedSync)
		|                {
		|                    SyncCurrencyManagers();
		|                }
		|            }
		|            base.OnDataSourceChanged(e);
		|        }
		|
		|        int suspendlistchange;
		|
		|        protected override void OnListChanged(ListChangedEventArgs e)
		|        {
		|            if (suspendlistchange > 0 || resetting)
		|            {
		|                return;
		|            }
		|
		|            if (shouldreset)
		|            {
		|                switch (e.ListChangedType)
		|                {
		|                    case ListChangedType.ItemChanged:
		|                        if (groupon.IsProperty(e.PropertyDescriptor) && !info.Groups.IsNewRow(e.NewIndex))
		|                        {
		|                            reset(true);
		|                        }
		|                        else
		|                        {
		|                            FireBaseChanged(new ListChangedEventArgs(ListChangedType.ItemChanged, IndexOf(List[e.NewIndex]), e.PropertyDescriptor), false);
		|                        }
		|                        return;
		|                    case ListChangedType.ItemAdded:
		|                        if (info.Groups.HasNewRow)
		|                        {
		|                            info.Groups.AddNew(List[e.NewIndex], true);
		|                        }
		|                        else
		|                        {
		|                            reset(true);
		|                        }
		|                        return;
		|                    case ListChangedType.ItemDeleted:
		|                        reset(true);
		|                        return;
		|                    case ListChangedType.Reset:
		|                        reset(true);
		|                        return;
		|                    case ListChangedType.ItemMoved:
		|                        reset(true); //check sorting??
		|                        return;
		|                }
		|            }
		|
		|            switch (e.ListChangedType)
		|            {
		|                case ListChangedType.PropertyDescriptorAdded:
		|                case ListChangedType.PropertyDescriptorChanged:
		|                case ListChangedType.PropertyDescriptorDeleted:
		|                    props = null;
		|                    break;
		|            }
		|
		|            base.OnListChanged(e);
		|        }
		|
		|        bool shouldreset
		|        {
		|            get { return info != null && info.Groups != null; }
		|        }
		|
		|        public override object AddNew()
		|        {
		|            if (!shouldreset)
		|            {
		|                return base.AddNew();
		|            }
		|
		|            object res;
		|            int newrow;
		|            suspendlistchange++;
		|            try
		|            {
		|                res = base.AddNew();
		|                newrow = info.Groups.AddNew(res, false);
		|            }
		|            finally
		|            {
		|                suspendlistchange--;
		|            }
		|
		|            Position = newrow;
		|            return res;
		|        }
		|
		|        public override void ApplySort(PropertyDescriptor property, ListSortDirection sort)
		|        {
		|            if (property is PropertyWrapper)
		|            {
		|                property = (property as PropertyWrapper).Property;
		|            }
		|            base.ApplySort(property, sort);
		|        }
		|
		|        public override void ApplySort(ListSortDescriptionCollection sorts)
		|        {
		|            base.ApplySort(sorts);
		|        }
		|
		|        public override void RemoveAt(int index)
		|        {
		|            if (!shouldreset)
		|            {
		|                base.RemoveAt(index);
		|            }
		|            else if (!IsGroupRow(index))
		|            {
		|                suspendlistchange++;
		|                try
		|                {
		|                    // Удалить из базового списка.
		|                    var rec = this[index];
		|                    var i = List.IndexOf(rec);
		|                    if (i != -1)
		|                    {
		|                        List.RemoveAt(i);
		|                    }
		|
		|                    //Удалить из списка строк.
		|                    info.Rows.RemoveAt(index);
		|
		|                    base.OnListChanged(new ListChangedEventArgs(ListChangedType.ItemDeleted, index));
		|
		|                    var gr = GetGroup(index);
		|                    if (gr != null)
		|                    {
		|                        gr.Remove(rec);
		|                    }
		|                }
		|                finally
		|                {
		|                    suspendlistchange--;
		|                }
		|            }
		|        }
		|
		|        public override void Remove(object value)
		|        {
		|            if (value is GroupRow)
		|            {
		|                return;
		|            }
		|
		|            int index = this.IndexOf(value);
		|
		|            if (index != -1)
		|            {
		|                RemoveAt(index);
		|            }
		|        }
		|
		|        void ICancelAddNew.CancelNew(int pos)
		|        {
		|            if (!shouldreset || !info.Groups.IsNewRow(pos))
		|            {
		|                return;
		|            }
		|
		|            ICancelAddNew list = this.List as ICancelAddNew;
		|            if (list != null)
		|            {
		|                suspendlistchange++;
		|                try
		|                {
		|                    int li = List.IndexOf(this[pos]);
		|                    list.CancelNew(li);
		|                }
		|                finally { suspendlistchange--; }
		|            }
		|            RemoveAt(pos);
		|        }
		|
		|
		|        protected override void OnCurrentChanged(EventArgs e)
		|        {
		|            base.OnCurrentChanged(e);
		|            if (NeedSync)
		|            {
		|                var cur = Current;
		|                while (cur is GroupRow)
		|                {
		|                    cur = ((GroupRow)cur).FirstRow;
		|                    if (cur == cm.Current)
		|                    {
		|                        return;
		|                    }
		|                }
		|                suspendsync = true;
		|                try
		|                {
		|                    cm.Position = cm.List.IndexOf(cur);
		|                }
		|                finally
		|                {
		|                    suspendsync = false;
		|                }
		|            }
		|        }
		|
		|        void bsource_CurrentChanged(object sender, EventArgs e)
		|        {
		|            if (NeedSync)
		|            {
		|                SyncCurrencyManagers();
		|            }
		|        }
		|
		|        bool suspendsync;
		|
		|        bool NeedSync
		|        {
		|            get
		|            {
		|                if (cm == null || suspendlistchange > 0 || suspendsync || cm.Count == 0)
		|                {
		|                    return false;
		|                }
		|
		|                //if (cm.IsBindingSuspended || this.IsBindingSuspended)
		|                //{
		|                //    return false;
		|                //}
		|
		|                var p1 = Position;
		|                if (p1 == cm.Position)
		|                {
		|                    if (p1 == -1)
		|                    {
		|                        return false;
		|                    }
		|                    return Current != cm.Current;
		|                }
		|                return true;
		|            }
		|        }
		|
		|        private void SyncCurrencyManagers()
		|        {
		|            suspendsync = true;
		|            try
		|            {
		|                if (cm.Count > 0)
		|                {
		|                    Position = IndexOf(cm.Current);
		|                }
		|            }
		|            finally { suspendsync = false; }
		|        }
		|
		|        public override int IndexOf(object value)
		|        {
		|            return Info.Rows.IndexOf(value);
		|        }
		|
		|        public override bool Contains(object value)
		|        {
		|            return Info.Rows.Contains(value);
		|        }
		|
		|        public override void Clear()
		|        {
		|            suspendlistchange++;
		|            try
		|            {
		|                base.Clear();
		|                if (shouldreset)
		|                {
		|                    info.Groups.Fill();
		|                }
		|                FireBaseReset(false);
		|            }
		|            finally
		|            {
		|                suspendlistchange--;
		|            }
		|        }
		|
		|        public override int Add(object value)
		|        {
		|            return base.Add(value);
		|        }
		|
		|        public override void Insert(int index, object value)
		|        {
		|            base.Insert(index, value);
		|        }
		|
		|        public class PropertyWrapper : PropertyDescriptor
		|        {
		|            public readonly PropertyDescriptor Property;
		|            public readonly GroupingSource Owner;
		|
		|            public PropertyWrapper(PropertyDescriptor Property, GroupingSource Owner) : base(Property)
		|            {
		|                this.Property = Property;
		|                this.Owner = Owner;
		|            }
		|
		|            public override bool CanResetValue(object component)
		|            {
		|                return Property.CanResetValue(component);
		|            }
		|
		|            public override Type ComponentType
		|            {
		|                get { return Property.ComponentType; }
		|            }
		|
		|            public override object GetValue(object component)
		|            {
		|                if (component is GroupRow)
		|                {
		|                    if (Owner.groupon.IsProperty(Property))
		|                    {
		|                        return (component as GroupRow).Value;
		|                    }
		|                    return null;
		|                }
		|                return Property.GetValue(component);
		|            }
		|
		|            public override bool IsReadOnly
		|            {
		|                get { return Property.IsReadOnly; }
		|            }
		|
		|            public override Type PropertyType
		|            {
		|                get { return Property.PropertyType; }
		|            }
		|
		|            public override string Category
		|            {
		|                get { return Property.Category; }
		|            }
		|
		|            public override string Description
		|            {
		|                get { return Property.Description; }
		|            }
		|
		|            public override string DisplayName
		|            {
		|                get { return Property.DisplayName; }
		|            }
		|
		|            public override bool DesignTimeOnly
		|            {
		|                get { return Property.DesignTimeOnly; }
		|            }
		|
		|            public override AttributeCollection Attributes
		|            {
		|                get { return Property.Attributes; }
		|            }
		|
		|            public override string Name
		|            {
		|                get { return Property.Name; }
		|            }
		|
		|            public override void ResetValue(object component)
		|            {
		|                Property.ResetValue(component);
		|            }
		|
		|            public override void SetValue(object component, object value)
		|            {
		|                Property.SetValue(component, value);
		|            }
		|
		|            public override bool ShouldSerializeValue(object component)
		|            {
		|                return Property.ShouldSerializeValue(component);
		|            }
		|        }
		|
		|        PropertyDescriptorCollection props;
		|
		|        public override PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors)
		|        {
		|            if (listAccessors == null)
		|            {
		|                if (props == null)
		|                {
		|                    /*
		|                    props = new PropertyDescriptorCollection(
		|                        base.GetItemProperties(null).Cast<PropertyDescriptor>()
		|                        .Select(pd => new PropertyWrapper(pd, this)).ToArray());*/
		|                    props = base.GetItemProperties(null);
		|                    if (props == null)
		|                    {
		|                        return null;
		|                    }
		|                    PropertyDescriptor[] arr = new PropertyDescriptor[props.Count];
		|
		|                    for (int i = 0; i < props.Count; i++)
		|                    {
		|                        arr[i] = new PropertyWrapper(props[i], this);
		|                    }
		|                    props = new PropertyDescriptorCollection(arr);
		|                }
		|                return props;
		|            }
		|            return base.GetItemProperties(listAccessors);
		|        }
		|
		|        // Количество базового источника (без групповых запросов).
		|        public int BaseCount
		|        {
		|            get { return List.Count; }
		|        }
		|
		|        public object GetBaseRow(int Index)
		|        {
		|            return List[Index];
		|        }
		|
		|        // Общее количество: количество записей плюс количество групповых записей.
		|        public override int Count
		|        {
		|            get { return Info.Rows.Count; }
		|        }
		|
		|        public override object this[int index]
		|        {
		|            get { return Info.Rows[index]; }
		|            set { Info.Rows[index] = value; }
		|        }
		|    }
		|
		|    #endregion
		|
		|    #region файл GroupList.cs
		|
		|    // Коллекция GroupRow, используемая GroupingSource
		|    public class GroupList : IEnumerable<GroupRow>
		|    {
		|        GroupingInfo gi;
		|        public readonly GroupingSource Source;
		|        public readonly Type GroupValueType;
		|        GenericComparer comparer;
		|
		|        // Текущая коллекция GroupRow.
		|        internal List<GroupRow> List = new List<GroupRow>();
		|
		|        // Коллекции всех групп. Записи в этом списке сохраняются для сохранения настроек (например, свернутые)
		|        // для каждой группы. Очищается только коллекция строк внутри каждого GroupRow.
		|        List<GroupRow> allgroups = new List<GroupRow>();
		|
		|        public GroupList(GroupingSource Source)
		|        {
		|            this.Source = Source;
		|            this.gi = Source.GroupOn;
		|            this.GroupValueType = gi.GroupValueType;
		|        }
		|
		|        internal IList Fill()
		|        {
		|            var options = Source.Options;
		|            bool startcollapsed = options.StartCollapsed;
		|            bool RemoveEmpty = allgroups.Count > 0;
		|
		|            if (RemoveEmpty)
		|            {
		|                foreach (var g in allgroups)
		|                {
		|                    g.Rows.Clear();
		|                    //if (startcollapsed)
		|                    //{
		|                    //    g.SetCollapsed(true, false);
		|                    //}
		|                }
		|            }
		|            List.Clear();
		|            if (newrows != null)
		|            {
		|                newrows.Rows.Clear();
		|            }
		|
		|            foreach (object row in Source.List)
		|            {
		|                object key = gi.GetGroupValue(row);
		|                int hash = key == null ? 0 : key.GetHashCode();
		|                GroupRow gr = null;
		|                for (int i = 0; i < allgroups.Count; i++)
		|                {
		|                    if (allgroups[i].HashCode == hash && (key == null || key.Equals(allgroups[i].value)))
		|                    {
		|                        gr = allgroups[i];
		|                        break;
		|                    }
		|                }
		|
		|                if (gr == null)
		|                {
		|                    gr = new GroupRow(this);
		|                    gr.value = key;
		|                    gr.HashCode = hash;
		|                    if (startcollapsed)
		|                    {
		|                        gr.SetCollapsed(true, false);
		|                    }
		|                    allgroups.Add(gr);
		|                }
		|                gr.Rows.Add(row); // Не gr.Add чтобы предотвратить события, измененные списком.
		|            }
		|
		|
		|            if (RemoveEmpty)
		|            {
		|                foreach (var g in allgroups)
		|                {
		|                    if (g.Count > 0)
		|                    {
		|                        List.Add(g);
		|                    }
		|                }
		|            }
		|            else
		|            {
		|                List.AddRange(allgroups);
		|            }
		|
		|            sort(Source.GroupSortOrder, false);
		|
		|            if (Rows == null)
		|            {
		|                Rows = new ArrayList(List.Count + Source.BaseCount);
		|            }
		|            else
		|            {
		|                Rows.Clear();
		|            }
		|
		|            if (startcollapsed && !RemoveEmpty)
		|            {
		|                AddGroupsOnly();
		|            }
		|            else
		|            {
		|                RebuildRows();
		|            }
		|            CheckNewRow(false);
		|            return Rows;
		|        }
		|
		|        int compare(GroupRow g1, GroupRow g2)
		|        {
		|            return comparer.Compare(g1.value, g2.value);
		|        }
		|
		|        internal ArrayList Rows;
		|
		|        internal void RebuildRows()
		|        {
		|            int gi = 0;
		|            foreach (GroupRow g in List)
		|            {
		|                g.Index = Rows.Count;
		|                g.GroupIndex = gi++;
		|                Rows.Add(g);
		|                if (!g.Collapsed)
		|                {
		|                    foreach (object row in g.Rows)
		|                    {
		|                        Rows.Add(row);
		|                    }
		|                }
		|            }
		|        }
		|
		|        // Добавляет группы в коллекцию строк и объединяет группы.
		|        internal void AddGroupsOnly()
		|        {
		|            Rows.AddRange(List);
		|            ReIndex(0);
		|        }
		|
		|        internal void ReIndex(int From)
		|        {
		|            int last = From == 0 ? 0 : List[From - 1].LastIndex + 1;
		|            for (int i = From; i < List.Count; i++)
		|            {
		|                List[i].Index = last;
		|                List[i].GroupIndex = i;
		|                last = List[i].LastIndex + 1;
		|            }
		|        }
		|
		|        public GroupRow[] ToArray()
		|        {
		|            return List.ToArray();
		|        }
		|
		|        public int Count
		|        {
		|            get { return List.Count; }
		|        }
		|
		|        public GroupRow this[int Index]
		|        {
		|            get { return List[Index]; }
		|        }
		|
		|        public int IndexOf(GroupRow row)
		|        {
		|            return List.IndexOf(row);
		|        }
		|
		|        IEnumerator IEnumerable.GetEnumerator()
		|        {
		|            return List.GetEnumerator();
		|        }
		|
		|        IEnumerator<GroupRow> IEnumerable<GroupRow>.GetEnumerator()
		|        {
		|            return List.GetEnumerator();
		|        }
		|
		|        public GroupRow GetByRow(int RowIndex)
		|        {
		|            GroupRow res = null;
		|            foreach (GroupRow g in List)
		|            {
		|                if (g.Index > RowIndex)
		|                {
		|                    break;
		|                }
		|                res = g;
		|            }
		|            return res;
		|        }
		|
		|        public void CollapseExpandAll(bool collapse)
		|        {
		|            foreach (var gr in List)
		|            {
		|                gr.SetCollapsed(collapse, false);
		|            }
		|
		|            Rows.Clear();
		|            if (collapse)
		|            {
		|                AddGroupsOnly();
		|            }
		|            else
		|            {
		|                RebuildRows();
		|            }
		|            Source.FireBaseReset(false);
		|        }
		|
		|        void sort(SortOrder order, bool Rebuild)
		|        {
		|            if (order != SortOrder.None)
		|            {
		|                GroupRow g = Rebuild ? Source.GetGroup(Source.Position) : null;
		|
		|                if (comparer == null)
		|                {
		|                    comparer = new GenericComparer(GroupValueType);
		|                }
		|
		|                comparer.Descending = order == SortOrder.Descending;
		|                List.Sort(compare);
		|
		|                if (Rebuild)
		|                {
		|                    Rows.Clear();
		|                    RebuildRows();
		|                    Source.FireBaseReset(false);
		|                    if (g != null)
		|                    {
		|                        Source.Position = g.Index;
		|                        if (!g.Collapsed)
		|                        {
		|                            Source.Position++;
		|                        }
		|                    }
		|                }
		|            }
		|        }
		|
		|        public void Sort(SortOrder sortOrder)
		|        {
		|            sort(sortOrder, true);
		|        }
		|
		|        internal int AddNew(object res, bool GroupOnly)
		|        {
		|            if (newrows == null)
		|            {
		|                int i = Rows.Add(res);
		|                Source.FireBaseChanged(ListChangedType.ItemAdded, i, false);
		|                return i;
		|            }
		|            else
		|            {
		|                return newrows.Add(res);
		|            }
		|        }
		|
		|        internal bool HasNewRow
		|        {
		|            get { return newrows != null; }
		|        }
		|
		|        internal bool IsNewRow(int pos)
		|        {
		|            if (newrows == null)
		|            {
		|                return false;
		|            }
		|            return pos > newrows.Index;
		|        }
		|
		|        internal void CheckNewRow(bool FireChanged)
		|        {
		|            var grid = Source.Grid;
		|            bool nr = grid != null && grid.AllowUserToAddRows;
		|
		|            int i = FireChanged && newrows != null ? Rows.IndexOf(newrows) : -1;
		|
		|            if (nr)
		|            {
		|                if (i == -1)
		|                {
		|                    if (newrows == null)
		|                    {
		|                        newrows = new NewRowsGroup(this);
		|                        //allgroups.Add(newrows);
		|                    }
		|                    newrows.Index = Rows.Count;
		|                    List.Add(newrows);
		|                    Rows.Add(newrows);
		|                    if (FireChanged)
		|                    {
		|                        Source.FireBaseChanged(ListChangedType.ItemAdded, newrows.Index, true);
		|                    }
		|                }
		|            }
		|            else if (i != -1)
		|            {
		|                Rows.RemoveAt(i);
		|                if (newrows.Count == 0)
		|                {
		|                    Source.FireBaseChanged(ListChangedType.ItemDeleted, i, true);
		|                }
		|                else
		|                {
		|                    newrows.Rows.Clear();
		|                    Fill();
		|                    Source.FireBaseReset(true);
		|                }
		|            }
		|        }
		|
		|        NewRowsGroup newrows;
		|
		|        class NewRowsGroup : GroupRow
		|        {
		|            public NewRowsGroup(GroupList list) : base(list)
		|            {
		|            }
		|
		|            protected override void SetDisplayInfo(GroupDisplayEventArgs e)
		|            {
		|                base.SetDisplayInfo(e);
		|                e.Header = ""New Rows"";
		|                e.DisplayValue = null;
		|            }
		|
		|            protected override bool AllowRemove
		|            {
		|                get { return false; }
		|            }
		|
		|            protected override bool AllowCollapse
		|            {
		|                get { return false; }
		|            }
		|        }
		|    }
		|
		|    // Информация об одной группе внутри GroupingSource.
		|    public class GroupRow : IEnumerable
		|    {
		|        // Список владельцев, который создал эту группу.
		|        public readonly GroupList Owner;
		|
		|        internal GroupRow(GroupList Owner)
		|        {
		|            this.Owner = Owner;
		|        }
		|
		|        // Индекс, который эта группа имеет в качестве объекта строки в ОБЩЕЙ коллекции.
		|        public int Index { get; internal set; }
		|
		|        // Коллекция-индекс последней строки в этой группе.
		|        public int LastIndex
		|        {
		|            get
		|            {
		|                if (collapsed)
		|                {
		|                    return Index;
		|                }
		|                return Index + Rows.Count;
		|            }
		|        }
		|
		|        // Индекс самой группы в коллекции групп.
		|        public int GroupIndex { get; internal set; }
		|
		|        internal object value;
		|
		|        // Ключевое значение, на котором основана эта группа.
		|        public object Value
		|        {
		|            get { return value; }
		|        }
		|
		|        // Количество строк внутри этой группы.
		|        public int Count
		|        {
		|            get { return Rows.Count; }
		|        }
		|
		|        bool collapsed;
		|
		|        // Возвращает или задает, должна ли группа отображаться свернутой (только для группы) или полностью.
		|        public bool Collapsed
		|        {
		|            get { return collapsed; }
		|            set { SetCollapsed(value, true); }
		|        }
		|
		|        internal void SetCollapsed(bool collapse, bool Perform)
		|        {
		|            if (collapsed == collapse)
		|            {
		|                return;
		|            }
		|            if (collapse && !AllowCollapse)
		|            {
		|                return;
		|            }
		|            collapsed = collapse;
		|
		|            if (Perform)
		|            {
		|                int index = Index + 1;
		|                if (collapse)
		|                {
		|                    Owner.Rows.RemoveRange(index, Rows.Count);
		|                }
		|                else
		|                {
		|                    Owner.Rows.InsertRange(index, Rows);
		|                }
		|                Owner.ReIndex(Owner.IndexOf(this));
		|                try
		|                {
		|                    if (Rows.Count > 1)
		|                    {
		|                        Owner.Source.FireBaseReset(true);
		|                    }
		|                    else
		|                    {
		|                        Owner.Source.FireBaseChanged(collapsed ? ListChangedType.ItemDeleted : ListChangedType.ItemAdded, index, true);
		|                    }
		|                }
		|                catch { }
		|            }
		|        }
		|
		|        protected virtual bool AllowCollapse
		|        {
		|            get { return true; }
		|        }
		|
		|        internal List<object> Rows = new List<object>();
		|        internal int HashCode;
		|
		|        // Возвращает строку с указанным индексом внутри этой группы. Индекс равен 0, основанному внутри этой группы, а не индексу коллекции, на которой он основан.
		|        public object this[int Index]
		|        {
		|            get { return Rows[Index]; }
		|        }
		|
		|        public object FirstRow
		|        {
		|            get
		|            {
		|                if (Rows.Count == 0)
		|                {
		|                    return null;
		|                }
		|                return Rows[0];
		|            }
		|        }
		|
		|        public GroupDisplayEventArgs GetDisplayInfo(bool selected)
		|        {
		|            GroupDisplayEventArgs e = new GroupDisplayEventArgs(this, Owner.Source.GroupOn);
		|            e.Selected = selected;
		|            SetDisplayInfo(e);
		|            if (e.Cancel)
		|            {
		|                return null;
		|            }
		|            Owner.Source.FireDisplayGroup(e);
		|            return e;
		|        }
		|
		|        protected virtual void SetDisplayInfo(GroupDisplayEventArgs e)
		|        {
		|            var grid = Owner.Source.Grid;
		|            if (grid != null)
		|            {
		|                e.BackColor = e.Selected ? grid.DefaultCellStyle.SelectionBackColor : grid.DefaultCellStyle.BackColor;
		|                e.ForeColor = e.Selected ? grid.DefaultCellStyle.SelectionForeColor : grid.DefaultCellStyle.ForeColor;
		|            }
		|
		|            var o = Owner.Source.Options;
		|            if (o.ShowCount)
		|            {
		|                e.Summary = ""("" + Count + "")"";
		|            }
		|            if (o.ShowGroupName)
		|            {
		|                e.Header = e.GroupingInfo.ToString();
		|            }
		|            e.GroupingInfo.SetDisplayValues(e);
		|        }
		|
		|        public virtual void Remove(object rec)
		|        {
		|            if (!Rows.Remove(rec))
		|            {
		|                return;
		|            }
		|            bool delete = Count == 0 && AllowRemove;
		|            int i = Owner.List.IndexOf(this);
		|            if (delete)
		|            {
		|                Owner.Rows.RemoveAt(Index);
		|                Owner.List.RemoveAt(i);
		|            }
		|            Owner.ReIndex(i);
		|            Owner.Source.FireBaseChanged(delete ? ListChangedType.ItemDeleted : ListChangedType.ItemChanged, Index, true);
		|        }
		|
		|        public virtual int Add(object rec)
		|        {
		|            int i = Owner.Rows.Add(rec);
		|            Owner.Source.FireBaseChanged(ListChangedType.ItemAdded, i, false);
		|            Rows.Add(rec);
		|            Owner.Source.FireBaseChanged(ListChangedType.ItemChanged, Index, false);
		|            return i;
		|        }
		|
		|        protected virtual bool AllowRemove
		|        {
		|            get { return true; }
		|        }
		|
		|        IEnumerator IEnumerable.GetEnumerator()
		|        {
		|            return Rows.GetEnumerator();
		|        }
		|    }
		|
		|    #endregion
		|
		|    #region файл SearchBox.cs
		|
		|    public abstract partial class SearchBoxBase : UserControl, ISupportInitialize
		|    {
		|        private System.ComponentModel.IContainer components = null;
		|        private System.Windows.Forms.TextBox txt;
		|        private System.Windows.Forms.Button btnNext;
		|        protected System.Windows.Forms.ContextMenuStrip menu;
		|        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
		|        private System.Windows.Forms.ToolStripMenuItem tsClear;
		|        private System.Windows.Forms.ToolStripMenuItem tsInner;
		|        private System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
		|
		|        public SearchBoxBase()
		|        {
		|            searchmatcher = new StringSearchMatcher(GetDefaultMode());
		|
		|            components = new System.ComponentModel.Container();
		|            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SearchBoxBase));
		|            txt = new System.Windows.Forms.TextBox();
		|            btnNext = new System.Windows.Forms.Button();
		|            menu = new System.Windows.Forms.ContextMenuStrip(this.components);
		|            toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
		|            tsInner = new System.Windows.Forms.ToolStripMenuItem();
		|            toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
		|            tsClear = new System.Windows.Forms.ToolStripMenuItem();
		|            menu.SuspendLayout();
		|            SuspendLayout();
		|
		|            txt.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
		|            txt.Dock = System.Windows.Forms.DockStyle.Fill;
		|            txt.Location = new System.Drawing.Point(0, 0);
		|            txt.Margin = new System.Windows.Forms.Padding(4);
		|            txt.Name = ""txt"";
		|            txt.Size = new System.Drawing.Size(204, 22);
		|            txt.TabIndex = 0;
		|            txt.TextChanged += new System.EventHandler(this.txt_TextChanged);
		|
		|            btnNext.Dock = System.Windows.Forms.DockStyle.Right;
		|            string str_btnNext = ""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAlwSFlzAAAK9wAACvcBEOiS5wAAAS5JREFUOE9j+P//P0UYqyApGKsgDM/ZMuH/sgMzPLDJwTBWQRievKrzf8v06v8zN/SmYJMHYayCMNyzsOn/jodL8RqCwlm0Z+p/kLNBNoM0t8yo+b/76Yr/04434DQEhQPSfPLjlv9H3q37v//Vqv87nyz5v+3B4v89B8v+N2zKhRiysTcZWQ+KASCbj73f+H/to8n/F9/o/j/jbCNE89ac/yWrkv6nTAr7n16WAFSKwwCQs/e9XPm/bXPx/9pVWf9LFiT9z5oeBdbsV+78X0ZJ+r+po0kQsh4UA0B+VtZW+q9jpv3f1MH4v42n1f+E3kC4ZjMnU19k9SCMwkHH9ZMq8GoGYQwBZAwyAKRZVVcFq2YQxioIwyADgN4xxiYHw1gFScFYBUnBWAWJx/8ZAKWH1qCc8THzAAAAAElFTkSuQmCC"";
		|            byte[] imageBytes = Convert.FromBase64String(str_btnNext);
		|            var ms = new System.IO.MemoryStream(imageBytes, 0, imageBytes.Length);
		|            System.Drawing.Image image = System.Drawing.Image.FromStream(ms, true);
		|            btnNext.Image = image;
		|            btnNext.Location = new System.Drawing.Point(204, 0);
		|            btnNext.Margin = new System.Windows.Forms.Padding(4);
		|            btnNext.Name = ""btnNext"";
		|            btnNext.Size = new System.Drawing.Size(27, 26);
		|            btnNext.TabIndex = 0;
		|            btnNext.UseVisualStyleBackColor = true;
		|            btnNext.Click += new System.EventHandler(this.btnNext_Click);
		|
		|            menu.ImageScalingSize = new System.Drawing.Size(20, 20);
		|            menu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
		|            toolStripSeparator1,
		|            tsInner,
		|            toolStripSeparator2,
		|            tsClear});
		|            menu.Name = ""menu"";
		|            menu.Size = new System.Drawing.Size(284, 60);
		|            menu.Opening += new System.ComponentModel.CancelEventHandler(this.menu_Opening);
		|
		|            toolStripSeparator1.Name = ""toolStripSeparator1"";
		|            toolStripSeparator1.Size = new System.Drawing.Size(280, 6);
		|
		|            tsInner.Name = ""tsInner"";
		|            tsInner.Size = new System.Drawing.Size(283, 22);
		|            tsInner.Text = ""Поиск по внутреннему тексту"";
		|            tsInner.ToolTipText = ""Если флажок установлен, поиск выполняется по всему тексту, в противном случае тол"" +
		|                ""ько по значениям, начинающимся с выполняется поиск поисковых значений"";
		|            tsInner.Click += new System.EventHandler(this.tsInner_Click);
		|
		|            toolStripSeparator2.Name = ""toolStripSeparator2"";
		|            toolStripSeparator2.Size = new System.Drawing.Size(280, 6);
		|
		|            tsClear.Name = ""tsClear"";
		|            tsClear.Size = new System.Drawing.Size(283, 22);
		|            tsClear.Text = ""Очистить"";
		|            tsClear.Click += new System.EventHandler(this.tsClear_Click);
		|
		|            AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
		|            AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
		|            ContextMenuStrip = this.menu;
		|            Controls.Add(this.txt);
		|            Controls.Add(this.btnNext);
		|            Margin = new System.Windows.Forms.Padding(4);
		|            Name = ""SearchBoxBase"";
		|            Size = new System.Drawing.Size(231, 26);
		|            menu.ResumeLayout(false);
		|            ResumeLayout(false);
		|            PerformLayout();
		|        }
		|
		|        StringSearchMatcher searchmatcher;
		|
		|        protected virtual SearchBoxMode GetDefaultMode()
		|        {
		|            return SearchBoxMode.Lookup_Wildcards;
		|        }
		|
		|        public SearchBoxMode Mode
		|        {
		|            get { return searchmatcher.Mode; }
		|            set
		|            {
		|                if (Mode == value)
		|                {
		|                    return;
		|                }
		|                searchmatcher.Mode = value;
		|                btnNext.Visible = value != SearchBoxMode.Filter;
		|                NotifyStateChanged(true);
		|            }
		|        }
		|
		|        bool ShouldSerializeMode()
		|        {
		|            return Mode != GetDefaultMode();
		|        }
		|
		|        public void ResetMode()
		|        {
		|            Mode = GetDefaultMode();
		|        }
		|
		|        public Func<string, bool> SearchDelegate
		|        {
		|            get { return searchmatcher.SearchDelegate; }
		|        }
		|
		|        bool alwayswildcard = false;
		|
		|        [DefaultValue(false)]
		|        public bool AlwaysSearchInnerText
		|        {
		|            get { return alwayswildcard; }
		|            set
		|            {
		|                if (alwayswildcard == value)
		|                {
		|                    return;
		|                }
		|                alwayswildcard = value;
		|                searchmatcher.AlwaysSearchInnerText = value;
		|                NotifyStateChanged(false);
		|            }
		|        }
		|
		|        protected void NotifyStateChanged(bool resettext)
		|        {
		|            if (IsBusy || disposed)
		|            {
		|                return;
		|            }
		|            ResetStartPosition(null);
		|            NullResult = false;
		|            checkvalid();
		|
		|            if (txt.TextLength > 0)
		|            {
		|                if (resettext)
		|                {
		|                    txt.Clear();
		|                }
		|                else
		|                {
		|                    check();
		|                }
		|            }
		|        }
		|
		|        // Очистите все используемые ресурсы.
		|        protected override sealed void Dispose(bool disposing)
		|        {
		|            if (disposing && (components != null))
		|            {
		|                components.Dispose();
		|            }
		|            base.Dispose(disposing);
		|            while (registeredcontrols.Count > 0)
		|            {
		|                UnRegisterControl(registeredcontrols[0]);
		|            }
		|            disposed = true;
		|            OnDisposed();
		|        }
		|
		|        bool disposed;
		|
		|        protected virtual void OnDisposed()
		|        {
		|        }
		|
		|        int initializing;
		|
		|        public bool IsInitializing
		|        {
		|            get { return initializing > 0; }
		|        }
		|
		|        public void BeginInit()
		|        {
		|            initializing++;
		|        }
		|
		|        public void EndInit()
		|        {
		|            if (--initializing == 0)
		|            {
		|                OnEndInit();
		|            }
		|        }
		|
		|        protected virtual void OnEndInit()
		|        {
		|            NotifyStateChanged(false);
		|        }
		|
		|        void checkvalid()
		|        {
		|            isvalid = CheckIsReady();
		|            if (isvalid && !Supports(Mode))
		|            {
		|                isvalid = false;
		|                OnInvalidModeSelected();
		|            }
		|            txt.Enabled = isvalid;
		|        }
		|
		|        bool isvalid;
		|        public bool IsValid
		|        {
		|            get { return isvalid; }
		|        }
		|
		|        protected virtual void OnInvalidModeSelected()
		|        {
		|            var ex = new Exception(""Source does not support "" + Mode);
		|            if (DesignMode)
		|            {
		|                throw ex;
		|            }
		|            ShowException(ex);
		|        }
		|
		|        protected virtual bool CheckIsReady()
		|        {
		|            return initializing == 0;
		|        }
		|
		|        protected virtual bool Supports(SearchBoxMode Mode)
		|        {
		|            return true;
		|        }
		|
		|        Label lbl;
		|
		|        [DefaultValue(false)]
		|        [Category(""Label"")]
		|        public bool ShowLabel
		|        {
		|            get { return lbl != null; }
		|            set
		|            {
		|                if (ShowLabel == value)
		|                {
		|                    return;
		|                }
		|                if (value)
		|                {
		|                    lbl = new Label();
		|                    setlabeltext();
		|                    lbl.Dock = DockStyle.Left;
		|                    lbl.AutoSize = true;
		|                    Controls.Add(lbl);
		|                }
		|                else
		|                {
		|                    lbl.Dispose();
		|                    lbl = null;
		|                }
		|            }
		|        }
		|
		|        void setlabeltext()
		|        {
		|            if (labeltext == null)
		|            {
		|                var val = ""Search"";
		|                GetText(val, ref val);
		|                lbl.Text = val;
		|            }
		|            else
		|            {
		|                lbl.Text = labeltext;
		|            }
		|        }
		|
		|        partial void GetText(string keyword, ref string Value);
		|
		|        string labeltext = null;
		|
		|        [Category(""Label"")]
		|        [DefaultValue(null)]
		|        public string CustomLabelText
		|        {
		|            get { return labeltext; }
		|            set
		|            {
		|                labeltext = value;
		|                if (lbl == null)
		|                {
		|                    if (DesignMode)
		|                    {
		|                        ShowLabel = true;
		|                    }
		|                }
		|                else
		|                {
		|                    setlabeltext();
		|                }
		|            }
		|        }
		|
		|        protected bool HandleKey(KeyEventArgs k)
		|        {
		|            return HandleKey(k.KeyCode, k.Modifiers);
		|        }
		|
		|        protected bool HandleKey(Keys key, Keys mod)
		|        {
		|            if (key == Keys.Back)
		|            {
		|                if (mod == Keys.Control)
		|                {
		|                    Text = null;
		|                }
		|                else if (Text.Length > 0)
		|                {
		|                    Text = Text.Substring(0, Text.Length - 1);
		|                }
		|            }
		|            else if (key == Keys.Escape)
		|            {
		|                Text = null;
		|            }
		|            else
		|            {
		|                return false;
		|            }
		|            return true;
		|        }
		|
		|        protected bool HandleKey(KeyPressEventArgs e)
		|        {
		|            var c = e.KeyChar;
		|            if (c < 32 || c > 127)
		|            {
		|                return false;
		|            }
		|            Text += c.ToString();
		|            return true;
		|        }
		|
		|        void c_KeyPress(object sender, KeyPressEventArgs e)
		|        {
		|            if (HandleRegisteredKeyDowns)
		|            {
		|                e.Handled = HandleKey(e);
		|            }
		|        }
		|
		|        void c_KeyDown(object sender, KeyEventArgs e)
		|        {
		|            if (HandleRegisteredKeyDowns)
		|            {
		|                e.Handled = HandleKey(e);
		|            }
		|        }
		|
		|        protected bool HandleRegisteredKeyDowns = true;
		|
		|        List<Control> registeredcontrols = new List<Control>();
		|
		|        protected void RegisterControl(Control c)
		|        {
		|            if (registeredcontrols.Contains(c))
		|            {
		|                return;
		|            }
		|            registeredcontrols.Add(c);
		|            c.KeyDown += new KeyEventHandler(c_KeyDown);
		|            c.KeyPress += new KeyPressEventHandler(c_KeyPress);
		|        }
		|
		|        protected void UnRegisterControl(Control c)
		|        {
		|            if (registeredcontrols.Remove(c))
		|            {
		|                c.KeyDown -= new KeyEventHandler(c_KeyDown);
		|                c.KeyPress -= new KeyPressEventHandler(c_KeyPress);
		|            }
		|        }
		|
		|        private void txt_TextChanged(object sender, EventArgs e)
		|        {
		|            searchmatcher.SearchText = Text;
		|            check();
		|            OnTextChanged(e);
		|        }
		|
		|        private void btnNext_Click(object sender, EventArgs e)
		|        {
		|            SearchNext();
		|        }
		|
		|        private void btnClear_Click(object sender, EventArgs e)
		|        {
		|            Text = null;
		|        }
		|
		|        [DefaultValue(null)]
		|        public override string Text
		|        {
		|            get { return txt.Text; }
		|            set { txt.Text = value; }
		|        }
		|
		|        public int TextLength
		|        {
		|            get { return searchmatcher.TextLength; }
		|        }
		|
		|        int prevlen;
		|
		|        void check()
		|        {
		|            setvisible();
		|            if (!isvalid)
		|            {
		|                return;
		|            }
		|            if (txt.TextLength < prevlen)
		|            {
		|                ResetStartPosition(null);
		|            }
		|            prevlen = txt.TextLength;
		|
		|            if (Mode == SearchBoxMode.Filter)
		|            {
		|                Filter();
		|            }
		|            else
		|            {
		|                Search();
		|            }
		|
		|            btnNext.Enabled = prevlen > 0 && !nullresult;
		|        }
		|
		|        void setvisible()
		|        {
		|            if (autohide)
		|            {
		|                Visible = txt.TextLength > 0;
		|            }
		|        }
		|
		|        private bool autohide;
		|
		|        [DefaultValue(false)]
		|        public bool AutoHide
		|        {
		|            get { return autohide; }
		|            set
		|            {
		|                if (autohide == value)
		|                {
		|                    return;
		|                }
		|                autohide = value;
		|                setvisible();
		|            }
		|        }
		|
		|        protected abstract void ResetStartPosition(object storedpos);
		|        protected abstract bool IncreasePosition();
		|        protected abstract void SetFoundPosition();
		|        bool nullresult;
		|
		|        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public bool NullResult
		|        {
		|            get { return nullresult; }
		|            private set
		|            {
		|                if (nullresult == value)
		|                {
		|                    return;
		|                }
		|                nullresult = value;
		|                txt.BackColor = value ? notfoundcol : Color.Empty;
		|            }
		|        }
		|
		|        Color notfoundcol = Color.Red;
		|
		|        public Color NotFoundColor
		|        {
		|            get { return notfoundcol; }
		|            set { notfoundcol = value; }
		|        }
		|
		|        bool ShouldSerializeNotFoundColor()
		|        {
		|            return notfoundcol != Color.Red;
		|        }
		|
		|        bool searching;
		|
		|        public bool Search()
		|        {
		|            var res = search();
		|            NullResult = txt.TextLength > 0 && !res;
		|            return res;
		|        }
		|
		|        public bool IsSearching
		|        {
		|            get { return searching; }
		|        }
		|
		|        public bool IsFiltering
		|        {
		|            get { return filtering; }
		|        }
		|
		|        // Указывает, выполняется ли фильтрация или поиск.
		|        public bool IsBusy
		|        {
		|            get { return searching || filtering || initializing > 0; }
		|        }
		|
		|        public bool SearchNext()
		|        {
		|            IncreasePosition();
		|            return Search();
		|        }
		|
		|        bool search()
		|        {
		|            searching = true;
		|            try
		|            {
		|                return txt.TextLength > 0 && search(searchmatcher);
		|            }
		|            catch (Exception ex)
		|            {
		|                ShowException(ex);
		|            }
		|            finally
		|            {
		|                searching = false;
		|            }
		|            return false;
		|        }
		|
		|        protected abstract object GetPosition();
		|        protected abstract object GetCurrent();
		|
		|        protected virtual bool search(StringSearchMatcher search)
		|        {
		|            object pos = GetPosition();
		|            for (;;)
		|            {
		|                var val = GetCurrent();
		|                if (val != null && search.Matches(val.ToString()))
		|                {
		|                    SetFoundPosition();
		|                    return true;
		|                }
		|                if (!IncreasePosition())
		|                {
		|                    break;
		|                }
		|            }
		|            ResetStartPosition(pos);
		|            return false;
		|        }
		|
		|        bool filtering;
		|
		|        public void Filter()
		|        {
		|            filtering = true;
		|            try
		|            {
		|                filter(searchmatcher);
		|            }
		|            catch (Exception ex)
		|            {
		|                ShowException(ex);
		|            }
		|            finally
		|            {
		|                filtering = false;
		|            }
		|        }
		|
		|        protected virtual void ShowException(Exception ex)
		|        {
		|            if (Disposing)
		|            {
		|                return;
		|            }
		|            //new ErrorForm(ex).Show(this);            
		|            MessageBox.Show(ex.Message); // Вызовите здесь свою собственную процедуру устранения ошибок.
		|        }
		|
		|        protected abstract void filter(StringSearchMatcher search);
		|
		|        // Базовое текстовое поле
		|        public System.Windows.Forms.TextBox TextBox
		|        {
		|            get { return txt; }
		|        }
		|
		|        ContextMenuStripButton btnOptions;
		|
		|        [DefaultValue(false)]
		|        public bool ShowOptionsButton
		|        {
		|            get { return btnOptions != null; }
		|            set
		|            {
		|                if (ShowOptionsButton == value)
		|                {
		|                    return;
		|                }
		|                if (value)
		|                {
		|                    btnOptions = new ContextMenuStripButton();
		|                    btnOptions.Dock = DockStyle.Right;
		|                    btnOptions.ContextMenuStrip = menu;
		|                    Controls.Add(btnOptions);
		|                }
		|                else
		|                {
		|                    btnOptions.Dispose();
		|                    btnOptions = null;
		|                }
		|            }
		|        }
		|
		|        ModeItem[] modeitems;
		|
		|        private void menu_Opening(object sender, CancelEventArgs e)
		|        {
		|            if (modeitems == null)
		|            {
		|                modeitems = Enum.GetValues(typeof(SearchBoxMode)).Cast<SearchBoxMode>().Select(sm => new ModeItem(this, sm)).ToArray();
		|                for (int i = 0; i < modeitems.Length; i++)
		|                {
		|                    menu.Items.Insert(i, modeitems[i]);
		|                }
		|                OnOpeningContextMenu(menu, true);
		|            }
		|            else
		|            {
		|                foreach (var m in modeitems)
		|                {
		|                    m.Check();
		|                }
		|                OnOpeningContextMenu(menu, false);
		|            }
		|            tsInner.Checked = alwayswildcard;
		|            tsClear.Enabled = txt.TextLength > 0;
		|        }
		|
		|        protected virtual void OnOpeningContextMenu(ContextMenuStrip menu, bool FirstTime)
		|        {
		|        }
		|
		|        void tsClear_Click(object sender, System.EventArgs e)
		|        {
		|            txt.Clear();
		|        }
		|
		|        void tsInner_Click(object sender, System.EventArgs e)
		|        {
		|            AlwaysSearchInnerText = !alwayswildcard;
		|        }
		|
		|        protected class SearchBoxItem : ToolStripMenuItem
		|        {
		|            public readonly SearchBoxBase SearchBox;
		|
		|            public SearchBoxItem(SearchBoxBase sb)
		|            {
		|                SearchBox = sb;
		|            }
		|        }
		|
		|        protected class ModeItem : SearchBoxItem
		|        {
		|            public readonly SearchBoxMode Mode;
		|
		|            public ModeItem(SearchBoxBase sb, SearchBoxMode mode) : base(sb)
		|            {
		|                Mode = mode;
		|                Text = Mode.ToString();
		|                Check();
		|            }
		|
		|            public void Check()
		|            {
		|                Checked = SearchBox.Mode == Mode;
		|            }
		|
		|            protected override void OnClick(EventArgs e)
		|            {
		|                SearchBox.Mode = Mode;
		|            }
		|        }
		|    }
		|
		|    public abstract class SourceSearchBox : SearchBoxBase
		|    {
		|        private Column col;
		|
		|        [DefaultValue(null)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        [Editor(typeof(Editor), typeof(UITypeEditor))]
		|        public Column SearchProperty
		|        {
		|            get { return col; }
		|            set
		|            {
		|                if (col == value)
		|                {
		|                    return;
		|                }
		|                col = value;
		|                propname = value == null ? null : value.Name;
		|                pos.X = col == null ? 0 : col.Index.Value;
		|                NotifyStateChanged(true);
		|            }
		|        }
		|
		|        private string propname;
		|
		|        [DefaultValue(null)]
		|        public string PropertyName
		|        {
		|            get { return propname; }
		|            set
		|            {
		|                if (propname == value)
		|                {
		|                    return;
		|                }
		|                propname = value;
		|                if (IsInitializing)
		|                {
		|                    return;
		|                }
		|                if (needsetprops)
		|                {
		|                    setprops();
		|                }
		|                else if (value == null || Columns == null)
		|                {
		|                    NotifyStateChanged(false);
		|                }
		|                else
		|                {
		|                    SearchProperty = getcol(value, true);
		|                }
		|            }
		|        }
		|
		|        Column getcol(string name, bool Throw)
		|        {
		|            var col = props.FirstOrDefault(c => c.Name == name);
		|            if (col == null && Throw)
		|            {
		|                throw new ArgumentException(name + "" is not a valid property"");
		|            }
		|            return col;
		|        }
		|
		|        protected void SourceChanged()
		|        {
		|            needsetprops = true;
		|            NotifyStateChanged(true);
		|        }
		|
		|        protected override void OnEndInit()
		|        {
		|            base.OnEndInit();
		|            if (propname != null)
		|            {
		|                PropertyName = propname;
		|            }
		|        }
		|
		|        protected override bool search(StringSearchMatcher search)
		|        {
		|            if (needsetprops)
		|            {
		|                setprops();
		|            }
		|            return base.search(search);
		|        }
		|
		|        Column[] props;
		|        public Column[] Columns
		|        {
		|            get
		|            {
		|                if (needsetprops)
		|                {
		|                    if (IsInitializing)
		|                    {
		|                        return null;
		|                    }
		|                    setprops();
		|                }
		|                return props;
		|            }
		|        }
		|
		|        protected void ResetColumns()
		|        {
		|            needsetprops = true;
		|        }
		|
		|        void setprops()
		|        {
		|            needsetprops = false;
		|            var cols = GetColumns();
		|            if (cols == null)
		|            {
		|                props = null;
		|            }
		|            else
		|            {
		|                props = GetColumns().ToArray();
		|                if (props.Length == 0)
		|                {
		|                    props = null;
		|                }
		|                else
		|                {
		|                    for (int i = 0; i < props.Length; i++)
		|                    {
		|                        if (props[i].Index == null)
		|                        {
		|                            props[i].Index = i;
		|                        }
		|                    }
		|                }
		|                if (propname != null)
		|                {
		|                    col = getcol(propname, false);
		|                    if (col == null)
		|                    {
		|                        propname = null;
		|                        pos.X = 0;
		|                    }
		|                }
		|            }
		|        }
		|
		|        protected abstract IEnumerable<Column> GetColumns();
		|
		|        public class Column
		|        {
		|            public readonly string Name;
		|            public readonly Func<int, object> GetValue;
		|            public int? Index;
		|
		|            public Column(string Name, Func<int, object> GetValue)
		|            {
		|                this.Name = Name;
		|                this.GetValue = GetValue;
		|            }
		|
		|            private string header;
		|
		|            public string Header
		|            {
		|                get
		|                {
		|                    if (header == null)
		|                    {
		|                        return Name;
		|                    }
		|                    return header;
		|                }
		|                set { header = value; }
		|            }
		|
		|            public override string ToString()
		|            {
		|                return Header;
		|            }
		|        }
		|
		|        bool needsetprops = true;
		|
		|        class Editor : UITypeEditor
		|        {
		|            public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
		|            {
		|                return UITypeEditorEditStyle.DropDown;
		|            }
		|
		|            public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
		|            {
		|                var b = (SourceSearchBox)context.Instance;
		|                if (b != null && b.Columns != null)
		|                {
		|                    var lb = new ListBox();
		|                    foreach (var pd in b.props)
		|                    {
		|                        int i = lb.Items.Add(pd);
		|                        if (b.col == pd || pd.Name == b.propname)
		|                        {
		|                            lb.SelectedIndex = i;
		|                        }
		|                    }
		|                    var iw = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));
		|                    lb.Click += delegate
		|                    {
		|                        b.PropertyName = (string)lb.SelectedItem;
		|                        iw.CloseDropDown();
		|                    };
		|                    iw.DropDownControl(lb);
		|                }
		|                return base.EditValue(context, provider, value);
		|            }
		|        }
		|
		|        Point pos;
		|        int curcol;
		|
		|        protected override sealed void ResetStartPosition(object stored)
		|        {
		|            if (stored == null)
		|            {
		|                pos = Point.Empty;
		|                if (col != null)
		|                {
		|                    pos.X = col.Index.Value;
		|                }
		|            }
		|            else
		|            {
		|                pos = (Point)stored;
		|            }
		|            if (Columns != null && col != null)
		|            {
		|                curcol = Array.IndexOf(props, col);
		|            }
		|            else
		|            {
		|                curcol = 0;
		|            }
		|        }
		|
		|        // Последняя позиция поиска.
		|        public Point Position
		|        {
		|            get { return pos; }
		|            set { pos = value; }
		|        }
		|
		|        protected sealed override void SetFoundPosition()
		|        {
		|            try
		|            {
		|                SetPosition(pos.X, pos.Y);
		|            }
		|            catch (Exception ex)
		|            {
		|                ShowException(ex);
		|            }
		|        }
		|
		|        protected abstract void SetPosition(int col, int row);
		|
		|        protected override object GetCurrent()
		|        {
		|            return props[curcol].GetValue(pos.Y);
		|        }
		|
		|        protected abstract int RecordCount
		|        {
		|            get;
		|        }
		|
		|        protected override bool IncreasePosition()
		|        {
		|            if (col == null)
		|            {
		|                if (++curcol < props.Length)
		|                {
		|                    pos.X = props[curcol].Index.Value;
		|                    return true;
		|                }
		|                curcol = 0;
		|                pos.X = props[0].Index.Value;
		|            }
		|            return ++pos.Y < RecordCount;
		|        }
		|
		|        protected override object GetPosition()
		|        {
		|            return pos;
		|        }
		|
		|        protected override bool Supports(SearchBoxMode Mode)
		|        {
		|            switch (Mode)
		|            {
		|                case SearchBoxMode.Filter:
		|                    return CanFilter;
		|                case SearchBoxMode.Lookup:
		|                    //isvalid &= source.SupportsSearching;
		|                    break;
		|            }
		|            //DataGridView dg;
		|            return true;
		|        }
		|
		|        protected abstract bool CanFilter { get; }
		|
		|        protected override bool CheckIsReady()
		|        {
		|            if (Columns == null)
		|            {
		|                return false;
		|            }
		|            if (col == null)
		|            {
		|                return Mode != SearchBoxMode.Filter;
		|            }
		|            return true;
		|        }
		|
		|        protected abstract Point GetCurrentPosition();
		|
		|        protected void filter(IBindingListView source, StringSearchMatcher search)
		|        {
		|            if (propname == null || search.TextLength == 0)
		|            {
		|                source.RemoveFilter();
		|                if (propname == null)
		|                {
		|                    TextBox.Clear();
		|                }
		|            }
		|            else
		|            {
		|                source.Filter = propname + "" like "" + (AlwaysSearchInnerText ? ""*"" : null) + Text + ""*"";
		|            }
		|
		|            var p = GetCurrentPosition();
		|            if (p.X != pos.X && pos.X != -1 && RecordCount > 0 && p.Y != -1)
		|            {
		|                SetPosition(pos.X, p.Y);
		|            }
		|        }
		|
		|        protected void NotifyPositionChanged()
		|        {
		|            if (IsBusy || Mode == SearchBoxMode.Filter)
		|            {
		|                return;
		|            }
		|            ResetStartPosition(null);
		|            Text = null;
		|        }
		|    }
		|
		|    public class BindingSourceSearchBox : SourceSearchBox
		|    {
		|        protected override void SetPosition(int col, int row)
		|        {
		|            source.Position = row;
		|        }
		|
		|        protected override Point GetCurrentPosition()
		|        {
		|            if (source == null)
		|            {
		|                return Point.Empty;
		|            }
		|            return new Point(0, source.Position);
		|        }
		|
		|        protected override int RecordCount
		|        {
		|            get { return source.Count; }
		|        }
		|
		|        protected override bool CanFilter
		|        {
		|            get
		|            {
		|                var l = source.List as IBindingListView;
		|                return l != null && l.SupportsFiltering;
		|            }
		|        }
		|
		|        protected override void filter(StringSearchMatcher search)
		|        {
		|            filter(source.List as IBindingListView, search);
		|        }
		|
		|        protected override void OnDisposed()
		|        {
		|            BindingSource = null;
		|        }
		|
		|        private CurrencyManager source;
		|
		|        [DefaultValue(null)]
		|        public CurrencyManager BindingSource
		|        {
		|            get { return source; }
		|            set
		|            {
		|                if (source == value)
		|                {
		|                    return;
		|                }
		|                if (source != null)
		|                {
		|                    source.PositionChanged -= source_PositionChanged;
		|                    source.ListChanged -= new ListChangedEventHandler(source_ListChanged);
		|                }
		|                source = value;
		|                if (source != null)
		|                {
		|                    source.PositionChanged += source_PositionChanged;
		|                    source.ListChanged += new ListChangedEventHandler(source_ListChanged);
		|                }
		|                SourceChanged();
		|            }
		|        }
		|
		|        void source_ListChanged(object sender, ListChangedEventArgs e)
		|        {
		|            switch (e.ListChangedType)
		|            {
		|                case ListChangedType.PropertyDescriptorAdded:
		|                case ListChangedType.PropertyDescriptorChanged:
		|                case ListChangedType.PropertyDescriptorDeleted:
		|                    SourceChanged();
		|                    break;
		|            }
		|        }
		|
		|        protected override IEnumerable<Column> GetColumns()
		|        {
		|            if (source == null || source.List == null)
		|            {
		|                return null;
		|            }
		|            return source.GetItemProperties().Cast<PropertyDescriptor>().Select(pd => new Column(pd.Name, i => pd.GetValue(source.List[i])) { Header = pd.DisplayName });
		|        }
		|
		|        void source_PositionChanged(object sender, EventArgs e)
		|        {
		|            NotifyPositionChanged();
		|        }
		|    }
		|
		|    public class DataGridSearchBox : SourceSearchBox
		|    {
		|        DataGridView grid;
		|
		|        [DefaultValue(null)]
		|        [Description(""Таблица (DataGridView), связанная с этим полем поиска. Когда таблица доступна только для чтения, также обрабатываются нажатия клавиш самой таблицы"")]
		|        public DataGridView DataGridView
		|        {
		|            get { return grid; }
		|            set
		|            {
		|                if (grid == value)
		|                {
		|                    return;
		|                }
		|                if (grid != null)
		|                {
		|                    grid.DataSourceChanged -= grid_DataSourceChanged;
		|                    grid.CurrentCellChanged -= grid_CurrentCellChanged;
		|                    grid.ColumnAdded -= grid_ColumnsChanged;
		|                    grid.ColumnRemoved -= grid_ColumnsChanged;
		|                    grid.ColumnStateChanged -= grid_ColumnStateChanged;
		|                    UnRegisterControl(grid);
		|                }
		|                grid = value;
		|                if (grid != null)
		|                {
		|                    grid.DataSourceChanged += grid_DataSourceChanged;
		|                    grid.CurrentCellChanged += grid_CurrentCellChanged;
		|                    grid.ColumnAdded += grid_ColumnsChanged;
		|                    grid.ColumnRemoved += grid_ColumnsChanged;
		|                    grid.ColumnStateChanged += grid_ColumnStateChanged;
		|                    RegisterControl(grid);
		|                }
		|                SourceChanged();
		|            }
		|        }
		|
		|        protected override bool CheckIsReady()
		|        {
		|            if (grid == null)
		|            {
		|                return false;
		|            }
		|            if (grid.Columns.Count == 0)
		|            {
		|                return false;
		|            }
		|            if (SearchProperty == null)
		|            {
		|                if (SearchModeColumn != ColumnSearchMode.AllColumns && Mode != SearchBoxMode.Filter)
		|                {
		|                    return false;
		|                }
		|            }
		|            return true;
		|        }
		|
		|        void grid_ColumnStateChanged(object sender, DataGridViewColumnStateChangedEventArgs e)
		|        {
		|            if (e.StateChanged == DataGridViewElementStates.Visible)
		|            {
		|                ResetColumns();
		|            }
		|        }
		|
		|        void grid_ColumnsChanged(object sender, DataGridViewColumnEventArgs e)
		|        {
		|            ResetColumns();
		|            if (!IsValid)
		|            {
		|                NotifyStateChanged(true);
		|            }
		|        }
		|
		|        protected override int RecordCount
		|        {
		|            get
		|            {
		|                if (grid == null)
		|                {
		|                    return 0;
		|                }
		|                return grid.Rows.Count;
		|            }
		|        }
		|
		|        protected override Point GetCurrentPosition()
		|        {
		|            if (grid == null)
		|            {
		|                return Point.Empty;
		|            }
		|            return grid.CurrentCellAddress;
		|        }
		|
		|        protected override void SetPosition(int col, int row)
		|        {
		|            grid.CurrentCell = grid[col, row];
		|        }
		|
		|        protected override void OnDisposed()
		|        {
		|            DataGridView = null;
		|        }
		|
		|        protected override IEnumerable<Column> GetColumns()
		|        {
		|            if (grid == null)
		|            {
		|                return null;
		|            }
		|            return from c in grid.Columns.Cast<DataGridViewColumn>()
		|                   where c.Visible
		|                   orderby c.DisplayIndex
		|                   select new Column(c.DataPropertyName, i => grid[c.Index, i].Value)
		|                   {
		|                       Header = c.HeaderText,
		|                       Index = c.Index
		|                   };
		|        }
		|
		|        void grid_DataSourceChanged(object sender, EventArgs e)
		|        {
		|            SourceChanged();
		|        }
		|
		|
		|        void grid_CurrentCellChanged(object sender, EventArgs e)
		|        {
		|            if (IsBusy)
		|            {
		|                return;
		|            }
		|            setcurrentprop();
		|        }
		|
		|        IBindingListView BindingListView
		|        {
		|            get
		|            {
		|                if (grid == null)
		|                {
		|                    return null;
		|                }
		|                return grid.DataSource as IBindingListView;
		|            }
		|        }
		|
		|        protected override bool CanFilter
		|        {
		|            get { return BindingListView != null && BindingListView.SupportsFiltering; }
		|        }
		|
		|        protected override void filter(StringSearchMatcher search)
		|        {
		|            filter(BindingListView, search);
		|        }
		|
		|        private ColumnSearchMode colsearchmode = ColumnSearchMode.ActiveColumn;
		|
		|        [DefaultValue(ColumnSearchMode.ActiveColumn)]
		|        public ColumnSearchMode SearchModeColumn
		|        {
		|            get { return colsearchmode; }
		|            set
		|            {
		|                if (colsearchmode == value)
		|                {
		|                    return;
		|                }
		|                colsearchmode = value;
		|                setcurrentprop();
		|                NotifyStateChanged(false);
		|            }
		|        }
		|
		|        DataGridViewCell lastcell;
		|        void setcurrentprop()
		|        {
		|            if (IsBusy)
		|            {
		|                return;
		|            }
		|            var cell = grid.CurrentCell;
		|            if (cell == lastcell)
		|            {
		|                return;
		|            }
		|            lastcell = cell;
		|            var i = cell == null ? -1 : cell.ColumnIndex;
		|            Column prop;
		|            if (i == -1)
		|            {
		|                prop = null;
		|                HandleRegisteredKeyDowns = false;
		|            }
		|            else
		|            {
		|                var col = grid.Columns[i];
		|                prop = colsearchmode == ColumnSearchMode.ActiveColumn || Mode == SearchBoxMode.Filter ? Columns.First(c => c.Index == i) : null;
		|                HandleRegisteredKeyDowns = col.ReadOnly;
		|            }
		|            if (SearchProperty == prop)
		|            {
		|                Text = null;
		|                //NotifyStateChanged(true);
		|            }
		|            else
		|            {
		|                SearchProperty = prop;
		|            }
		|        }
		|
		|        public enum ColumnSearchMode
		|        {
		|            ActiveColumn,
		|            AllColumns
		|        }
		|
		|        protected override void OnOpeningContextMenu(ContextMenuStrip menu, bool FirstTime)
		|        {
		|            base.OnOpeningContextMenu(menu, FirstTime);
		|            if (FirstTime)
		|            {
		|                searchitems = Enum.GetValues(typeof(ColumnSearchMode)).Cast<ColumnSearchMode>().Select(g => new GridSearchModeItem(this, g)).ToArray();
		|                menu.Items.Add(new ToolStripSeparator());
		|                menu.Items.AddRange(searchitems);
		|            }
		|            else
		|            {
		|                foreach (var m in searchitems)
		|                {
		|                    m.Check();
		|                }
		|            }
		|        }
		|
		|        GridSearchModeItem[] searchitems;
		|
		|        class GridSearchModeItem : SearchBoxItem
		|        {
		|            ColumnSearchMode mode;
		|            DataGridSearchBox sb;
		|
		|            public GridSearchModeItem(DataGridSearchBox sb, ColumnSearchMode mode) : base(sb)
		|            {
		|                this.mode = mode;
		|                this.sb = sb;
		|                this.Text = mode.ToString();
		|                Check();
		|            }
		|
		|            public void Check()
		|            {
		|                Checked = mode == sb.colsearchmode;
		|                Enabled = sb.Mode != SearchBoxMode.Filter;
		|            }
		|
		|            protected override void OnClick(EventArgs e)
		|            {
		|                sb.SearchModeColumn = mode;
		|            }
		|        }
		|    }
		|
		|    public class TreeviewSearchBox : SearchBoxBase
		|    {
		|        TreeNode lastnode;
		|
		|        protected override void ResetStartPosition(object storedpos)
		|        {
		|            if (storedpos != null)
		|            {
		|                lastnode = (TreeNode)storedpos;
		|            }
		|            else if (tv == null || tv.Nodes.Count == 0)
		|            {
		|                lastnode = null;
		|            }
		|            else
		|            {
		|                lastnode = tv.Nodes[0];
		|            }
		|        }
		|
		|        protected override bool IncreasePosition()
		|        {
		|            if (lastnode == null || lastnode.TreeView == null)
		|            {
		|                if (tv.Nodes.Count == 0)
		|                {
		|                    return false;
		|                }
		|                lastnode = tv.Nodes[0];
		|                return true;
		|            }
		|            lastnode = GetNextNode(lastnode, false);
		|            return lastnode != null;
		|        }
		|
		|        protected override void SetFoundPosition()
		|        {
		|            tv.SelectedNode = lastnode;
		|        }
		|
		|        protected override object GetPosition()
		|        {
		|            return lastnode;
		|        }
		|
		|        TreeNode GetNextNode(TreeNode n, bool SkipChildren)
		|        {
		|            if (n == null)
		|            {
		|                return null;
		|            }
		|            if (!SkipChildren && n.Nodes.Count > 0)
		|            {
		|                return n.Nodes[0];
		|            }
		|
		|            if (n.NextNode != null)
		|            {
		|                return n.NextNode;
		|            }
		|            return GetNextNode(n.Parent, true);
		|        }
		|
		|        protected override bool CheckIsReady()
		|        {
		|            return base.CheckIsReady() && tv != null;
		|        }
		|
		|        protected override object GetCurrent()
		|        {
		|            if (lastnode == null)
		|            {
		|                return null;
		|            }
		|            return lastnode.Text;
		|        }
		|
		|        protected override void filter(StringSearchMatcher search)
		|        {
		|            throw new NotImplementedException();
		|        }
		|
		|        protected override bool Supports(SearchBoxMode Mode)
		|        {
		|            return base.Supports(Mode) && Mode != SearchBoxMode.Filter;
		|        }
		|
		|        private TreeView tv;
		|
		|        [DefaultValue(null)]
		|        public TreeView TreeView
		|        {
		|            get { return tv; }
		|            set
		|            {
		|                if (tv == value)
		|                {
		|                    return;
		|                }
		|                if (tv != null)
		|                {
		|                    tv.AfterSelect -= new TreeViewEventHandler(tv_AfterSelect);
		|                    UnRegisterControl(tv);
		|                }
		|                tv = value;
		|                if (tv != null)
		|                {
		|                    tv.AfterSelect += new TreeViewEventHandler(tv_AfterSelect);
		|                    RegisterControl(tv);
		|                }
		|                NotifyStateChanged(true);
		|            }
		|        }
		|
		|        protected override void OnDisposed()
		|        {
		|            TreeView = null;
		|        }
		|
		|        void tv_AfterSelect(object sender, TreeViewEventArgs e)
		|        {
		|            if (IsBusy)
		|            {
		|                return;
		|            }
		|            ResetStartPosition(null);
		|            Text = null;
		|        }
		|    }
		|
		|    /*
		|    public class TextBoxSearchBox : SearchBoxBase
		|    {
		|        private TextBoxBase tb;
		|
		|        [DefaultValue(null)]
		|        public TextBoxBase TextBox
		|        {
		|            get { return tb; }
		|            set
		|            {
		|                if (tb == value)
		|                {
		|                    return;
		|                }
		|                if (tb != null)
		|                {
		|                    tb.TextChanged -= new EventHandler(tb_TextChanged);
		|                }
		|                tb = value;
		|                if (tb != null)
		|                {
		|                    tb.TextChanged += new EventHandler(tb_TextChanged);
		|                }
		|                NotifyStateChanged(true);
		|            }
		|        }
		|
		|        void tb_TextChanged(object sender, EventArgs e)
		|        {
		|        }
		|
		|        int pos;
		|
		|        protected override void ResetStartPosition(object storedpos)
		|        {
		|            pos = 0;
		|        }
		|
		|        protected override bool IncreasePosition()
		|        {
		|            return ++pos < tb.TextLength - Text.Length;
		|        }
		|
		|        protected override bool Supports(SearchMode Mode)
		|        {
		|            return Mode != SearchMode.Filter && base.Supports(Mode);
		|        }
		|
		|        protected override bool CheckIsReady()
		|        {
		|            return tb!=null && base.CheckIsReady();
		|        }
		|
		|        protected override void SetFoundPosition()
		|        {
		|            tb.SelectionStart = pos;
		|            tb.SelectionLength = Text.Length;
		|        }
		|
		|        protected override object GetPosition()
		|        {
		|            return pos;
		|        }
		|
		|        protected override bool search(StringSearchMatcher search)
		|        {
		|        }
		|   
		|        protected override object GetCurrent()
		|        {
		|            throw new NotImplementedException();
		|        }
		|
		|        protected override void filter(StringSearchMatcher search)
		|        {
		|            throw new NotImplementedException();
		|        }
		|    }
		|    */
		|
		|    public enum SearchBoxMode
		|    {
		|        Lookup,
		|        Lookup_Wildcards,
		|        Lookup_Regex,
		|        Filter,
		|    }
		|
		|    public class StringSearchMatcher
		|    {
		|
		|        Func<string, bool> fn;
		|
		|        public StringSearchMatcher()
		|        {
		|        }
		|
		|        public StringSearchMatcher(SearchBoxMode Mode)
		|        {
		|            this.Mode = Mode;
		|        }
		|
		|        public StringSearchMatcher(SearchBoxMode Mode, string SearchValue) : this(Mode)
		|        {
		|            this.SearchText = SearchValue;
		|        }
		|
		|        private SearchBoxMode mode = SearchBoxMode.Lookup_Wildcards;
		|
		|        public SearchBoxMode Mode
		|        {
		|            get { return mode; }
		|            set
		|            {
		|                if (mode == value)
		|                {
		|                    return;
		|                }
		|                mode = value;
		|                rx = null;
		|                fn = null;
		|            }
		|        }
		|
		|        bool searchinner;
		|
		|        public bool AlwaysSearchInnerText
		|        {
		|            get { return searchinner; }
		|            set
		|            {
		|                if (searchinner == value)
		|                {
		|                    return;
		|                }
		|                searchinner = value;
		|                rx = null;
		|                fn = null;
		|            }
		|        }
		|
		|        private string txt;
		|
		|        public string SearchText
		|        {
		|            get { return txt; }
		|            set
		|            {
		|                txt = value;
		|                rx = null;
		|                len = txt == null ? 0 : txt.Length;
		|                if (mode == SearchBoxMode.Lookup_Wildcards)
		|                {
		|                    // Принудительный набор для перепроверки, если требуется регулярное выражение.
		|                    fn = WildCardSearch;
		|                }
		|            }
		|        }
		|
		|        public override string ToString()
		|        {
		|            return Mode + "" for "" + txt;
		|        }
		|
		|        int len;
		|
		|        public int TextLength
		|        {
		|            get { return len; }
		|        }
		|
		|        public bool Matches(string s)
		|        {
		|            if (fn == null)
		|            {
		|                setSearchMatcher();
		|            }
		|            return fn(s);
		|        }
		|
		|        public bool Matches(object o)
		|        {
		|            if (o == null)
		|            {
		|                return txt == null;
		|            }
		|            return Matches(o.ToString());
		|        }
		|
		|        public Func<string, bool> SearchDelegate
		|        {
		|            get
		|            {
		|                if (fn == null)
		|                {
		|                    setSearchMatcher();
		|                }
		|                return fn;
		|            }
		|        }
		|
		|        void setSearchMatcher()
		|        {
		|            if (mode == SearchBoxMode.Lookup)
		|            {
		|                if (searchinner)
		|                {
		|                    fn = ContainsSearch;
		|                }
		|                else
		|                {
		|                    fn = StartSearch;
		|                }
		|            }
		|            else if (mode == SearchBoxMode.Lookup_Wildcards)
		|            {
		|                fn = WildCardSearch;
		|            }
		|            else
		|            {
		|                fn = RegExSearch;
		|            }
		|        }
		|
		|        bool ContainsSearch(string s)
		|        {
		|            return s.IndexOf(txt, StringComparison.OrdinalIgnoreCase) != -1;
		|        }
		|
		|        bool StartSearch(string s)
		|        {
		|            return s.StartsWith(txt, StringComparison.OrdinalIgnoreCase);
		|        }
		|
		|        Regex rx;
		|
		|        bool WildCardSearch(string s)
		|        {
		|            if (rx == null)
		|            {
		|                var text = txt;
		|                if (searchinner || text.Contains('*') || text.Contains('?'))
		|                {
		|                    var pattern = (searchinner ? null : ""^"") + Regex.Escape(text).Replace(@""\?"", ""."").Replace(@""\*"", "".*"");
		|                    rx = new Regex(pattern, RegexOptions.IgnoreCase);
		|                }
		|                else
		|                {
		|                    fn = StartSearch;
		|                    return StartSearch(s);
		|                }
		|            }
		|            return rx.IsMatch(s ?? string.Empty);
		|        }
		|
		|        bool RegExSearch(string s)
		|        {
		|            if (rx == null)
		|            {
		|                if (searchinner)
		|                {
		|                    rx = new Regex(txt, RegexOptions.IgnoreCase);
		|                }
		|                else
		|                {
		|                    rx = new Regex(""^"" + txt, RegexOptions.IgnoreCase);
		|                }
		|            }
		|            return rx.IsMatch(s);
		|        }
		|    }
		|
		|    public class ToolstripSearchBox<CT> : ToolStripControlHost, ISupportInitialize where CT : SearchBoxBase, new()
		|    {
		|        public ToolstripSearchBox() : base(new CT())
		|        {
		|            SearchBoxControl.MinimumSize = new Size(150, 20);
		|        }
		|
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		|        public CT SearchBoxControl
		|        {
		|            get { return (CT)Control; }
		|        }
		|
		|        public override string Text
		|        {
		|            get { return SearchBoxControl.Text; }
		|            set { SearchBoxControl.Text = value; }
		|        }
		|
		|        [DefaultValue(SearchBoxMode.Lookup_Wildcards)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public SearchBoxMode Mode
		|        {
		|            get { return SearchBoxControl.Mode; }
		|            set { SearchBoxControl.Mode = value; }
		|        }
		|
		|        [DefaultValue(false)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public bool AlwaysSearchInnerText
		|        {
		|            get { return SearchBoxControl.AlwaysSearchInnerText; }
		|            set { SearchBoxControl.AlwaysSearchInnerText = value; }
		|        }
		|
		|        [DefaultValue(false)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public bool ShowOptionsButtons
		|        {
		|            get { return SearchBoxControl.ShowOptionsButton; }
		|            set { SearchBoxControl.ShowOptionsButton = value; }
		|        }
		|
		|        public void BeginInit()
		|        {
		|            SearchBoxControl.BeginInit();
		|        }
		|
		|        public void EndInit()
		|        {
		|            SearchBoxControl.EndInit();
		|        }
		|    }
		|
		|    public class ToolStripSourceSearchBox<CT> : ToolstripSearchBox<CT> where CT : SourceSearchBox, new()
		|    {
		|        [DefaultValue(null)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public string PropertyName
		|        {
		|            get { return SearchBoxControl.PropertyName; }
		|            set { SearchBoxControl.PropertyName = value; }
		|        }
		|
		|        [DefaultValue(null)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public SourceSearchBox.Column SearchProperty
		|        {
		|            get { return SearchBoxControl.SearchProperty; }
		|            set { SearchBoxControl.SearchProperty = value; }
		|        }
		|    }
		|
		|    // Инкапсулирует BindingSourceSearchBox в ToolStripItem.
		|    public class ToolstripBindingSourceSearchBox : ToolStripSourceSearchBox<BindingSourceSearchBox>
		|    {
		|        [DefaultValue(null)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public CurrencyManager CurrencyManager
		|        {
		|            get { return SearchBoxControl.BindingSource; }
		|            set { SearchBoxControl.BindingSource = value; }
		|        }
		|    }
		|
		|    public class ToolstripDataGridSearchBox : ToolStripSourceSearchBox<DataGridSearchBox>
		|    {
		|        [DefaultValue(null)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public DataGridView DataGridView
		|        {
		|            get { return SearchBoxControl.DataGridView; }
		|            set { SearchBoxControl.DataGridView = value; }
		|        }
		|
		|        [DefaultValue(null)]
		|        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		|        public DataGridSearchBox.ColumnSearchMode SearchModeColumn
		|        {
		|            get { return SearchBoxControl.SearchModeColumn; }
		|            set { SearchBoxControl.SearchModeColumn = value; }
		|        }
		|    }
		|
		|    public class ContextMenuStripButton : Control
		|    {
		|        bool down;
		|
		|        protected override void OnMouseDown(MouseEventArgs e)
		|        {
		|            base.OnMouseDown(e);
		|            if (!down)
		|            {
		|                down = true;
		|                ContextMenuStrip cm = this.ContextMenuStrip;
		|                if (cm != null)
		|                {
		|                    cm.Show(this, new Point(Width, Height), ToolStripDropDownDirection.BelowLeft);
		|                    cm.Closed += new ToolStripDropDownClosedEventHandler(cm_Closed);
		|                }
		|                Invalidate();
		|            }
		|        }
		|
		|        protected override void OnMouseUp(MouseEventArgs e)
		|        {
		|            base.OnMouseUp(e);
		|            down = false;
		|            Invalidate();
		|        }
		|
		|        protected override Size DefaultSize
		|        {
		|            get { return new Size(10, 24); }
		|        }
		|
		|        void cm_Closed(object sender, ToolStripDropDownClosedEventArgs e)
		|        {
		|            ((ContextMenuStrip)sender).Closed -= cm_Closed;
		|            down = false;
		|            Invalidate();
		|        }
		|
		|        protected override void OnPaint(PaintEventArgs e)
		|        {
		|            base.OnPaint(e);
		|            try
		|            {
		|                Rectangle r = e.ClipRectangle;
		|                if (r.IsEmpty)
		|                {
		|                    return;
		|                }
		|                ControlPaint.DrawButton(e.Graphics, r, down ? ButtonState.Pushed : ButtonState.Normal);
		|
		|                if (down)
		|                {
		|                    r.Offset(1, 1);
		|                }
		|                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
		|                Point p = new Point(r.X + 2, r.Y + r.Height / 2 - 2);
		|                for (int i = 0; i < 2; i++)
		|                {
		|                    int w = r.Right - p.X - 4;
		|                    Point[] ps = { p, new Point(p.X + w / 2, p.Y + 2), new Point(p.X + w, p.Y) };
		|                    e.Graphics.DrawLines(Pens.Black, ps);
		|                    p.Y += 3;
		|                }
		|            }
		|            catch { }
		|        }
		|    }
		|
		|    #endregion
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Padding" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Padding
		|    {
		|        public ClPadding dll_obj;
		|        public System.Windows.Forms.Padding M_Padding;
		|
		|        public Padding()
		|        {
		|            M_Padding = System.Windows.Forms.Padding.Empty;
		|        }
		|
		|        public Padding(int p1)
		|        {
		|            M_Padding = new System.Windows.Forms.Padding(p1);
		|        }
		|
		|        public Padding(int p1, int p2, int p3, int p4)
		|        {
		|            M_Padding = new System.Windows.Forms.Padding(p1, p2, p3, p4);
		|        }
		|
		|        public Padding(osf.Padding p1)
		|        {
		|            M_Padding = p1.M_Padding;
		|        }
		|
		|        public Padding(System.Windows.Forms.Padding p1)
		|        {
		|            M_Padding = p1;
		|        }
		|
		|        public int All
		|        {
		|            get { return M_Padding.All; }
		|            set { M_Padding.All = value; }
		|        }
		|
		|        public int Bottom
		|        {
		|            get { return M_Padding.Bottom; }
		|            set { M_Padding.Bottom = value; }
		|        }
		|
		|        public int Left
		|        {
		|            get { return M_Padding.Left; }
		|            set { M_Padding.Left = value; }
		|        }
		|
		|        public int Right
		|        {
		|            get { return M_Padding.Right; }
		|            set { M_Padding.Right = value; }
		|        }
		|
		|        public int Top
		|        {
		|            get { return M_Padding.Top; }
		|            set { M_Padding.Top = value; }
		|        }
		|
		|        public int Horizontal
		|        {
		|            get { return M_Padding.Horizontal; }
		|        }
		|
		|        public int Vertical
		|        {
		|            get { return M_Padding.Vertical; }
		|        }
		|
		|        public osf.Size Size
		|        {
		|            get { return new Size(M_Padding.Size); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewCellStyle" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewCellStyle
		|    {
		|        public ClDataGridViewCellStyle dll_obj;
		|        public System.Windows.Forms.DataGridViewCellStyle M_DataGridViewCellStyle;
		|
		|        public DataGridViewCellStyle()
		|        {
		|            M_DataGridViewCellStyle = new System.Windows.Forms.DataGridViewCellStyle();
		|            OneScriptForms.AddToHashtable(M_DataGridViewCellStyle, this);
		|        }
		|
		|        public DataGridViewCellStyle(osf.DataGridViewCellStyle p1)
		|        {
		|            M_DataGridViewCellStyle = p1.M_DataGridViewCellStyle;
		|            OneScriptForms.AddToHashtable(M_DataGridViewCellStyle, this);
		|        }
		|
		|        public DataGridViewCellStyle(System.Windows.Forms.DataGridViewCellStyle p1)
		|        {
		|            M_DataGridViewCellStyle = p1;
		|            OneScriptForms.AddToHashtable(M_DataGridViewCellStyle, this);
		|        }
		|
		|        public int Alignment
		|        {
		|            get { return (int)M_DataGridViewCellStyle.Alignment; }
		|            set { M_DataGridViewCellStyle.Alignment = (System.Windows.Forms.DataGridViewContentAlignment)value; }
		|        }
		|
		|        public osf.Color BackColor
		|        {
		|            get { return new Color(M_DataGridViewCellStyle.BackColor); }
		|            set { M_DataGridViewCellStyle.BackColor = value.M_Color; }
		|        }
		|
		|        public osf.Font Font
		|        {
		|            get { return new Font(M_DataGridViewCellStyle.Font); }
		|            set { M_DataGridViewCellStyle.Font = value.M_Font; }
		|        }
		|
		|        public osf.Color ForeColor
		|        {
		|            get { return new Color(M_DataGridViewCellStyle.ForeColor); }
		|            set { M_DataGridViewCellStyle.ForeColor = value.M_Color; }
		|        }
		|
		|        public osf.Padding Padding
		|        {
		|            get { return new Padding(M_DataGridViewCellStyle.Padding); }
		|            set { M_DataGridViewCellStyle.Padding = value.M_Padding; }
		|        }
		|
		|        public osf.Color SelectionBackColor
		|        {
		|            get { return new Color(M_DataGridViewCellStyle.SelectionBackColor); }
		|            set { M_DataGridViewCellStyle.SelectionBackColor = value.M_Color; }
		|        }
		|
		|        public osf.Color SelectionForeColor
		|        {
		|            get { return new Color(M_DataGridViewCellStyle.SelectionForeColor); }
		|            set { M_DataGridViewCellStyle.SelectionForeColor = value.M_Color; }
		|        }
		|
		|        public int WrapMode
		|        {
		|            get { return (int)M_DataGridViewCellStyle.WrapMode; }
		|            set { M_DataGridViewCellStyle.WrapMode = (System.Windows.Forms.DataGridViewTriState)value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewComboBoxCellObjectCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewComboBoxCellObjectCollection
		|    {
		|        public ClDataGridViewComboBoxCellObjectCollection dll_obj;
		|        public System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection M_DataGridViewComboBoxCellObjectCollection;
		|
		|        public DataGridViewComboBoxCellObjectCollection()
		|        {
		|        }
		|
		|        public DataGridViewComboBoxCellObjectCollection(System.Windows.Forms.DataGridViewComboBoxCell.ObjectCollection p1)
		|        {
		|            M_DataGridViewComboBoxCellObjectCollection = p1;
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_DataGridViewComboBoxCellObjectCollection.Count; }
		|        }
		|
		|        public object this[int p1]
		|        {
		|            get { return M_DataGridViewComboBoxCellObjectCollection[p1]; }
		|        }
		|
		|        public int Add(object p1)
		|        {
		|            return M_DataGridViewComboBoxCellObjectCollection.Add(p1);
		|        }
		|
		|        public void Clear()
		|        {
		|            M_DataGridViewComboBoxCellObjectCollection.Clear();
		|        }
		|
		|        public bool Contains(object p1)
		|        {
		|            return M_DataGridViewComboBoxCellObjectCollection.Contains(p1);
		|        }
		|
		|        public int IndexOf(object p1)
		|        {
		|            return M_DataGridViewComboBoxCellObjectCollection.IndexOf(p1);
		|        }
		|
		|        public void Insert(int index, object value)
		|        {
		|            M_DataGridViewComboBoxCellObjectCollection.Insert(index, value);
		|        }
		|
		|        public void Remove(object p1)
		|        {
		|            M_DataGridViewComboBoxCellObjectCollection.Remove(p1);
		|        }
		|
		|        public void RemoveAt(int Index)
		|        {
		|            M_DataGridViewComboBoxCellObjectCollection.RemoveAt(Index);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewRowCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewRowCollection
		|    {
		|        public ClDataGridViewRowCollection dll_obj;
		|        public System.Windows.Forms.DataGridViewRowCollection M_DataGridViewRowCollection;
		|
		|        public DataGridViewRowCollection()
		|        {
		|        }
		|		
		|        public DataGridViewRowCollection(System.Windows.Forms.DataGridViewRowCollection p1)
		|        {
		|            M_DataGridViewRowCollection = p1;
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_DataGridViewRowCollection.Count; }
		|        }
		|
		|        public osf.DataGridViewRow this[int p1]
		|        {
		|            get { return new osf.DataGridViewRow(M_DataGridViewRowCollection[p1]); }
		|        }
		|
		|        public int Add()
		|        {
		|            return M_DataGridViewRowCollection.Add();
		|        }
		|
		|        public int Add(osf.DataGridViewRow p1)
		|        {
		|            return M_DataGridViewRowCollection.Add(p1.M_DataGridViewRow);
		|        }
		|
		|        public int AddCopy(int p1)
		|        {
		|            return M_DataGridViewRowCollection.AddCopy(p1);
		|        }
		|
		|        public void Clear()
		|        {
		|            M_DataGridViewRowCollection.Clear();
		|        }
		|
		|        public bool Contains(osf.DataGridViewRow p1)
		|        {
		|            return M_DataGridViewRowCollection.Contains(p1.M_DataGridViewRow);
		|        }
		|
		|        public int IndexOf(osf.DataGridViewRow p1)
		|        {
		|            return M_DataGridViewRowCollection.IndexOf(p1.M_DataGridViewRow);
		|        }
		|
		|        public void Insert(int index, osf.DataGridViewRow value)
		|        {
		|            M_DataGridViewRowCollection.Insert(index, value.M_DataGridViewRow);
		|        }
		|
		|        public void Remove(osf.DataGridViewRow p1)
		|        {
		|            M_DataGridViewRowCollection.Remove(p1.M_DataGridViewRow);
		|        }
		|
		|        public void RemoveAt(int Index)
		|        {
		|            M_DataGridViewRowCollection.RemoveAt(Index);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewTextBoxColumn" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewTextBoxColumn : DataGridViewColumn
		|    {
		|        public new ClDataGridViewTextBoxColumn dll_obj;
		|        private System.Windows.Forms.DataGridViewTextBoxColumn m_DataGridViewTextBoxColumn;
		|		
		|        public DataGridViewTextBoxColumn()
		|        {
		|            M_DataGridViewTextBoxColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
		|        }
		|
		|        public DataGridViewTextBoxColumn(osf.DataGridViewTextBoxColumn p1)
		|        {
		|            M_DataGridViewTextBoxColumn = p1.M_DataGridViewTextBoxColumn;
		|        }
		|
		|        public DataGridViewTextBoxColumn(System.Windows.Forms.DataGridViewTextBoxColumn p1)
		|        {
		|            M_DataGridViewTextBoxColumn = p1;
		|        }
		|
		|        public int MaxInputLength
		|        {
		|            get { return M_DataGridViewTextBoxColumn.MaxInputLength; }
		|            set { M_DataGridViewTextBoxColumn.MaxInputLength = value; }
		|        }
		|		
		|        public System.Windows.Forms.DataGridViewTextBoxColumn M_DataGridViewTextBoxColumn
		|        {
		|            get { return m_DataGridViewTextBoxColumn; }
		|            set
		|            {
		|                m_DataGridViewTextBoxColumn = value;
		|                base.M_DataGridViewColumn = m_DataGridViewTextBoxColumn;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewTextBoxCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewTextBoxCell : DataGridViewCell
		|    {
		|        public new ClDataGridViewTextBoxCell dll_obj;
		|        private System.Windows.Forms.DataGridViewTextBoxCell m_DataGridViewTextBoxCell;
		|		
		|        public DataGridViewTextBoxCell()
		|        {
		|            M_DataGridViewTextBoxCell = new System.Windows.Forms.DataGridViewTextBoxCell();
		|        }
		|
		|        public DataGridViewTextBoxCell(System.Windows.Forms.DataGridViewTextBoxCell p1)
		|        {
		|            M_DataGridViewTextBoxCell = p1;
		|        }
		|
		|        public int MaxInputLength
		|        {
		|            get { return M_DataGridViewTextBoxCell.MaxInputLength; }
		|            set { M_DataGridViewTextBoxCell.MaxInputLength = value; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewTextBoxCell M_DataGridViewTextBoxCell
		|        {
		|            get { return m_DataGridViewTextBoxCell; }
		|            set
		|            {
		|                m_DataGridViewTextBoxCell = value;
		|                base.M_DataGridViewCell = m_DataGridViewTextBoxCell;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewRowHeaderCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewRowHeaderCell : DataGridViewHeaderCell
		|    {
		|        public new ClDataGridViewRowHeaderCell dll_obj;
		|        private System.Windows.Forms.DataGridViewRowHeaderCell m_DataGridViewRowHeaderCell;
		|		
		|        public DataGridViewRowHeaderCell()
		|        {
		|            M_DataGridViewRowHeaderCell = new System.Windows.Forms.DataGridViewRowHeaderCell();
		|        }
		|		
		|        public DataGridViewRowHeaderCell(System.Windows.Forms.DataGridViewRowHeaderCell p1)
		|        {
		|            M_DataGridViewRowHeaderCell = p1;
		|        }
		|
		|        public System.Windows.Forms.DataGridViewRowHeaderCell M_DataGridViewRowHeaderCell
		|        {
		|            get { return m_DataGridViewRowHeaderCell; }
		|            set
		|            {
		|                m_DataGridViewRowHeaderCell = value;
		|                base.M_DataGridViewHeaderCell = m_DataGridViewRowHeaderCell;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewLinkColumn" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewLinkColumn : DataGridViewColumn
		|    {
		|        public new ClDataGridViewLinkColumn dll_obj;
		|        private System.Windows.Forms.DataGridViewLinkColumn m_DataGridViewLinkColumn;
		|		
		|        public DataGridViewLinkColumn()
		|        {
		|            M_DataGridViewLinkColumn = new System.Windows.Forms.DataGridViewLinkColumn();
		|        }
		|
		|        public DataGridViewLinkColumn(osf.DataGridViewLinkColumn p1)
		|        {
		|            M_DataGridViewLinkColumn = p1.M_DataGridViewLinkColumn;
		|        }
		|
		|        public DataGridViewLinkColumn(System.Windows.Forms.DataGridViewLinkColumn p1)
		|        {
		|            M_DataGridViewLinkColumn = p1;
		|        }
		|
		|        public osf.Color ActiveLinkColor
		|        {
		|            get { return new Color(M_DataGridViewLinkColumn.ActiveLinkColor); }
		|            set { M_DataGridViewLinkColumn.ActiveLinkColor = value.M_Color; }
		|        }
		|		
		|        public string Text
		|        {
		|            get { return M_DataGridViewLinkColumn.Text; }
		|            set { M_DataGridViewLinkColumn.Text = value; }
		|        }
		|		
		|        public osf.Color LinkColor
		|        {
		|            get { return new Color(M_DataGridViewLinkColumn.LinkColor); }
		|            set { M_DataGridViewLinkColumn.LinkColor = value.M_Color; }
		|        }
		|		
		|        public osf.Color VisitedLinkColor
		|        {
		|            get { return new Color(M_DataGridViewLinkColumn.VisitedLinkColor); }
		|            set { M_DataGridViewLinkColumn.VisitedLinkColor = value.M_Color; }
		|        }
		|
		|        public bool UseColumnTextForLinkValue
		|        {
		|            get { return M_DataGridViewLinkColumn.UseColumnTextForLinkValue; }
		|            set { M_DataGridViewLinkColumn.UseColumnTextForLinkValue = value; }
		|        }
		|
		|        public int LinkBehavior
		|        {
		|            get { return (int)M_DataGridViewLinkColumn.LinkBehavior; }
		|            set { M_DataGridViewLinkColumn.LinkBehavior = (System.Windows.Forms.LinkBehavior)value; }
		|        }
		|
		|        public bool TrackVisitedState
		|        {
		|            get { return M_DataGridViewLinkColumn.TrackVisitedState; }
		|            set { M_DataGridViewLinkColumn.TrackVisitedState = value; }
		|        }
		|		
		|
		|        public System.Windows.Forms.DataGridViewLinkColumn M_DataGridViewLinkColumn
		|        {
		|            get { return m_DataGridViewLinkColumn; }
		|            set
		|            {
		|                m_DataGridViewLinkColumn = value;
		|                base.M_DataGridViewColumn = m_DataGridViewLinkColumn;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewRow" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewRow : DataGridViewBand
		|    {
		|        public new ClDataGridViewRow dll_obj;
		|        private System.Windows.Forms.DataGridViewRow m_DataGridViewRow;
		|		
		|        public DataGridViewRow()
		|        {
		|            M_DataGridViewRow = new System.Windows.Forms.DataGridViewRow();
		|        }
		|
		|        public DataGridViewRow(System.Windows.Forms.DataGridViewRow p1)
		|        {
		|            M_DataGridViewRow = p1;
		|        }
		|
		|        public System.Windows.Forms.DataGridViewRow M_DataGridViewRow
		|        {
		|            get { return m_DataGridViewRow; }
		|            set
		|            {
		|                m_DataGridViewRow = value;
		|                base.M_DataGridViewBand = m_DataGridViewRow;
		|            }
		|        }
		|
		|        public osf.DataGridViewCellCollection Cells
		|        {
		|            get { return new osf.DataGridViewCellCollection(M_DataGridViewRow.Cells); }
		|        }
		|		
		|        public osf.DataGridViewRowHeaderCell HeaderCell
		|        {
		|            get { return new osf.DataGridViewRowHeaderCell(M_DataGridViewRow.HeaderCell); }
		|            set { M_DataGridViewRow.HeaderCell = value.M_DataGridViewRowHeaderCell; }
		|        }
		|		
		|        public int Resizable
		|        {
		|            get { return (int)M_DataGridViewRow.Resizable; }
		|            set { M_DataGridViewRow.Resizable = (System.Windows.Forms.DataGridViewTriState)value; }
		|        }
		|		
		|        public osf.DataGridViewCellStyle DefaultCellStyle
		|        {
		|            get
		|            {
		|                foreach (System.Collections.DictionaryEntry de in OneScriptForms.hashtable)
		|                {
		|                    if (de.Key.Equals(M_DataGridViewRow.DefaultCellStyle))
		|                    {
		|                        return ((dynamic)de.Value);
		|                    }
		|                }
		|                return null;
		|            }
		|            set { M_DataGridViewRow.DefaultCellStyle = value.M_DataGridViewCellStyle; }
		|        }
		|
		|        public int DividerHeight
		|        {
		|            get { return M_DataGridViewRow.DividerHeight; }
		|            set { M_DataGridViewRow.DividerHeight = value; }
		|        }
		|
		|        public bool Frozen
		|        {
		|            get { return M_DataGridViewRow.Frozen; }
		|            set { M_DataGridViewRow.Frozen = value; }
		|        }
		|
		|        public int MinimumHeight
		|        {
		|            get { return M_DataGridViewRow.MinimumHeight; }
		|            set { M_DataGridViewRow.MinimumHeight = value; }
		|        }
		|
		|        public bool Visible
		|        {
		|            get { return M_DataGridViewRow.Visible; }
		|            set { M_DataGridViewRow.Visible = value; }
		|        }
		|
		|        public bool ReadOnly
		|        {
		|            get { return M_DataGridViewRow.ReadOnly; }
		|            set { M_DataGridViewRow.ReadOnly = value; }
		|        }
		|
		|        public bool IsNewRow
		|        {
		|            get { return M_DataGridViewRow.IsNewRow; }
		|        }
		|		
		|        public int Height
		|        {
		|            get { return M_DataGridViewRow.Height; }
		|            set { M_DataGridViewRow.Height = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewLinkCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewLinkCell : DataGridViewCell
		|    {
		|        public new ClDataGridViewLinkCell dll_obj;
		|        private System.Windows.Forms.DataGridViewLinkCell m_DataGridViewLinkCell;
		|		
		|        public DataGridViewLinkCell()
		|        {
		|            M_DataGridViewLinkCell = new System.Windows.Forms.DataGridViewLinkCell();
		|        }
		|
		|        public DataGridViewLinkCell(System.Windows.Forms.DataGridViewLinkCell p1)
		|        {
		|            M_DataGridViewLinkCell = p1;
		|        }
		|		
		|        public int LinkBehavior
		|        {
		|            get { return (int)M_DataGridViewLinkCell.LinkBehavior; }
		|            set { M_DataGridViewLinkCell.LinkBehavior = (System.Windows.Forms.LinkBehavior)value; }
		|        }
		|		
		|        public osf.Color LinkColor
		|        {
		|            get { return new Color(M_DataGridViewLinkCell.LinkColor); }
		|            set { M_DataGridViewLinkCell.LinkColor = value.M_Color; }
		|        }
		|		
		|        public osf.Color VisitedLinkColor
		|        {
		|            get { return new Color(M_DataGridViewLinkCell.VisitedLinkColor); }
		|            set { M_DataGridViewLinkCell.VisitedLinkColor = value.M_Color; }
		|        }
		|		
		|        public bool LinkVisited
		|        {
		|            get { return M_DataGridViewLinkCell.LinkVisited; }
		|            set { M_DataGridViewLinkCell.LinkVisited = value; }
		|        }
		|		
		|        public bool TrackVisitedState
		|        {
		|            get { return M_DataGridViewLinkCell.TrackVisitedState; }
		|            set { M_DataGridViewLinkCell.TrackVisitedState = value; }
		|        }
		|		
		|        public bool UseColumnTextForLinkValue
		|        {
		|            get { return M_DataGridViewLinkCell.UseColumnTextForLinkValue; }
		|            set { M_DataGridViewLinkCell.UseColumnTextForLinkValue = value; }
		|        }
		|
		|        public osf.Color ActiveLinkColor
		|        {
		|            get { return new Color(M_DataGridViewLinkCell.ActiveLinkColor); }
		|            set { M_DataGridViewLinkCell.ActiveLinkColor = value.M_Color; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewLinkCell M_DataGridViewLinkCell
		|        {
		|            get { return m_DataGridViewLinkCell; }
		|            set
		|            {
		|                m_DataGridViewLinkCell = value;
		|                base.M_DataGridViewCell = m_DataGridViewLinkCell;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewImageColumn" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewImageColumn : DataGridViewColumn
		|    {
		|        public new ClDataGridViewImageColumn dll_obj;
		|        private System.Windows.Forms.DataGridViewImageColumn m_DataGridViewImageColumn;
		|		
		|        public DataGridViewImageColumn()
		|        {
		|            M_DataGridViewImageColumn = new System.Windows.Forms.DataGridViewImageColumn();
		|        }
		|
		|        public DataGridViewImageColumn(osf.DataGridViewImageColumn p1)
		|        {
		|            M_DataGridViewImageColumn = p1.M_DataGridViewImageColumn;
		|        }
		|
		|        public DataGridViewImageColumn(System.Windows.Forms.DataGridViewImageColumn p1)
		|        {
		|            M_DataGridViewImageColumn = p1;
		|        }
		|
		|        public osf.Bitmap Bitmap
		|        {
		|            get { return new osf.Bitmap(M_DataGridViewImageColumn.Image); }
		|            set { M_DataGridViewImageColumn.Image = value.M_Bitmap; }
		|        }
		|
		|        public osf.Icon Icon
		|        {
		|            get { return new osf.Icon(M_DataGridViewImageColumn.Icon); }
		|            set { M_DataGridViewImageColumn.Icon = (System.Drawing.Icon)value.M_Icon; }
		|        }
		|		
		|        public int ImageLayout
		|        {
		|            get { return (int)M_DataGridViewImageColumn.ImageLayout; }
		|            set { M_DataGridViewImageColumn.ImageLayout = (System.Windows.Forms.DataGridViewImageCellLayout)value; }
		|        }
		|		
		|        public bool ValuesAreIcons
		|        {
		|            get { return M_DataGridViewImageColumn.ValuesAreIcons; }
		|            set { M_DataGridViewImageColumn.ValuesAreIcons = value; }
		|        }
		|		
		|        public string Description
		|        {
		|            get { return M_DataGridViewImageColumn.Description; }
		|            set { M_DataGridViewImageColumn.Description = value; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewImageColumn M_DataGridViewImageColumn
		|        {
		|            get { return m_DataGridViewImageColumn; }
		|            set
		|            {
		|                m_DataGridViewImageColumn = value;
		|                base.M_DataGridViewColumn = m_DataGridViewImageColumn;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewImageCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewImageCell : DataGridViewCell
		|    {
		|        public new ClDataGridViewImageCell dll_obj;
		|        private System.Windows.Forms.DataGridViewImageCell m_DataGridViewImageCell;
		|		
		|        public DataGridViewImageCell()
		|        {
		|            M_DataGridViewImageCell = new System.Windows.Forms.DataGridViewImageCell();
		|        }
		|
		|        public DataGridViewImageCell(System.Windows.Forms.DataGridViewImageCell p1)
		|        {
		|            M_DataGridViewImageCell = p1;
		|        }
		|
		|        public string Description
		|        {
		|            get { return M_DataGridViewImageCell.Description; }
		|            set { M_DataGridViewImageCell.Description = value; }
		|        }
		|
		|        public bool ValueIsIcon
		|        {
		|            get { return M_DataGridViewImageCell.ValueIsIcon; }
		|            set { M_DataGridViewImageCell.ValueIsIcon = value; }
		|        }
		|		
		|        public int ImageLayout
		|        {
		|            get { return (int)M_DataGridViewImageCell.ImageLayout; }
		|            set { M_DataGridViewImageCell.ImageLayout = (System.Windows.Forms.DataGridViewImageCellLayout)value; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewImageCell M_DataGridViewImageCell
		|        {
		|            get { return m_DataGridViewImageCell; }
		|            set
		|            {
		|                m_DataGridViewImageCell = value;
		|                base.M_DataGridViewCell = m_DataGridViewImageCell;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewComboBoxColumn" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewComboBoxColumn : DataGridViewColumn
		|    {
		|        public new ClDataGridViewComboBoxColumn dll_obj;
		|        private System.Windows.Forms.DataGridViewComboBoxColumn m_DataGridViewComboBoxColumn;
		|		
		|        public DataGridViewComboBoxColumn()
		|        {
		|            M_DataGridViewComboBoxColumn = new System.Windows.Forms.DataGridViewComboBoxColumn();
		|            M_DataGridViewComboBoxColumn.DisplayMember = ""Text"";
		|            M_DataGridViewComboBoxColumn.ValueMember = ""Value"";
		|        }
		|
		|        public DataGridViewComboBoxColumn(osf.DataGridViewComboBoxColumn p1)
		|        {
		|            M_DataGridViewComboBoxColumn = p1.M_DataGridViewComboBoxColumn;
		|        }
		|
		|        public DataGridViewComboBoxColumn(System.Windows.Forms.DataGridViewComboBoxColumn p1)
		|        {
		|            M_DataGridViewComboBoxColumn = p1;
		|        }
		|
		|        public int DisplayStyle
		|        {
		|            get { return (int)M_DataGridViewComboBoxColumn.DisplayStyle; }
		|            set { M_DataGridViewComboBoxColumn.DisplayStyle = (System.Windows.Forms.DataGridViewComboBoxDisplayStyle)value; }
		|        }
		|
		|        public string ValueMember
		|        {
		|            get { return M_DataGridViewComboBoxColumn.ValueMember; }
		|            set { M_DataGridViewComboBoxColumn.ValueMember = value; }
		|        }
		|		
		|        public object DataSource
		|        {
		|            get
		|            {
		|                object obj;
		|                try
		|                {
		|                    obj = ((dynamic)M_DataGridViewComboBoxColumn.DataSource).M_Object;
		|                }
		|                catch
		|                {
		|                    obj = M_DataGridViewComboBoxColumn.DataSource;
		|                }
		|                return obj;
		|            }
		|            set
		|            {
		|                M_DataGridViewComboBoxColumn.DataSource = null;
		|                try
		|                {
		|                    System.Type Type1 = value.GetType();
		|                    string strType1 = Type1.ToString();
		|                    string str1 = strType1.Substring(strType1.LastIndexOf(""."") + 1);
		|                    M_DataGridViewComboBoxColumn.DataSource = Type1.GetField(""M_"" + str1).GetValue(value);
		|                }
		|                catch
		|                {
		|                    M_DataGridViewComboBoxColumn.DataSource = value;
		|                }
		|            }
		|        }
		|
		|        public int MaxDropDownItems
		|        {
		|            get { return M_DataGridViewComboBoxColumn.MaxDropDownItems; }
		|            set { M_DataGridViewComboBoxColumn.MaxDropDownItems = value; }
		|        }
		|
		|        public string DisplayMember
		|        {
		|            get { return M_DataGridViewComboBoxColumn.DisplayMember; }
		|            set { M_DataGridViewComboBoxColumn.DisplayMember = value; }
		|        }
		|
		|        public bool Sorted
		|        {
		|            get { return M_DataGridViewComboBoxColumn.Sorted; }
		|            set { M_DataGridViewComboBoxColumn.Sorted = value; }
		|        }
		|
		|        public int FlatStyle
		|        {
		|            get { return (int)M_DataGridViewComboBoxColumn.FlatStyle; }
		|            set { M_DataGridViewComboBoxColumn.FlatStyle = (System.Windows.Forms.FlatStyle)value; }
		|        }
		|
		|        public osf.DataGridViewComboBoxCellObjectCollection Items
		|        {
		|            get { return new DataGridViewComboBoxCellObjectCollection(M_DataGridViewComboBoxColumn.Items); }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewComboBoxColumn M_DataGridViewComboBoxColumn
		|        {
		|            get { return m_DataGridViewComboBoxColumn; }
		|            set
		|            {
		|                m_DataGridViewComboBoxColumn = value;
		|                base.M_DataGridViewColumn = m_DataGridViewComboBoxColumn;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewComboBoxCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewComboBoxCell : DataGridViewCell
		|    {
		|        public new ClDataGridViewComboBoxCell dll_obj;
		|        private System.Windows.Forms.DataGridViewComboBoxCell m_DataGridViewComboBoxCell;
		|		
		|        public DataGridViewComboBoxCell()
		|        {
		|            M_DataGridViewComboBoxCell = new System.Windows.Forms.DataGridViewComboBoxCell();
		|            M_DataGridViewComboBoxCell.DisplayMember = ""Text"";
		|            M_DataGridViewComboBoxCell.ValueMember = ""Value"";
		|        }
		|
		|        public DataGridViewComboBoxCell(System.Windows.Forms.DataGridViewComboBoxCell p1)
		|        {
		|            M_DataGridViewComboBoxCell = p1;
		|        }
		|
		|        public int DisplayStyle
		|        {
		|            get { return (int)M_DataGridViewComboBoxCell.DisplayStyle; }
		|            set { M_DataGridViewComboBoxCell.DisplayStyle = (System.Windows.Forms.DataGridViewComboBoxDisplayStyle)value; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewComboBoxCell M_DataGridViewComboBoxCell
		|        {
		|            get { return m_DataGridViewComboBoxCell; }
		|            set
		|            {
		|                m_DataGridViewComboBoxCell = value;
		|                base.M_DataGridViewCell = m_DataGridViewComboBoxCell;
		|            }
		|        }
		|		
		|        public int MaxDropDownItems
		|        {
		|            get { return M_DataGridViewComboBoxCell.MaxDropDownItems; }
		|            set { M_DataGridViewComboBoxCell.MaxDropDownItems = value; }
		|        }
		|		
		|        public string DisplayMember
		|        {
		|            get { return M_DataGridViewComboBoxCell.DisplayMember; }
		|            set { M_DataGridViewComboBoxCell.DisplayMember = value; }
		|        }
		|		
		|        public bool Sorted
		|        {
		|            get { return M_DataGridViewComboBoxCell.Sorted; }
		|            set { M_DataGridViewComboBoxCell.Sorted = value; }
		|        }
		|		
		|        public string ValueMember
		|        {
		|            get { return M_DataGridViewComboBoxCell.ValueMember; }
		|            set { M_DataGridViewComboBoxCell.ValueMember = value; }
		|        }
		|		
		|        public object DataSource
		|        {
		|            get
		|            {
		|                object obj;
		|                try
		|                {
		|                    obj = ((dynamic)M_DataGridViewComboBoxCell.DataSource).M_Object;
		|                }
		|                catch
		|                {
		|                    obj = M_DataGridViewComboBoxCell.DataSource;
		|                }
		|                return obj;
		|            }
		|            set
		|            {
		|                M_DataGridViewComboBoxCell.DataSource = null;
		|                try
		|                {
		|                    System.Type Type1 = value.GetType();
		|                    string strType1 = Type1.ToString();
		|                    string str1 = strType1.Substring(strType1.LastIndexOf(""."") + 1);
		|                    M_DataGridViewComboBoxCell.DataSource = Type1.GetField(""M_"" + str1).GetValue(value);
		|                }
		|                catch
		|                {
		|                    M_DataGridViewComboBoxCell.DataSource = value;
		|                }
		|            }
		|        }
		|		
		|        public osf.DataGridViewComboBoxCellObjectCollection Items
		|        {
		|            get { return new DataGridViewComboBoxCellObjectCollection(M_DataGridViewComboBoxCell.Items); }
		|        }
		|		
		|        public int FlatStyle
		|        {
		|            get { return (int)M_DataGridViewComboBoxCell.FlatStyle; }
		|            set { M_DataGridViewComboBoxCell.FlatStyle = (System.Windows.Forms.FlatStyle)value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewColumnHeaderCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewColumnHeaderCell : DataGridViewHeaderCell
		|    {
		|        public new ClDataGridViewColumnHeaderCell dll_obj;
		|        private System.Windows.Forms.DataGridViewColumnHeaderCell m_DataGridViewColumnHeaderCell;
		|		
		|        public DataGridViewColumnHeaderCell()
		|        {
		|            M_DataGridViewColumnHeaderCell = new System.Windows.Forms.DataGridViewColumnHeaderCell();
		|        }
		|
		|        public DataGridViewColumnHeaderCell(System.Windows.Forms.DataGridViewColumnHeaderCell p1)
		|        {
		|            M_DataGridViewColumnHeaderCell = p1;
		|        }
		|
		|        public System.Windows.Forms.DataGridViewColumnHeaderCell M_DataGridViewColumnHeaderCell
		|        {
		|            get { return m_DataGridViewColumnHeaderCell; }
		|            set
		|            {
		|                m_DataGridViewColumnHeaderCell = value;
		|                base.M_DataGridViewHeaderCell = m_DataGridViewColumnHeaderCell;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewHeaderCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewHeaderCell : DataGridViewCell
		|    {
		|        public new ClDataGridViewHeaderCell dll_obj;
		|        private System.Windows.Forms.DataGridViewHeaderCell m_DataGridViewHeaderCell;
		|		
		|        public DataGridViewHeaderCell()
		|        {
		|            M_DataGridViewHeaderCell = new System.Windows.Forms.DataGridViewHeaderCell();
		|        }
		|
		|        public DataGridViewHeaderCell(System.Windows.Forms.DataGridViewHeaderCell p1)
		|        {
		|            M_DataGridViewHeaderCell = p1;
		|        }
		|		
		|        public new bool Visible
		|        {
		|            get { return M_DataGridViewHeaderCell.Visible; }
		|        }
		|		
		|        public new bool Resizable
		|        {
		|            get { return M_DataGridViewHeaderCell.Resizable; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewHeaderCell M_DataGridViewHeaderCell
		|        {
		|            get { return m_DataGridViewHeaderCell; }
		|            set
		|            {
		|                m_DataGridViewHeaderCell = value;
		|                base.M_DataGridViewCell = m_DataGridViewHeaderCell;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewCheckBoxColumn" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewCheckBoxColumn : DataGridViewColumn
		|    {
		|        public new ClDataGridViewCheckBoxColumn dll_obj;
		|        private System.Windows.Forms.DataGridViewCheckBoxColumn m_DataGridViewCheckBoxColumn;
		|		
		|        public DataGridViewCheckBoxColumn()
		|        {
		|            M_DataGridViewCheckBoxColumn = new System.Windows.Forms.DataGridViewCheckBoxColumn();
		|        }
		|
		|        public DataGridViewCheckBoxColumn(osf.DataGridViewCheckBoxColumn p1)
		|        {
		|            M_DataGridViewCheckBoxColumn = p1.M_DataGridViewCheckBoxColumn;
		|        }
		|
		|        public DataGridViewCheckBoxColumn(System.Windows.Forms.DataGridViewCheckBoxColumn p1)
		|        {
		|            M_DataGridViewCheckBoxColumn = p1;
		|        }
		|
		|        public bool ThreeState
		|        {
		|            get { return M_DataGridViewCheckBoxColumn.ThreeState; }
		|            set { M_DataGridViewCheckBoxColumn.ThreeState = value; }
		|        }
		|		
		|        public object IndeterminateValue
		|        {
		|            get { return M_DataGridViewCheckBoxColumn.IndeterminateValue; }
		|            set { M_DataGridViewCheckBoxColumn.IndeterminateValue = value; }
		|        }
		|		
		|        public object FalseValue
		|        {
		|            get { return M_DataGridViewCheckBoxColumn.FalseValue; }
		|            set { M_DataGridViewCheckBoxColumn.FalseValue = value; }
		|        }
		|
		|        public object TrueValue
		|        {
		|            get { return M_DataGridViewCheckBoxColumn.TrueValue; }
		|            set { M_DataGridViewCheckBoxColumn.TrueValue = value; }
		|        }
		|		
		|        public int FlatStyle
		|        {
		|            get { return (int)M_DataGridViewCheckBoxColumn.FlatStyle; }
		|            set { M_DataGridViewCheckBoxColumn.FlatStyle = (System.Windows.Forms.FlatStyle)value; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewCheckBoxColumn M_DataGridViewCheckBoxColumn
		|        {
		|            get { return m_DataGridViewCheckBoxColumn; }
		|            set
		|            {
		|                m_DataGridViewCheckBoxColumn = value;
		|                base.M_DataGridViewColumn = m_DataGridViewCheckBoxColumn;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewCheckBoxCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewCheckBoxCell : DataGridViewCell
		|    {
		|        public new ClDataGridViewCheckBoxCell dll_obj;
		|        private System.Windows.Forms.DataGridViewCheckBoxCell m_DataGridViewCheckBoxCell;
		|		
		|        public DataGridViewCheckBoxCell()
		|        {
		|            M_DataGridViewCheckBoxCell = new System.Windows.Forms.DataGridViewCheckBoxCell();
		|        }
		|
		|        public DataGridViewCheckBoxCell(System.Windows.Forms.DataGridViewCheckBoxCell p1)
		|        {
		|            M_DataGridViewCheckBoxCell = p1;
		|        }
		|
		|        public bool ThreeState
		|        {
		|            get { return M_DataGridViewCheckBoxCell.ThreeState; }
		|            set { M_DataGridViewCheckBoxCell.ThreeState = value; }
		|        }
		|		
		|        public int FlatStyle
		|        {
		|            get { return (int)M_DataGridViewCheckBoxCell.FlatStyle; }
		|            set { M_DataGridViewCheckBoxCell.FlatStyle = (System.Windows.Forms.FlatStyle)value; }
		|        }
		|		
		|        public object IndeterminateValue
		|        {
		|            get { return M_DataGridViewCheckBoxCell.IndeterminateValue; }
		|            set { M_DataGridViewCheckBoxCell.IndeterminateValue = value; }
		|        }
		|		
		|        public object FalseValue
		|        {
		|            get { return M_DataGridViewCheckBoxCell.FalseValue; }
		|            set { M_DataGridViewCheckBoxCell.FalseValue = value; }
		|        }
		|		
		|        public object TrueValue
		|        {
		|            get { return M_DataGridViewCheckBoxCell.TrueValue; }
		|            set { M_DataGridViewCheckBoxCell.TrueValue = value; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewCheckBoxCell M_DataGridViewCheckBoxCell
		|        {
		|            get { return m_DataGridViewCheckBoxCell; }
		|            set
		|            {
		|                m_DataGridViewCheckBoxCell = value;
		|                base.M_DataGridViewCell = m_DataGridViewCheckBoxCell;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewCellCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewCellCollection : CollectionBase
		|    {
		|        public ClDataGridViewCellCollection dll_obj;
		|        public System.Windows.Forms.DataGridViewCellCollection M_DataGridViewCellCollection;
		|
		|        public DataGridViewCellCollection()
		|        {
		|        }
		|
		|        public DataGridViewCellCollection(System.Windows.Forms.DataGridViewCellCollection p1)
		|        {
		|            M_DataGridViewCellCollection = p1;
		|            base.List = M_DataGridViewCellCollection;
		|        }
		|
		|        public new object this[int index]
		|        {
		|            get { return M_DataGridViewCellCollection[index]; }
		|        }
		|
		|        public override object Current
		|        {
		|            get { return Enumerator.Current; }
		|        }
		|
		|        public int Add(System.Windows.Forms.DataGridViewCell item)
		|        {
		|            return M_DataGridViewCellCollection.Add(item);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewButtonColumn" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewButtonColumn : DataGridViewColumn
		|    {
		|        public new ClDataGridViewButtonColumn dll_obj;
		|        private System.Windows.Forms.DataGridViewButtonColumn m_DataGridViewButtonColumn;
		|		
		|        public DataGridViewButtonColumn()
		|        {
		|            M_DataGridViewButtonColumn = new System.Windows.Forms.DataGridViewButtonColumn();
		|        }
		|
		|        public DataGridViewButtonColumn(osf.DataGridViewButtonColumn p1)
		|        {
		|            M_DataGridViewButtonColumn = p1.M_DataGridViewButtonColumn;
		|        }
		|
		|        public DataGridViewButtonColumn(System.Windows.Forms.DataGridViewButtonColumn p1)
		|        {
		|            M_DataGridViewButtonColumn = p1;
		|        }
		|
		|        public int FlatStyle
		|        {
		|            get { return (int)M_DataGridViewButtonColumn.FlatStyle; }
		|            set { M_DataGridViewButtonColumn.FlatStyle = (System.Windows.Forms.FlatStyle)value; }
		|        }
		|		
		|        public bool UseColumnTextForButtonValue
		|        {
		|            get { return M_DataGridViewButtonColumn.UseColumnTextForButtonValue; }
		|            set { M_DataGridViewButtonColumn.UseColumnTextForButtonValue = value; }
		|        }
		|
		|        public string Text
		|        {
		|            get { return M_DataGridViewButtonColumn.Text; }
		|            set { M_DataGridViewButtonColumn.Text = value; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewButtonColumn M_DataGridViewButtonColumn
		|        {
		|            get { return m_DataGridViewButtonColumn; }
		|            set
		|            {
		|                m_DataGridViewButtonColumn = value;
		|                base.M_DataGridViewColumn = m_DataGridViewButtonColumn;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewButtonCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewButtonCell : DataGridViewCell
		|    {
		|        public new ClDataGridViewButtonCell dll_obj;
		|        private System.Windows.Forms.DataGridViewButtonCell m_DataGridViewButtonCell;
		|		
		|        public DataGridViewButtonCell()
		|        {
		|            M_DataGridViewButtonCell = new System.Windows.Forms.DataGridViewButtonCell();
		|        }
		|
		|        public DataGridViewButtonCell(System.Windows.Forms.DataGridViewButtonCell p1)
		|        {
		|            M_DataGridViewButtonCell = p1;
		|        }
		|
		|        public System.Windows.Forms.DataGridViewButtonCell M_DataGridViewButtonCell
		|        {
		|            get { return m_DataGridViewButtonCell; }
		|            set
		|            {
		|                m_DataGridViewButtonCell = value;
		|                base.M_DataGridViewCell = m_DataGridViewButtonCell;
		|            }
		|        }
		|
		|        public int FlatStyle
		|        {
		|            get { return (int)M_DataGridViewButtonCell.FlatStyle; }
		|            set { M_DataGridViewButtonCell.FlatStyle = (System.Windows.Forms.FlatStyle)value; }
		|        }
		|		
		|        public bool UseColumnTextForButtonValue
		|        {
		|            get { return M_DataGridViewButtonCell.UseColumnTextForButtonValue; }
		|            set { M_DataGridViewButtonCell.UseColumnTextForButtonValue = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewColumn" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewColumn : DataGridViewBand
		|    {
		|        public new ClDataGridViewColumn dll_obj;
		|        private System.Windows.Forms.DataGridViewColumn m_DataGridViewColumn;
		|		
		|        public DataGridViewColumn()
		|        {
		|            M_DataGridViewColumn = new System.Windows.Forms.DataGridViewColumn();
		|        }
		|
		|        public DataGridViewColumn(osf.DataGridViewColumn p1)
		|        {
		|            M_DataGridViewColumn = p1.M_DataGridViewColumn;
		|        }
		|
		|        public DataGridViewColumn(System.Windows.Forms.DataGridViewColumn p1)
		|        {
		|            M_DataGridViewColumn = p1;
		|        }
		|
		|        public System.Windows.Forms.DataGridViewColumn M_DataGridViewColumn
		|        {
		|            get { return m_DataGridViewColumn; }
		|            set
		|            {
		|                m_DataGridViewColumn = value;
		|                base.M_DataGridViewBand = m_DataGridViewColumn;
		|            }
		|        }
		|
		|        public int SortMode
		|        {
		|            get { return (int)M_DataGridViewColumn.SortMode; }
		|            set { M_DataGridViewColumn.SortMode = (System.Windows.Forms.DataGridViewColumnSortMode)value; }
		|        }
		|
		|        public int Width
		|        {
		|            get { return (int)M_DataGridViewColumn.Width; }
		|            set { M_DataGridViewColumn.Width = value; }
		|        }
		|		
		|        public string DataPropertyName
		|        {
		|            get { return M_DataGridViewColumn.DataPropertyName; }
		|            set { M_DataGridViewColumn.DataPropertyName = value; }
		|        }
		|		
		|        public int DisplayIndex
		|        {
		|            get { return M_DataGridViewColumn.DisplayIndex; }
		|            set { M_DataGridViewColumn.DisplayIndex = value; }
		|        }
		|		
		|        public float FillWeight
		|        {
		|            get { return M_DataGridViewColumn.FillWeight; }
		|            set { M_DataGridViewColumn.FillWeight = value; }
		|        }
		|		
		|        public osf.DataGridViewCellStyle DefaultCellStyle
		|        {
		|            get
		|            {
		|                foreach (System.Collections.DictionaryEntry de in OneScriptForms.hashtable)
		|                {
		|                    if (de.Key.Equals(M_DataGridViewColumn.DefaultCellStyle))
		|                    {
		|                        return ((dynamic)de.Value);
		|                    }
		|                }
		|                return null;
		|            }
		|            set { M_DataGridViewColumn.DefaultCellStyle = value.M_DataGridViewCellStyle; }
		|        }
		|		
		|        public bool Frozen
		|        {
		|            get { return M_DataGridViewColumn.Frozen; }
		|            set { M_DataGridViewColumn.Frozen = value; }
		|        }
		|
		|        public string Name
		|        {
		|            get { return M_DataGridViewColumn.Name; }
		|            set { M_DataGridViewColumn.Name = value; }
		|        }
		|
		|        public int MinimumWidth
		|        {
		|            get { return M_DataGridViewColumn.MinimumWidth; }
		|            set { M_DataGridViewColumn.MinimumWidth = value; }
		|        }
		|
		|        public bool Visible
		|        {
		|            get { return M_DataGridViewColumn.Visible; }
		|            set { M_DataGridViewColumn.Visible = value; }
		|        }
		|
		|        public int AutoSizeMode
		|        {
		|            get { return (int)M_DataGridViewColumn.AutoSizeMode; }
		|            set { M_DataGridViewColumn.AutoSizeMode = (System.Windows.Forms.DataGridViewAutoSizeColumnMode)value; }
		|        }
		|
		|        public string ToolTipText
		|        {
		|            get { return M_DataGridViewColumn.ToolTipText; }
		|            set { M_DataGridViewColumn.ToolTipText = value; }
		|        }
		|
		|        public bool ReadOnly
		|        {
		|            get { return M_DataGridViewColumn.ReadOnly; }
		|            set { M_DataGridViewColumn.ReadOnly = value; }
		|        }
		|
		|        public int DividerWidth
		|        {
		|            get { return M_DataGridViewColumn.DividerWidth; }
		|            set { M_DataGridViewColumn.DividerWidth = value; }
		|        }
		|		
		|        public int Resizable
		|        {
		|            get { return (int)M_DataGridViewColumn.Resizable; }
		|            set { M_DataGridViewColumn.Resizable = (System.Windows.Forms.DataGridViewTriState)value; }
		|        }
		|		
		|        public string HeaderText
		|        {
		|            get { return M_DataGridViewColumn.HeaderText; }
		|            set { M_DataGridViewColumn.HeaderText = value; }
		|        }
		|		
		|        public osf.DataGridViewColumnHeaderCell HeaderCell
		|        {
		|            get { return new DataGridViewColumnHeaderCell(M_DataGridViewColumn.HeaderCell); }
		|            set { M_DataGridViewColumn.HeaderCell = value.M_DataGridViewColumnHeaderCell; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewBand" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewBand : DataGridViewElement
		|    {
		|        private System.Windows.Forms.DataGridViewBand m_DataGridViewBand;
		|
		|        public int Index
		|        {
		|            get { return M_DataGridViewBand.Index; }
		|        }
		|		
		|        public bool Selected
		|        {
		|            get { return M_DataGridViewBand.Selected; }
		|            set { M_DataGridViewBand.Selected = value; }
		|        }
		|
		|        public bool Displayed
		|        {
		|            get { return M_DataGridViewBand.Displayed; }
		|        }
		|		
		|        public object Tag
		|        {
		|            get { return M_DataGridViewBand.Tag; }
		|            set { M_DataGridViewBand.Tag = value; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewBand M_DataGridViewBand
		|        {
		|            get { return m_DataGridViewBand; }
		|            set
		|            {
		|                m_DataGridViewBand = value;
		|                base.M_DataGridViewElement = m_DataGridViewBand;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewColumnCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewColumnCollection : CollectionBase
		|    {
		|        public ClDataGridViewColumnCollection dll_obj;
		|        public System.Windows.Forms.DataGridViewColumnCollection M_DataGridViewColumnCollection;
		|
		|        public DataGridViewColumnCollection()
		|        {
		|        }
		|
		|        public DataGridViewColumnCollection(System.Windows.Forms.DataGridViewColumnCollection p1)
		|        {
		|            M_DataGridViewColumnCollection = p1;
		|            base.List = M_DataGridViewColumnCollection;
		|        }
		|
		|        public new object this[int index]
		|        {
		|            get { return M_DataGridViewColumnCollection[index]; }
		|        }
		|
		|        public override object Current
		|        {
		|            get { return Enumerator.Current; }
		|        }
		|
		|        public int Add(osf.DataGridViewColumn item)
		|        {
		|            return M_DataGridViewColumnCollection.Add(item.M_DataGridViewColumn);
		|        }
		|
		|        public void Insert(int index, osf.DataGridViewColumn item)
		|        {
		|            M_DataGridViewColumnCollection.Insert(index, item.M_DataGridViewColumn);
		|        }
		|
		|        public void Remove(osf.DataGridViewColumn p1)
		|        {
		|            M_DataGridViewColumnCollection.Remove(p1.M_DataGridViewColumn);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewCell : DataGridViewElement
		|    {
		|        public new ClDataGridViewCell dll_obj;
		|        public System.Windows.Forms.DataGridViewCell m_DataGridViewCell;
		|		
		|        public DataGridViewCell()
		|        {
		|        }
		|
		|        public DataGridViewCell(System.Windows.Forms.DataGridViewCell p1)
		|        {
		|            M_DataGridViewCell = p1;
		|        }
		|		
		|        public bool ReadOnly
		|        {
		|            get { return M_DataGridViewCell.ReadOnly; }
		|            set { M_DataGridViewCell.ReadOnly = value; }
		|        }
		|		
		|        public string ToolTipText
		|        {
		|            get { return M_DataGridViewCell.ToolTipText; }
		|            set { M_DataGridViewCell.ToolTipText = value; }
		|        }
		|		
		|        public bool Resizable
		|        {
		|            get { return M_DataGridViewCell.Resizable; }
		|        }
		|		
		|        public int ColumnIndex
		|        {
		|            get { return M_DataGridViewCell.ColumnIndex; }
		|        }
		|		
		|        public int RowIndex
		|        {
		|            get { return M_DataGridViewCell.RowIndex; }
		|        }
		|		
		|        public osf.DataGridViewColumn OwningColumn
		|        {
		|            get { return new DataGridViewColumn(M_DataGridViewCell.OwningColumn); }
		|        }
		|		
		|        public osf.Size PreferredSize
		|        {
		|            get { return new Size(M_DataGridViewCell.PreferredSize); }
		|        }
		|		
		|        public osf.DataGridViewRow OwningRow
		|        {
		|            get { return new DataGridViewRow(M_DataGridViewCell.OwningRow); }
		|        }
		|		
		|        public osf.Size Size
		|        {
		|            get { return new Size(M_DataGridViewCell.Size); }
		|        }
		|		
		|        public object Value
		|        {
		|            get { return M_DataGridViewCell.Value; }
		|            set { M_DataGridViewCell.Value = value; }
		|        }
		|		
		|        public osf.Rectangle ContentBounds
		|        {
		|            get { return new Rectangle(M_DataGridViewCell.ContentBounds); }
		|        }
		|
		|        public bool IsInEditMode
		|        {
		|            get { return M_DataGridViewCell.IsInEditMode; }
		|        }
		|
		|        public bool Frozen
		|        {
		|            get { return M_DataGridViewCell.Frozen; }
		|        }
		|
		|        public bool Displayed
		|        {
		|            get { return M_DataGridViewCell.Displayed; }
		|        }
		|
		|        public bool Visible
		|        {
		|            get { return M_DataGridViewCell.Visible; }
		|        }
		|		
		|        public bool Selected
		|        {
		|            get { return M_DataGridViewCell.Selected; }
		|            set { M_DataGridViewCell.Selected = value; }
		|        }
		|
		|        public osf.DataGridViewCellStyle Style
		|        {
		|            get
		|            {
		|                foreach (System.Collections.DictionaryEntry de in OneScriptForms.hashtable)
		|                {
		|                    if (de.Key.Equals(M_DataGridViewCell.Style))
		|                    {
		|                        return ((dynamic)de.Value);
		|                    }
		|                }
		|                return null;
		|            }
		|            set { M_DataGridViewCell.Style = value.M_DataGridViewCellStyle; }
		|        }
		|
		|        public bool HasStyle
		|        {
		|            get { return M_DataGridViewCell.HasStyle; }
		|        }
		|		
		|        public object FormattedValue
		|        {
		|            get { return M_DataGridViewCell.FormattedValue; }
		|        }
		|
		|        public object EditedFormattedValue
		|        {
		|            get { return M_DataGridViewCell.EditedFormattedValue; }
		|        }
		|
		|        public System.Windows.Forms.DataGridViewCell M_DataGridViewCell
		|        {
		|            get { return m_DataGridViewCell; }
		|            set
		|            {
		|                m_DataGridViewCell = value;
		|                base.M_DataGridViewElement = m_DataGridViewCell;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewElement" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewElement : System.Windows.Forms.DataGridViewElement
		|    {
		|        public ClDataGridViewElement dll_obj;
		|        public System.Windows.Forms.DataGridViewElement M_DataGridViewElement;
		|		
		|        public new osf.DataGridView DataGridView
		|        {
		|            get { return new osf.DataGridView(M_DataGridViewElement.DataGridView); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridView" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewEx : System.Windows.Forms.DataGridView
		|    {
		|        public osf.DataGridView M_Object;
		|    }//endClass
		|
		|    public class DataGridView : Control
		|    {
		|        public string CellBeginEdit;
		|        public string CellClick;
		|        public string CellContentClick;
		|        public string CellDoubleClick;
		|        public string CellEndEdit;
		|        public string CellEnter;
		|        public string CellLeave;
		|        public string CellMouseDown;
		|        public string CellMouseEnter;
		|        public string CellMouseLeave;
		|        public string CellMouseMove;
		|        public string CellMouseUp;
		|        public string CellValueChanged;
		|        public string ColumnHeaderMouseClick;
		|        public string CurrentCellChanged;
		|        public ClDataGridView dll_obj;
		|        public DataGridViewEx M_DataGridView;
		|        public string RowEnter;
		|        public string RowHeaderMouseClick;
		|        public string RowLeave;
		|        public bool ArrowRowHeaders;
		|        public bool AutoNumberingRows;
		|
		|        public DataGridView()
		|        {
		|            M_DataGridView = new DataGridViewEx();
		|            M_DataGridView.M_Object = this;
		|            base.M_Control = M_DataGridView;
		|            M_DataGridView.CellBeginEdit += M_DataGridView_CellBeginEdit;
		|            M_DataGridView.CellClick += M_DataGridView_CellClick;
		|            M_DataGridView.CellContentClick += M_DataGridView_CellContentClick;
		|            M_DataGridView.CellDoubleClick += M_DataGridView_CellDoubleClick;
		|            M_DataGridView.CellEndEdit += M_DataGridView_CellEndEdit;
		|            M_DataGridView.CellEnter += M_DataGridView_CellEnter;
		|            M_DataGridView.CellLeave += M_DataGridView_CellLeave;
		|            M_DataGridView.CellMouseDown += M_DataGridView_CellMouseDown;
		|            M_DataGridView.CellMouseEnter += M_DataGridView_CellMouseEnter;
		|            M_DataGridView.CellMouseLeave += M_DataGridView_CellMouseLeave;
		|            M_DataGridView.CellMouseMove += M_DataGridView_CellMouseMove;
		|            M_DataGridView.CellMouseUp += M_DataGridView_CellMouseUp;
		|            M_DataGridView.CellValueChanged += M_DataGridView_CellValueChanged;
		|            M_DataGridView.ColumnHeaderMouseClick += M_DataGridView_ColumnHeaderMouseClick;
		|            M_DataGridView.CurrentCellChanged += M_DataGridView_CurrentCellChanged;
		|            M_DataGridView.RowEnter += M_DataGridView_RowEnter;
		|            M_DataGridView.RowHeaderMouseClick += M_DataGridView_RowHeaderMouseClick;
		|            M_DataGridView.RowLeave += M_DataGridView_RowLeave;
		|            M_DataGridView.CellFormatting += M_DataGridView_CellFormatting;
		|            M_DataGridView.RowPrePaint += M_DataGridView_RowPrePaint;
		|            M_DataGridView.RowPostPaint += M_DataGridView_RowPostPaint;
		|            M_DataGridView.DataError += M_DataGridView_DataError;
		|            CellBeginEdit = """";
		|            CellClick = """";
		|            CellContentClick = """";
		|            CellDoubleClick = """";
		|            CellEndEdit = """";
		|            CellEnter = """";
		|            CellLeave = """";
		|            CellMouseDown = """";
		|            CellMouseEnter = """";
		|            CellMouseLeave = """";
		|            CellMouseMove = """";
		|            CellMouseUp = """";
		|            CellValueChanged = """";
		|            ColumnHeaderMouseClick = """";
		|            CurrentCellChanged = """";
		|            RowEnter = """";
		|            RowHeaderMouseClick = """";
		|            RowLeave = """";
		|            ArrowRowHeaders = true;
		|            AutoNumberingRows = false;
		|            typeof(System.Windows.Forms.DataGridView).InvokeMember(""DoubleBuffered"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.SetProperty, null, M_DataGridView, new object[] { true });
		|        }
		|
		|        public DataGridView(osf.DataGridView p1)
		|        {
		|            M_DataGridView = p1.M_DataGridView;
		|            M_DataGridView.M_Object = this;
		|            base.M_Control = M_DataGridView;
		|            M_DataGridView.CellBeginEdit += M_DataGridView_CellBeginEdit;
		|            M_DataGridView.CellClick += M_DataGridView_CellClick;
		|            M_DataGridView.CellContentClick += M_DataGridView_CellContentClick;
		|            M_DataGridView.CellDoubleClick += M_DataGridView_CellDoubleClick;
		|            M_DataGridView.CellEndEdit += M_DataGridView_CellEndEdit;
		|            M_DataGridView.CellEnter += M_DataGridView_CellEnter;
		|            M_DataGridView.CellLeave += M_DataGridView_CellLeave;
		|            M_DataGridView.CellMouseDown += M_DataGridView_CellMouseDown;
		|            M_DataGridView.CellMouseEnter += M_DataGridView_CellMouseEnter;
		|            M_DataGridView.CellMouseLeave += M_DataGridView_CellMouseLeave;
		|            M_DataGridView.CellMouseMove += M_DataGridView_CellMouseMove;
		|            M_DataGridView.CellMouseUp += M_DataGridView_CellMouseUp;
		|            M_DataGridView.CellValueChanged += M_DataGridView_CellValueChanged;
		|            M_DataGridView.ColumnHeaderMouseClick += M_DataGridView_ColumnHeaderMouseClick;
		|            M_DataGridView.CurrentCellChanged += M_DataGridView_CurrentCellChanged;
		|            M_DataGridView.RowEnter += M_DataGridView_RowEnter;
		|            M_DataGridView.RowHeaderMouseClick += M_DataGridView_RowHeaderMouseClick;
		|            M_DataGridView.RowLeave += M_DataGridView_RowLeave;
		|            M_DataGridView.CellFormatting += M_DataGridView_CellFormatting;
		|            M_DataGridView.RowPrePaint += M_DataGridView_RowPrePaint;
		|            M_DataGridView.RowPostPaint += M_DataGridView_RowPostPaint;
		|            M_DataGridView.DataError += M_DataGridView_DataError;
		|            CellBeginEdit = """";
		|            CellClick = """";
		|            CellContentClick = """";
		|            CellDoubleClick = """";
		|            CellEndEdit = """";
		|            CellEnter = """";
		|            CellLeave = """";
		|            CellMouseDown = """";
		|            CellMouseEnter = """";
		|            CellMouseLeave = """";
		|            CellMouseMove = """";
		|            CellMouseUp = """";
		|            CellValueChanged = """";
		|            ColumnHeaderMouseClick = """";
		|            CurrentCellChanged = """";
		|            RowEnter = """";
		|            RowHeaderMouseClick = """";
		|            RowLeave = """";
		|            ArrowRowHeaders = true;
		|            AutoNumberingRows = false;
		|            typeof(System.Windows.Forms.DataGridView).InvokeMember(""DoubleBuffered"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.SetProperty, null, M_DataGridView, new object[] { true });
		|        }
		|
		|        public DataGridView(System.Windows.Forms.DataGridView p1)
		|        {
		|            M_DataGridView = (DataGridViewEx)p1;
		|            M_DataGridView.M_Object = this;
		|            base.M_Control = M_DataGridView;
		|            M_DataGridView.CellBeginEdit += M_DataGridView_CellBeginEdit;
		|            M_DataGridView.CellClick += M_DataGridView_CellClick;
		|            M_DataGridView.CellContentClick += M_DataGridView_CellContentClick;
		|            M_DataGridView.CellDoubleClick += M_DataGridView_CellDoubleClick;
		|            M_DataGridView.CellEndEdit += M_DataGridView_CellEndEdit;
		|            M_DataGridView.CellEnter += M_DataGridView_CellEnter;
		|            M_DataGridView.CellLeave += M_DataGridView_CellLeave;
		|            M_DataGridView.CellMouseDown += M_DataGridView_CellMouseDown;
		|            M_DataGridView.CellMouseEnter += M_DataGridView_CellMouseEnter;
		|            M_DataGridView.CellMouseLeave += M_DataGridView_CellMouseLeave;
		|            M_DataGridView.CellMouseMove += M_DataGridView_CellMouseMove;
		|            M_DataGridView.CellMouseUp += M_DataGridView_CellMouseUp;
		|            M_DataGridView.CellValueChanged += M_DataGridView_CellValueChanged;
		|            M_DataGridView.ColumnHeaderMouseClick += M_DataGridView_ColumnHeaderMouseClick;
		|            M_DataGridView.CurrentCellChanged += M_DataGridView_CurrentCellChanged;
		|            M_DataGridView.RowEnter += M_DataGridView_RowEnter;
		|            M_DataGridView.RowHeaderMouseClick += M_DataGridView_RowHeaderMouseClick;
		|            M_DataGridView.RowLeave += M_DataGridView_RowLeave;
		|            M_DataGridView.CellFormatting += M_DataGridView_CellFormatting;
		|            M_DataGridView.RowPrePaint += M_DataGridView_RowPrePaint;
		|            M_DataGridView.RowPostPaint += M_DataGridView_RowPostPaint;
		|            M_DataGridView.DataError += M_DataGridView_DataError;
		|            CellBeginEdit = """";
		|            CellClick = """";
		|            CellContentClick = """";
		|            CellDoubleClick = """";
		|            CellEndEdit = """";
		|            CellEnter = """";
		|            CellLeave = """";
		|            CellMouseDown = """";
		|            CellMouseEnter = """";
		|            CellMouseLeave = """";
		|            CellMouseMove = """";
		|            CellMouseUp = """";
		|            CellValueChanged = """";
		|            ColumnHeaderMouseClick = """";
		|            CurrentCellChanged = """";
		|            RowEnter = """";
		|            RowHeaderMouseClick = """";
		|            RowLeave = """";
		|            ArrowRowHeaders = true;
		|            AutoNumberingRows = false;
		|            typeof(System.Windows.Forms.DataGridView).InvokeMember(""DoubleBuffered"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.SetProperty, null, M_DataGridView, new object[] { true });
		|        }
		|		
		|        private void M_DataGridView_DataError(object sender, DataGridViewDataErrorEventArgs e)
		|        {
		|            if (e.Context.ToString() == ""InitialValueRestoration"")
		|            {
		|                e.ThrowException = false;
		|            }
		|        }
		|		
		|        public int AutoSizeColumnsMode
		|        {
		|            get { return (int)M_DataGridView.AutoSizeColumnsMode; }
		|            set { M_DataGridView.AutoSizeColumnsMode = (System.Windows.Forms.DataGridViewAutoSizeColumnsMode)value; }
		|        }
		|
		|        public int AutoSizeRowsMode
		|        {
		|            get { return (int)M_DataGridView.AutoSizeRowsMode; }
		|            set { M_DataGridView.AutoSizeRowsMode = (System.Windows.Forms.DataGridViewAutoSizeRowsMode)value; }
		|        }
		|
		|        public bool AllowUserToAddRows
		|        {
		|            get { return M_DataGridView.AllowUserToAddRows; }
		|            set { M_DataGridView.AllowUserToAddRows = value; }
		|        }
		|		
		|        public int SelectionMode
		|        {
		|            get { return (int)M_DataGridView.SelectionMode; }
		|            set { M_DataGridView.SelectionMode = (System.Windows.Forms.DataGridViewSelectionMode)value; }
		|        }
		|
		|        public bool AllowUserToResizeColumns
		|        {
		|            get { return M_DataGridView.AllowUserToResizeColumns; }
		|            set { M_DataGridView.AllowUserToResizeColumns = value; }
		|        }
		|
		|        public bool AllowUserToResizeRows
		|        {
		|            get { return M_DataGridView.AllowUserToResizeRows; }
		|            set { M_DataGridView.AllowUserToResizeRows = value; }
		|        }
		|
		|        public bool AutoGenerateColumns
		|        {
		|            get { return M_DataGridView.AutoGenerateColumns; }
		|            set { M_DataGridView.AutoGenerateColumns = value; }
		|        }
		|
		|        public osf.Color BackgroundColor
		|        {
		|            get { return new Color(M_DataGridView.BackgroundColor); }
		|            set
		|            {
		|                M_DataGridView.BackgroundColor = value.M_Color;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int ColumnCount
		|        {
		|            get { return M_DataGridView.ColumnCount; }
		|            set { M_DataGridView.ColumnCount = value; }
		|        }
		|
		|        public osf.DataGridViewCellStyle ColumnHeadersDefaultCellStyle
		|        {
		|            get { return new DataGridViewCellStyle(M_DataGridView.ColumnHeadersDefaultCellStyle); }
		|            set { M_DataGridView.ColumnHeadersDefaultCellStyle = value.M_DataGridViewCellStyle; }
		|        }
		|
		|        public int ColumnHeadersHeight
		|        {
		|            get { return M_DataGridView.ColumnHeadersHeight; }
		|            set { M_DataGridView.ColumnHeadersHeight = value; }
		|        }
		|
		|        public osf.DataGridViewColumnCollection Columns
		|        {
		|            get { return new osf.DataGridViewColumnCollection(M_DataGridView.Columns); }
		|        }
		|
		|        public dynamic CurrentCell
		|        {
		|            get
		|            {
		|                dynamic Obj1 = null;
		|                string str1 = M_DataGridView.CurrentCell.GetType().ToString();
		|                string str2 = str1.Replace(""System.Windows.Forms."", ""osf."");
		|                System.Type Type1 = System.Type.GetType(str2, false, true);
		|                object[] args1 = { M_DataGridView.CurrentCell };
		|                Obj1 = Activator.CreateInstance(Type1, args1);
		|
		|                return Obj1;
		|            }
		|            set { M_DataGridView.CurrentCell = value.M_DataGridViewCell; }
		|        }
		|
		|        public osf.DataGridViewRow CurrentRow
		|        {
		|            get { return new DataGridViewRow(M_DataGridView.CurrentRow); }
		|        }
		|
		|        public string DataMember
		|        {
		|            get { return M_DataGridView.DataMember; }
		|            set { M_DataGridView.DataMember = value; }
		|        }
		|
		|        public object DataSource
		|        {
		|            get
		|            {
		|                if (M_DataGridView.DataSource != null)
		|                {
		|                    if (M_DataGridView.DataSource.GetType() == typeof(System.Data.DataView))
		|                    {
		|                        osf.DataView DataView1 = new osf.DataView((System.Data.DataView)M_DataGridView.DataSource);
		|                        return (dynamic)DataView1;
		|                    }
		|                    else
		|                    {
		|                        return ((dynamic)M_DataGridView.DataSource).M_Object;
		|                    }
		|                }
		|                return null;
		|            }
		|            set
		|            {
		|                if (value != null)
		|                {
		|                    System.Type Type1 = ((dynamic)value).GetType();
		|                    string strType1 = Type1.ToString();
		|                    string str1 = strType1.Substring(strType1.LastIndexOf(""."") + 1);
		|                    M_DataGridView.DataSource = Type1.GetField(""M_"" + str1).GetValue(value);
		|                    System.Windows.Forms.Application.DoEvents();
		|                }
		|                else
		|                {
		|                    M_DataGridView.DataSource = null;
		|                }
		|            }
		|        }
		|
		|        public bool ReadOnly
		|        {
		|            get { return M_DataGridView.ReadOnly; }
		|            set { M_DataGridView.ReadOnly = value; }
		|        }
		|
		|        public int RowCount
		|        {
		|            get { return M_DataGridView.RowCount; }
		|            set { M_DataGridView.RowCount = value; }
		|        }
		|
		|        public osf.DataGridViewCellStyle RowHeadersDefaultCellStyle
		|        {
		|            get { return new DataGridViewCellStyle(M_DataGridView.RowHeadersDefaultCellStyle); }
		|            set { M_DataGridView.RowHeadersDefaultCellStyle = value.M_DataGridViewCellStyle; }
		|        }
		|
		|        public int RowHeadersWidth
		|        {
		|            get { return M_DataGridView.RowHeadersWidth; }
		|            set { M_DataGridView.RowHeadersWidth = value; }
		|        }
		|
		|        public osf.DataGridViewRowCollection Rows
		|        {
		|            get { return new DataGridViewRowCollection(M_DataGridView.Rows); }
		|        }
		|
		|        public int ScrollBars
		|        {
		|            get { return (int)M_DataGridView.ScrollBars; }
		|            set { M_DataGridView.ScrollBars = (System.Windows.Forms.ScrollBars)value; }
		|        }
		|
		|        public int AutoResizeRowHeadersWidth
		|        {
		|            get { return (int)M_DataGridView.RowHeadersWidthSizeMode; }
		|            set { M_DataGridView.RowHeadersWidthSizeMode = (System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode)value; }
		|        }
		|
		|        public bool BeginEdit(bool p1)
		|        {
		|            return M_DataGridView.BeginEdit(p1);
		|        }
		|
		|        public bool EndEdit()
		|        {
		|            return M_DataGridView.EndEdit();
		|        }
		|
		|        private void M_DataGridView_CellBeginEdit(object sender, System.Windows.Forms.DataGridViewCellCancelEventArgs e)
		|        {
		|            if (CellBeginEdit.Length > 0)
		|            {
		|                DataGridViewCellCancelEventArgs DataGridViewCellCancelEventArgs1 = new DataGridViewCellCancelEventArgs();
		|                DataGridViewCellCancelEventArgs1.EventString = CellBeginEdit;
		|                DataGridViewCellCancelEventArgs1.Sender = this;
		|                DataGridViewCellCancelEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellCancelEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellCancelEventArgs1.Cancel = e.Cancel;
		|                DataGridViewCellCancelEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellBeginEdit);
		|                ClDataGridViewCellCancelEventArgs ClDataGridViewCellCancelEventArgs1 = new ClDataGridViewCellCancelEventArgs(DataGridViewCellCancelEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellCancelEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellBeginEdit);
		|                e.Cancel = DataGridViewCellCancelEventArgs1.Cancel;
		|            }
		|        }
		|
		|        private void M_DataGridView_CellClick(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (CellClick.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = CellClick;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellClick);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellClick);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellContentClick(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (CellContentClick.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = CellContentClick;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellContentClick);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellContentClick);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellDoubleClick(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (CellDoubleClick.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = CellDoubleClick;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellDoubleClick);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellDoubleClick);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellEndEdit(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (CellEndEdit.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = CellEndEdit;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellEndEdit);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellEndEdit);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellEnter(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (CellEnter.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = CellEnter;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellEnter);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellEnter);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
		|        {
		|            if (AutoNumberingRows)
		|            {
		|                ((System.Windows.Forms.DataGridView)sender).Rows[e.RowIndex].HeaderCell.Value = Convert.ToString(e.RowIndex + 1);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellLeave(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (CellLeave.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = CellLeave;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellLeave);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellLeave);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellMouseDown(object sender, System.Windows.Forms.DataGridViewCellMouseEventArgs e)
		|        {
		|            if (CellMouseDown.Length > 0)
		|            {
		|                DataGridViewCellMouseEventArgs DataGridViewCellMouseEventArgs1 = new DataGridViewCellMouseEventArgs();
		|                DataGridViewCellMouseEventArgs1.EventString = CellMouseDown;
		|                DataGridViewCellMouseEventArgs1.Sender = this;
		|                DataGridViewCellMouseEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellMouseEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellMouseEventArgs1.Button = (int)e.Button;
		|                DataGridViewCellMouseEventArgs1.Clicks = e.Clicks;
		|                DataGridViewCellMouseEventArgs1.X = e.X;
		|                DataGridViewCellMouseEventArgs1.Y = e.Y;
		|                DataGridViewCellMouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellMouseDown);
		|                ClDataGridViewCellMouseEventArgs ClDataGridViewCellMouseEventArgs1 = new ClDataGridViewCellMouseEventArgs(DataGridViewCellMouseEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellMouseDown);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellMouseEnter(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (CellMouseEnter.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = CellMouseEnter;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellMouseEnter);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellMouseEnter);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellMouseLeave(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (CellMouseLeave.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = CellMouseLeave;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellMouseLeave);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellMouseLeave);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellMouseMove(object sender, System.Windows.Forms.DataGridViewCellMouseEventArgs e)
		|        {
		|            if (CellMouseMove.Length > 0)
		|            {
		|                DataGridViewCellMouseEventArgs DataGridViewCellMouseEventArgs1 = new DataGridViewCellMouseEventArgs();
		|                DataGridViewCellMouseEventArgs1.EventString = CellMouseMove;
		|                DataGridViewCellMouseEventArgs1.Sender = this;
		|                DataGridViewCellMouseEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellMouseEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellMouseEventArgs1.Button = (int)e.Button;
		|                DataGridViewCellMouseEventArgs1.Clicks = e.Clicks;
		|                DataGridViewCellMouseEventArgs1.X = e.X;
		|                DataGridViewCellMouseEventArgs1.Y = e.Y;
		|                DataGridViewCellMouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellMouseMove);
		|                ClDataGridViewCellMouseEventArgs ClDataGridViewCellMouseEventArgs1 = new ClDataGridViewCellMouseEventArgs(DataGridViewCellMouseEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellMouseMove);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellMouseUp(object sender, System.Windows.Forms.DataGridViewCellMouseEventArgs e)
		|        {
		|            if (CellMouseUp.Length > 0)
		|            {
		|                DataGridViewCellMouseEventArgs DataGridViewCellMouseEventArgs1 = new DataGridViewCellMouseEventArgs();
		|                DataGridViewCellMouseEventArgs1.EventString = CellMouseUp;
		|                DataGridViewCellMouseEventArgs1.Sender = this;
		|                DataGridViewCellMouseEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellMouseEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellMouseEventArgs1.Button = (int)e.Button;
		|                DataGridViewCellMouseEventArgs1.Clicks = e.Clicks;
		|                DataGridViewCellMouseEventArgs1.X = e.X;
		|                DataGridViewCellMouseEventArgs1.Y = e.Y;
		|                DataGridViewCellMouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellMouseUp);
		|                ClDataGridViewCellMouseEventArgs ClDataGridViewCellMouseEventArgs1 = new ClDataGridViewCellMouseEventArgs(DataGridViewCellMouseEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellMouseUp);
		|            }
		|        }
		|
		|        private void M_DataGridView_CellValueChanged(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (CellValueChanged.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = CellValueChanged;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CellValueChanged);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CellValueChanged);
		|            }
		|        }
		|
		|        private void M_DataGridView_ColumnHeaderMouseClick(object sender, System.Windows.Forms.DataGridViewCellMouseEventArgs e)
		|        {
		|            if (ColumnHeaderMouseClick.Length > 0)
		|            {
		|                DataGridViewCellMouseEventArgs DataGridViewCellMouseEventArgs1 = new DataGridViewCellMouseEventArgs();
		|                DataGridViewCellMouseEventArgs1.EventString = ColumnHeaderMouseClick;
		|                DataGridViewCellMouseEventArgs1.Sender = this;
		|                DataGridViewCellMouseEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellMouseEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellMouseEventArgs1.Button = (int)e.Button;
		|                DataGridViewCellMouseEventArgs1.Clicks = e.Clicks;
		|                DataGridViewCellMouseEventArgs1.X = e.X;
		|                DataGridViewCellMouseEventArgs1.Y = e.Y;
		|                DataGridViewCellMouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.ColumnHeaderMouseClick);
		|                ClDataGridViewCellMouseEventArgs ClDataGridViewCellMouseEventArgs1 = new ClDataGridViewCellMouseEventArgs(DataGridViewCellMouseEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.ColumnHeaderMouseClick);
		|            }
		|        }
		|
		|        public void M_DataGridView_CurrentCellChanged(object sender, System.EventArgs e)
		|        {
		|            if (CurrentCellChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = CurrentCellChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CurrentCellChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CurrentCellChanged);
		|            }
		|        }
		|
		|        private void M_DataGridView_RowEnter(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (RowEnter.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = RowEnter;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.RowEnter);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.RowEnter);
		|            }
		|        }
		|
		|        private void M_DataGridView_RowHeaderMouseClick(object sender, System.Windows.Forms.DataGridViewCellMouseEventArgs e)
		|        {
		|            if (RowHeaderMouseClick.Length > 0)
		|            {
		|                DataGridViewCellMouseEventArgs DataGridViewCellMouseEventArgs1 = new DataGridViewCellMouseEventArgs();
		|                DataGridViewCellMouseEventArgs1.EventString = RowHeaderMouseClick;
		|                DataGridViewCellMouseEventArgs1.Sender = this;
		|                DataGridViewCellMouseEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellMouseEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellMouseEventArgs1.Button = (int)e.Button;
		|                DataGridViewCellMouseEventArgs1.Clicks = e.Clicks;
		|                DataGridViewCellMouseEventArgs1.X = e.X;
		|                DataGridViewCellMouseEventArgs1.Y = e.Y;
		|                DataGridViewCellMouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.RowHeaderMouseClick);
		|                ClDataGridViewCellMouseEventArgs ClDataGridViewCellMouseEventArgs1 = new ClDataGridViewCellMouseEventArgs(DataGridViewCellMouseEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.RowHeaderMouseClick);
		|            }
		|        }
		|
		|        private void M_DataGridView_RowLeave(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
		|        {
		|            if (RowLeave.Length > 0)
		|            {
		|                DataGridViewCellEventArgs DataGridViewCellEventArgs1 = new DataGridViewCellEventArgs();
		|                DataGridViewCellEventArgs1.EventString = RowLeave;
		|                DataGridViewCellEventArgs1.Sender = this;
		|                DataGridViewCellEventArgs1.ColumnIndex = e.ColumnIndex;
		|                DataGridViewCellEventArgs1.RowIndex = e.RowIndex;
		|                DataGridViewCellEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.RowLeave);
		|                ClDataGridViewCellEventArgs ClDataGridViewCellEventArgs1 = new ClDataGridViewCellEventArgs(DataGridViewCellEventArgs1);
		|                OneScriptForms.Event = ClDataGridViewCellEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.RowLeave);
		|            }
		|        }
		|
		|        private void M_DataGridView_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
		|        {
		|            if (!ArrowRowHeaders)
		|            {
		|                object o = M_DataGridView.Rows[e.RowIndex].HeaderCell.Value;
		|                string str1 = """";
		|                if (o != null)
		|                {
		|                    str1 = o.ToString();
		|                }
		|                e.Graphics.DrawString(
		|                    str1,
		|                    M_DataGridView.Font,
		|                    new SolidBrush(M_DataGridView.RowHeadersDefaultCellStyle.ForeColor),
		|                    new System.Drawing.PointF((float)e.RowBounds.Left + 5, (float)e.RowBounds.Top + 2));
		|            }
		|        }
		|
		|        private void M_DataGridView_RowPrePaint(object sender, DataGridViewRowPrePaintEventArgs e)
		|        {
		|            if (!ArrowRowHeaders)
		|            {
		|                int x = e.ClipBounds.X;
		|                int y = e.ClipBounds.Y;
		|                int w = e.ClipBounds.Width;
		|                int h = e.ClipBounds.Height;
		|                System.Drawing.Rectangle Rectangle1 = new System.Drawing.Rectangle(x, y, w, h);
		|                e.ClipBounds = Rectangle1;
		|                e.PaintCells(Rectangle1, DataGridViewPaintParts.All);
		|                e.PaintHeader(DataGridViewPaintParts.Background
		|                    | DataGridViewPaintParts.Border
		|                    | DataGridViewPaintParts.Focus
		|                    | DataGridViewPaintParts.SelectionBackground
		|                    | DataGridViewPaintParts.ContentForeground);
		|                e.Handled = true;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "FormsCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class FormsCollection : AutoContext<FormsCollection>, ICollectionContext, IEnumerable<ClForm>
		|    {
		|        private List<ClForm> _list;
		|
		|        internal FormsCollection()
		|        {
		|            _list = new List<ClForm>();
		|        }
		|
		|        public void Add(ClForm form)
		|        {
		|            _list.Add(form);
		|        }
		|
		|        public bool Remove(ClForm form)
		|        {
		|            return _list.Remove(form);
		|        }
		|
		|        [ContextMethod(""Получить"", ""Get"")]
		|        public ClForm Get(int index)
		|        {
		|            return this._list[index];
		|        }
		|
		|        [ContextProperty(""Количество"", ""Count"")]
		|        public int CountForm
		|        {
		|            get { return _list.Count; }
		|        }
		|
		|        public int Count()
		|        {
		|            return CountForm;
		|        }
		|
		|        public CollectionEnumerator GetManagedIterator()
		|        {
		|            return new CollectionEnumerator(this);
		|        }
		|
		|        IEnumerator IEnumerable.GetEnumerator()
		|        {
		|            return ((IEnumerable<ClForm>)_list).GetEnumerator();
		|        }
		|
		|        IEnumerator<ClForm> IEnumerable<ClForm>.GetEnumerator()
		|        {
		|            foreach (var item in _list)
		|            {
		|                yield return (item as ClForm);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Screen" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Screen
		|    {
		|        public ClScreen dll_obj;
		|        public System.Windows.Forms.Screen M_Screen;
		|
		|        public Screen()
		|        {
		|            M_Screen = System.Windows.Forms.Screen.PrimaryScreen;
		|        }
		|
		|        public Screen(osf.Screen p1)
		|        {
		|            M_Screen = p1.M_Screen;
		|        }
		|
		|        public Screen(System.Windows.Forms.Screen p1)
		|        {
		|            M_Screen = p1;
		|        }
		|
		|        public osf.Rectangle Bounds
		|        {
		|            get { return new osf.Rectangle(M_Screen.Bounds); }
		|        }
		|
		|        public osf.Screen PrimaryScreen
		|        {
		|            get { return new osf.Screen(System.Windows.Forms.Screen.PrimaryScreen); }
		|        }
		|
		|        public osf.Rectangle WorkingArea
		|        {
		|            get { return new osf.Rectangle(M_Screen.WorkingArea); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "HashTable" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class HashTable : IEnumerable, IEnumerator
		|    {
		|        public ClHashTable dll_obj;
		|        public System.Collections.Hashtable M_HashTable;
		|        public System.Collections.IEnumerator Enumerator;
		|
		|        public HashTable()
		|        {
		|            M_HashTable = new System.Collections.Hashtable();
		|            OneScriptForms.AddToHashtable(M_HashTable, this);
		|        }
		|
		|        public HashTable(osf.HashTable p1)
		|        {
		|            M_HashTable = p1.M_HashTable;
		|            OneScriptForms.AddToHashtable(M_HashTable, this);
		|        }
		|
		|        public HashTable(System.Collections.Hashtable p1)
		|        {
		|            M_HashTable = p1;
		|            OneScriptForms.AddToHashtable(M_HashTable, this);
		|        }
		|
		|        public void Add(object key, object value)
		|        {
		|            M_HashTable.Add(key, value);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void Clear()
		|        {
		|            M_HashTable.Clear();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_HashTable.Count; }
		|        }
		|
		|        public object get_Item(object key)
		|        {
		|            return M_HashTable[key];
		|        }
		|
		|        public void set_Item(object key, object value)
		|        {
		|            M_HashTable[key] = value;
		|        }
		|
		|        public void Remove(object key)
		|        {
		|            M_HashTable.Remove(key);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void Set(object key, object value)
		|        {
		|            M_HashTable[key] = value;
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public IEnumerator GetEnumerator()
		|        {
		|            Enumerator = M_HashTable.GetEnumerator();
		|            return (System.Collections.IEnumerator)this;
		|        }
		|
		|        public object Current
		|        {
		|            get { return Enumerator.Current; }
		|        }
		|
		|        public bool MoveNext()
		|        {
		|            return Enumerator.MoveNext();
		|        }
		|
		|        public void Reset()
		|        {
		|            Enumerator.Reset();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "CheckBox" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class CheckBoxEx : System.Windows.Forms.CheckBox
		|    {
		|        public osf.CheckBox M_Object;
		|    }//endClass
		|
		|    public class CheckBox : ButtonBase
		|    {
		|        public ClCheckBox dll_obj;
		|        private CheckBoxEx m_CheckBox;
		|        public string CheckChanged;
		|
		|        public CheckBoxEx M_CheckBox
		|        {
		|            get { return m_CheckBox; }
		|            set
		|            {
		|                m_CheckBox = value;
		|                m_CheckBox.CheckedChanged += M_CheckBox_CheckedChanged;
		|            }
		|        }
		|
		|        public CheckBox()
		|        {
		|            M_CheckBox = new CheckBoxEx();
		|            M_CheckBox.M_Object = this;
		|            base.M_ButtonBase = M_CheckBox;
		|            CheckChanged = """";
		|        }
		|
		|        public CheckBox(osf.CheckBox p1)
		|        {
		|            M_CheckBox = p1.M_CheckBox;
		|            M_CheckBox.M_Object = this;
		|            base.M_ButtonBase = M_CheckBox;
		|            CheckChanged = """";
		|        }
		|
		|        public CheckBox(System.Windows.Forms.CheckBox p1)
		|        {
		|            M_CheckBox = (CheckBoxEx)p1;
		|            M_CheckBox.M_Object = this;
		|            base.M_ButtonBase = M_CheckBox;
		|            CheckChanged = """";
		|        }
		|
		|        public int Appearance
		|        {
		|            get { return (int)M_CheckBox.Appearance; }
		|            set { M_CheckBox.Appearance = (System.Windows.Forms.Appearance)value; }
		|        }
		|
		|        public bool AutoCheck
		|        {
		|            get { return M_CheckBox.AutoCheck; }
		|            set { M_CheckBox.AutoCheck = value; }
		|        }
		|
		|        public int CheckAlign
		|        {
		|            get { return (int)M_CheckBox.CheckAlign; }
		|            set { M_CheckBox.CheckAlign = (System.Drawing.ContentAlignment)value; }
		|        }
		|
		|        public bool Checked
		|        {
		|            get { return M_CheckBox.Checked; }
		|            set { M_CheckBox.Checked = value; }
		|        }
		|
		|        public int CheckState
		|        {
		|            get { return (int)M_CheckBox.CheckState; }
		|            set { M_CheckBox.CheckState = (System.Windows.Forms.CheckState)value; }
		|        }
		|
		|        public void M_CheckBox_CheckedChanged(object sender, System.EventArgs e)
		|        {
		|            if (CheckChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = CheckChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CheckChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CheckChanged);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridComboBoxColumnStyle" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    // Переопределим методы
		|    // Первый из них - Edit. Он вызывается, когда ячейка должна перейти в режим редактирования.
		|    // Второй - метод Paint, здесь изменяется внешний вид ячейки.
		|    // Третий - метод Commit. Он вызывается при завершении редактирования, когда значение необходимо сохранить
		|    // в источнике данных. В этом методе обнуляются поля, заполняемые в перегруженной версии метода Edit. 
		|    public class DataGridComboBoxColumn : System.Windows.Forms.DataGridTextBoxColumn
		|    {
		|        private bool _readOnly;
		|        public ClDataGridComboBoxColumnStyle dll_obj;
		|        public System.Windows.Forms.ComboBox ColumnComboBox;
		|        public ClComboBox comboBox;
		|        private System.Windows.Forms.CurrencyManager _source;
		|        private int _rowNum;
		|        private bool _isEditing;
		|        public static int _RowCount;
		|
		|        public DataGridComboBoxColumn() : base()
		|        {
		|            _source = null;
		|            _isEditing = false;
		|            _RowCount = -1;
		|            osf.NoKeyUpComboBoxEx NoKeyUpComboEx1 = new osf.NoKeyUpComboBoxEx();
		|            comboBox = new ClComboBox(NoKeyUpComboEx1);
		|            ColumnComboBox = (System.Windows.Forms.ComboBox)NoKeyUpComboEx1;
		|            ColumnComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
		|            ColumnComboBox.Leave += ColumnComboBox_Leave;
		|            ColumnComboBox.SelectionChangeCommitted += ColumnComboBox_SelectionChangeCommitted;
		|            _readOnly = false;
		|        }
		|
		|        public override bool ReadOnly
		|        {
		|            get { return _readOnly; }
		|            set { _readOnly = value; }
		|        }
		|
		|        private void ColumnComboBox_SelectionChangeCommitted(object sender, System.EventArgs e)
		|        {
		|            _isEditing = true;
		|            base.ColumnStartedEditing((System.Windows.Forms.Control)sender);
		|        }
		|
		|        private void ColumnComboBox_Leave(object sender, System.EventArgs e)
		|        {
		|            if (_isEditing)
		|            {
		|                try
		|                {
		|                    SetColumnValueAtRow(_source, _rowNum, ColumnComboBox.Text);
		|                    _isEditing = false;
		|                    Invalidate();
		|                }
		|                catch { }
		|            }
		|            ColumnComboBox.Hide();
		|            this.DataGridTableStyle.DataGrid.Scroll -= DataGrid_Scroll;
		|        }
		|
		|        private void DataGrid_Scroll(object sender, System.EventArgs e)
		|        {
		|            if (ColumnComboBox.Visible)
		|            {
		|                ColumnComboBox.Hide();
		|            }
		|        }
		|
		|        public ClComboBox ComboBox
		|        {
		|            get { return comboBox; }
		|        }
		|
		|        protected override void Edit(
		|            CurrencyManager source,
		|            int rowNum,
		|            System.Drawing.Rectangle bounds,
		|            bool readOnly,
		|            string instantText,
		|            bool cellIsVisible)
		|        {
		|            if (!_readOnly)
		|            {
		|                base.Edit(source, rowNum, bounds, readOnly, instantText, cellIsVisible);
		|                _rowNum = rowNum;
		|                _source = source;
		|                ColumnComboBox.Parent = this.TextBox.Parent;
		|                ColumnComboBox.Location = new System.Drawing.Point(this.TextBox.Location.X - 2, this.TextBox.Location.Y - 2);
		|                ColumnComboBox.Size = new System.Drawing.Size(this.TextBox.Size.Width, ColumnComboBox.Size.Height);
		|                ColumnComboBox.SelectedIndex = ColumnComboBox.FindStringExact(this.TextBox.Text);
		|                ColumnComboBox.Text = this.TextBox.Text;
		|                this.TextBox.Visible = false;
		|                ColumnComboBox.Visible = true;
		|                this.DataGridTableStyle.DataGrid.Scroll += DataGrid_Scroll;
		|
		|                ColumnComboBox.BringToFront();
		|                ColumnComboBox.Focus();
		|            }
		|        }
		|
		|        protected override bool Commit(CurrencyManager dataSource, int rowNum)
		|        {
		|            if (_isEditing)
		|            {
		|                _isEditing = false;
		|                SetColumnValueAtRow(dataSource, rowNum, ColumnComboBox.Text);
		|            }
		|            return true;
		|        }
		|
		|        protected override void ConcedeFocus()
		|        {
		|            base.ConcedeFocus();
		|        }
		|
		|        protected override object GetColumnValueAtRow(CurrencyManager source, int rowNum)
		|        {
		|            object s = base.GetColumnValueAtRow(source, rowNum);
		|            System.Data.DataView dv = (System.Data.DataView)((System.Data.DataTable)this.ColumnComboBox.DataSource).DefaultView;
		|            int rowCount = dv.Count;
		|            int i = 0;
		|            while (i < rowCount)
		|            {
		|                if (s.Equals(dv[i][this.ComboBox.Base_obj.ValueMember]))
		|                {
		|                    break;
		|                }
		|                ++i;
		|            }
		|
		|            if (i < rowCount)
		|            {
		|                return dv[i][this.ComboBox.Base_obj.DisplayMember];
		|            }
		|            return DBNull.Value;
		|        }
		|
		|        protected override void SetColumnValueAtRow(CurrencyManager source, int rowNum, object value)
		|        {
		|            object s = value;
		|            System.Data.DataView dv = (System.Data.DataView)((System.Data.DataTable)this.ColumnComboBox.DataSource).DefaultView;
		|            int rowCount = dv.Count;
		|            int i = 0;
		|            while (i < rowCount)
		|            {
		|                if (s.Equals(dv[i][this.ComboBox.Base_obj.DisplayMember]))
		|                {
		|                    break;
		|                }
		|                ++i;
		|            }
		|            if (i < rowCount)
		|            {
		|                s = dv[i][this.ComboBox.Base_obj.ValueMember];
		|            }
		|            else
		|                s = DBNull.Value;
		|            try
		|            {
		|                base.SetColumnValueAtRow(source, rowNum, s);
		|            }
		|            catch { }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "RichTextBox" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class RichTextBoxEx : System.Windows.Forms.RichTextBox
		|    {
		|        public osf.RichTextBox M_Object;
		|    }//endClass
		|
		|    public class RichTextBox : TextBoxBase
		|    {
		|        public ClRichTextBox dll_obj;
		|        private RichTextBoxEx m_RichTextBox;
		|        public string LinkClicked;
		|        public string SelectionChanged;
		|
		|        [DllImport(""user32"", EntryPoint = ""SendMessageA"", CharSet = CharSet.Auto, SetLastError = true)] private static extern new bool SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);
		|
		|        public RichTextBoxEx M_RichTextBox
		|        {
		|            get { return m_RichTextBox; }
		|            set
		|            {
		|                m_RichTextBox = value;
		|                m_RichTextBox.SelectionChanged += M_RichTextBox_SelectionChanged;
		|                m_RichTextBox.LinkClicked += M_RichTextBox_LinkClicked;
		|            }
		|        }
		|
		|        public RichTextBox()
		|        {
		|            M_RichTextBox = new RichTextBoxEx();
		|            M_RichTextBox.M_Object = this;
		|            base.M_TextBoxBase = M_RichTextBox;
		|            LinkClicked = """";
		|            SelectionChanged = """";
		|        }
		|
		|        public RichTextBox(osf.RichTextBox p1)
		|        {
		|            M_RichTextBox = p1.M_RichTextBox;
		|            M_RichTextBox.M_Object = this;
		|            base.M_TextBoxBase = M_RichTextBox;
		|            LinkClicked = """";
		|            SelectionChanged = """";
		|        }
		|
		|        public RichTextBox(System.Windows.Forms.RichTextBox p1)
		|        {
		|            M_RichTextBox = (RichTextBoxEx)p1;
		|            M_RichTextBox.M_Object = this;
		|            base.M_TextBoxBase = M_RichTextBox;
		|            LinkClicked = """";
		|            SelectionChanged = """";
		|        }
		|
		|        public bool AutoWordSelection
		|        {
		|            get { return M_RichTextBox.AutoWordSelection; }
		|            set { M_RichTextBox.AutoWordSelection = value; }
		|        }
		|
		|        public override void BeginUpdate()
		|        {
		|            RichTextBox.SendMessage(M_RichTextBox.Handle, 11, 0, 0);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public override void EndUpdate()
		|        {
		|            RichTextBox.SendMessage(M_RichTextBox.Handle, 11, -1, 0);
		|            M_RichTextBox.Invalidate();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public int GetCharIndexFromPosition(osf.Point pt)
		|        {
		|            return M_RichTextBox.GetCharIndexFromPosition(pt.M_Point);
		|        }
		|
		|        public int BulletIndent
		|        {
		|            get { return M_RichTextBox.BulletIndent; }
		|            set { M_RichTextBox.BulletIndent = value; }
		|        }
		|
		|        public bool CanPaste()
		|        {
		|            return M_RichTextBox.CanPaste(System.Windows.Forms.DataFormats.GetFormat(System.Windows.Forms.DataFormats.Text));
		|        }
		|
		|        public bool CanRedo
		|        {
		|            get { return M_RichTextBox.CanRedo; }
		|        }
		|
		|        public bool DetectUrls
		|        {
		|            get { return M_RichTextBox.DetectUrls; }
		|            set { M_RichTextBox.DetectUrls = value; }
		|        }
		|
		|        public int Find(string str, int start = 0, System.Windows.Forms.RichTextBoxFinds options = System.Windows.Forms.RichTextBoxFinds.None)
		|        {
		|            return M_RichTextBox.Find(str, start, (System.Windows.Forms.RichTextBoxFinds)options);
		|        }
		|
		|        public int GetLineFromCharIndex(int index)
		|        {
		|            return M_RichTextBox.GetLineFromCharIndex(index);
		|        }
		|
		|        public void LoadFile(string path, System.Windows.Forms.RichTextBoxStreamType fileType = System.Windows.Forms.RichTextBoxStreamType.RichText)
		|        {
		|            M_RichTextBox.LoadFile(path, (System.Windows.Forms.RichTextBoxStreamType)fileType);
		|        }
		|
		|        public void Redo()
		|        {
		|            M_RichTextBox.Redo();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public int RightMargin
		|        {
		|            get { return M_RichTextBox.RightMargin; }
		|            set { M_RichTextBox.RightMargin = value; }
		|        }
		|
		|        public string Rtf
		|        {
		|            get { return M_RichTextBox.Rtf; }
		|            set { M_RichTextBox.Rtf = value; }
		|        }
		|
		|        public void SaveFile(string path, System.Windows.Forms.RichTextBoxStreamType fileType = System.Windows.Forms.RichTextBoxStreamType.RichText)
		|        {
		|            M_RichTextBox.SaveFile(path, (System.Windows.Forms.RichTextBoxStreamType)fileType);
		|        }
		|
		|        public int ScrollBars
		|        {
		|            get { return (int)M_RichTextBox.ScrollBars; }
		|            set { M_RichTextBox.ScrollBars = (System.Windows.Forms.RichTextBoxScrollBars)value; }
		|        }
		|
		|        public osf.Color SelectionBackColor
		|        {
		|            get { return new Color(M_RichTextBox.SelectionBackColor); }
		|            set { M_RichTextBox.SelectionBackColor = value.M_Color; }
		|        }
		|
		|        public osf.Color SelectionColor
		|        {
		|            get { return new Color(M_RichTextBox.SelectionColor); }
		|            set { M_RichTextBox.SelectionColor = value.M_Color; }
		|        }
		|
		|        public osf.Font SelectionFont
		|        {
		|            get { return new Font(M_RichTextBox.SelectionFont);            }
		|            set { M_RichTextBox.SelectionFont = (System.Drawing.Font)value.M_Font;            }
		|        }
		|
		|        public int SelectionIndent
		|        {
		|            get { return M_RichTextBox.SelectionIndent; }
		|            set { M_RichTextBox.SelectionIndent = value; }
		|        }
		|
		|        public int[] SelectionTabs
		|        {
		|            get { return M_RichTextBox.SelectionTabs; }
		|            set { M_RichTextBox.SelectionTabs = value; }
		|        }
		|
		|        public float ZoomFactor
		|        {
		|            get { return M_RichTextBox.ZoomFactor; }
		|            set { M_RichTextBox.ZoomFactor = value; }
		|        }
		|
		|        public void M_RichTextBox_LinkClicked(object sender, System.Windows.Forms.LinkClickedEventArgs e)
		|        {
		|            if (LinkClicked.Length > 0)
		|            {
		|                LinkClickedEventArgs LinkClickedEventArgs1 = new LinkClickedEventArgs();
		|                LinkClickedEventArgs1.EventString = LinkClicked;
		|                LinkClickedEventArgs1.Sender = this;
		|                LinkClickedEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.LinkClicked);
		|                LinkClickedEventArgs1.LinkText = e.LinkText;
		|                ClLinkClickedEventArgs ClLinkClickedEventArgs1 = new ClLinkClickedEventArgs(LinkClickedEventArgs1);
		|                OneScriptForms.Event = ClLinkClickedEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.LinkClicked);
		|            }
		|        }
		|
		|        public void M_RichTextBox_SelectionChanged(object sender, System.EventArgs e)
		|        {
		|            if (SelectionChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = SelectionChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.SelectionChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.SelectionChanged);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "BitmapData" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class BitmapData
		|    {
		|        public ClBitmapData dll_obj;
		|        public System.Drawing.Imaging.BitmapData M_BitmapData;
		|
		|        public BitmapData(osf.BitmapData p1)
		|        {
		|            M_BitmapData = p1.M_BitmapData;
		|            OneScriptForms.AddToHashtable(M_BitmapData, this);
		|        }
		|
		|        public BitmapData(System.Drawing.Imaging.BitmapData p1)
		|        {
		|            M_BitmapData = p1;
		|            OneScriptForms.AddToHashtable(M_BitmapData, this);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridBoolColumn" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridBoolColumnEx : System.Windows.Forms.DataGridBoolColumn
		|    {
		|        public osf.DataGridBoolColumn M_Object;
		|    }//endClass
		|
		|    public class DataGridBoolColumn : DataGridColumnStyle
		|    {
		|        public ClDataGridBoolColumn dll_obj;
		|        public DataGridBoolColumnEx M_DataGridBoolColumn;
		|
		|        public DataGridBoolColumn()
		|        {
		|            M_DataGridBoolColumn = new DataGridBoolColumnEx();
		|            M_DataGridBoolColumn.M_Object = this;
		|            base.M_DataGridColumnStyle = M_DataGridBoolColumn;
		|        }
		|
		|        public DataGridBoolColumn(osf.DataGridBoolColumn p1)
		|        {
		|            M_DataGridBoolColumn = p1.M_DataGridBoolColumn;
		|            M_DataGridBoolColumn.M_Object = this;
		|            base.M_DataGridColumnStyle = M_DataGridBoolColumn;
		|        }
		|
		|        public DataGridBoolColumn(System.Windows.Forms.DataGridBoolColumn p1)
		|        {
		|            M_DataGridBoolColumn = (DataGridBoolColumnEx)p1;
		|            M_DataGridBoolColumn.M_Object = this;
		|            base.M_DataGridColumnStyle = M_DataGridBoolColumn;
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "UpDownBase" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class UpDownBase : ContainerControl
		|    {
		|        private System.Windows.Forms.UpDownBase m_UpDownBase;
		|
		|        public System.Windows.Forms.UpDownBase M_UpDownBase
		|        {
		|            get { return m_UpDownBase; }
		|            set
		|            {
		|                m_UpDownBase = value;
		|                base.M_ContainerControl = m_UpDownBase;
		|            }
		|        }
		|
		|        public UpDownBase()
		|        {
		|        }
		|
		|        public UpDownBase(osf.UpDownBase p1)
		|        {
		|            M_UpDownBase = p1.M_UpDownBase;
		|            base.M_ContainerControl = M_UpDownBase;
		|        }
		|
		|        public UpDownBase(System.Windows.Forms.UpDownBase p1)
		|        {
		|            M_UpDownBase = p1;
		|            base.M_ContainerControl = M_UpDownBase;
		|        }
		|
		|        public int BorderStyle
		|        {
		|            get { return (int)M_UpDownBase.BorderStyle; }
		|            set
		|            {
		|                M_UpDownBase.BorderStyle = (System.Windows.Forms.BorderStyle)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool ReadOnly
		|        {
		|            get { return M_UpDownBase.ReadOnly; }
		|            set
		|            {
		|                M_UpDownBase.ReadOnly = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "NumericUpDown" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class NumericUpDownEx : System.Windows.Forms.NumericUpDown
		|    {
		|        public object M_Object;
		|    }//endClass
		|
		|    public class NumericUpDown : UpDownBase
		|    {
		|        public ClNumericUpDown dll_obj;
		|        public string ValueChanged;
		|        private NumericUpDownEx m_NumericUpDown;
		|
		|        public NumericUpDownEx M_NumericUpDown
		|        {
		|            get { return m_NumericUpDown; }
		|            set
		|            {
		|                m_NumericUpDown = value;
		|                m_NumericUpDown.ValueChanged += M_NumericUpDown_ValueChanged;
		|            }
		|        }
		|
		|        public NumericUpDown()
		|        {
		|            M_NumericUpDown = new NumericUpDownEx();
		|            M_NumericUpDown.M_Object = this;
		|            base.M_UpDownBase = M_NumericUpDown;
		|            ValueChanged = """";
		|        }
		|
		|        public NumericUpDown(osf.NumericUpDown p1)
		|        {
		|            M_NumericUpDown = p1.M_NumericUpDown;
		|            M_NumericUpDown.M_Object = this;
		|            base.M_UpDownBase = M_NumericUpDown;
		|            ValueChanged = """";
		|        }
		|
		|        public NumericUpDown(System.Windows.Forms.NumericUpDown p1)
		|        {
		|            M_NumericUpDown = (NumericUpDownEx)p1;
		|            M_NumericUpDown.M_Object = this;
		|            base.M_UpDownBase = M_NumericUpDown;
		|            ValueChanged = """";
		|        }
		|
		|        public int DecimalPlaces
		|        {
		|            get { return M_NumericUpDown.DecimalPlaces; }
		|            set
		|            {
		|                M_NumericUpDown.DecimalPlaces = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public Decimal Increment
		|        {
		|            get { return M_NumericUpDown.Increment; }
		|            set
		|            {
		|                M_NumericUpDown.Increment = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public Decimal Maximum
		|        {
		|            get { return M_NumericUpDown.Maximum; }
		|            set
		|            {
		|                M_NumericUpDown.Maximum = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public Decimal Minimum
		|        {
		|            get { return M_NumericUpDown.Minimum; }
		|            set
		|            {
		|                M_NumericUpDown.Minimum = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public Decimal Value
		|        {
		|            get { return M_NumericUpDown.Value; }
		|            set
		|            {
		|                M_NumericUpDown.Value = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        private void M_NumericUpDown_ValueChanged(object sender, System.EventArgs e)
		|        {
		|            if (ValueChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = ValueChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.ValueChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.ValueChanged);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "GroupBox" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class GroupBoxEx : System.Windows.Forms.GroupBox
		|    {
		|        public osf.GroupBox M_Object;
		|    }//endClass
		|
		|    public class GroupBox : Control
		|    {
		|        public ClGroupBox dll_obj;
		|        public GroupBoxEx M_GroupBox;
		|
		|        public GroupBox()
		|        {
		|            M_GroupBox = new GroupBoxEx();
		|            M_GroupBox.M_Object = this;
		|            base.M_Control = M_GroupBox;
		|        }
		|
		|        public GroupBox(osf.GroupBox p1)
		|        {
		|            M_GroupBox = p1.M_GroupBox;
		|            M_GroupBox.M_Object = this;
		|            base.M_Control = M_GroupBox;
		|        }
		|
		|        public GroupBox(System.Windows.Forms.GroupBox p1)
		|        {
		|            M_GroupBox = (GroupBoxEx)p1;
		|            M_GroupBox.M_Object = this;
		|            base.M_Control = M_GroupBox;
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Splitter" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class SplitterEx : System.Windows.Forms.Splitter
		|    {
		|        public osf.Splitter M_Object;
		|    }//endClass
		|
		|    public class Splitter : Control
		|    {
		|        public ClSplitter dll_obj;
		|        public SplitterEx M_Splitter;
		|
		|        public Splitter()
		|        {
		|            M_Splitter = new SplitterEx();
		|            M_Splitter.M_Object = this;
		|            base.M_Control = M_Splitter;
		|        }
		|
		|        public Splitter(osf.Splitter p1)
		|        {
		|            M_Splitter = p1.M_Splitter;
		|            M_Splitter.M_Object = this;
		|            base.M_Control = M_Splitter;
		|        }
		|
		|        public Splitter(System.Windows.Forms.Splitter p1)
		|        {
		|            M_Splitter = (SplitterEx)p1;
		|            M_Splitter.M_Object = this;
		|            base.M_Control = M_Splitter;
		|        }
		|
		|        public int MinExtra
		|        {
		|            get { return M_Splitter.MinExtra; }
		|            set { M_Splitter.MinExtra = value; }
		|        }
		|
		|        public int MinSize
		|        {
		|            get { return M_Splitter.MinSize; }
		|            set { M_Splitter.MinSize = value; }
		|        }
		|
		|        public int SplitPosition
		|        {
		|            get { return M_Splitter.SplitPosition; }
		|            set { M_Splitter.SplitPosition = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TextureBrush" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TextureBrush : Brush
		|    {
		|        public ClTextureBrush dll_obj;
		|        public System.Drawing.TextureBrush M_TextureBrush;
		|
		|        public TextureBrush(System.Drawing.Image p1)
		|        {
		|            M_TextureBrush = new System.Drawing.TextureBrush((System.Drawing.Image)p1);
		|            base.M_Brush = M_TextureBrush;
		|            OneScriptForms.AddToHashtable(M_TextureBrush, this);
		|        }
		|
		|        public TextureBrush(osf.TextureBrush p1)
		|        {
		|            M_TextureBrush = p1.M_TextureBrush;
		|            base.M_Brush = M_TextureBrush;
		|            OneScriptForms.AddToHashtable(M_TextureBrush, this);
		|        }
		|
		|        public TextureBrush(System.Drawing.TextureBrush p1)
		|        {
		|            M_TextureBrush = p1;
		|            base.M_Brush = M_TextureBrush;
		|            OneScriptForms.AddToHashtable(M_TextureBrush, this);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "HatchBrush" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class HatchBrush : Brush
		|    {
		|        public ClHatchBrush dll_obj;
		|        public System.Drawing.Drawing2D.HatchBrush M_HatchBrush;
		|
		|        public HatchBrush(int hatchStyle, osf.Color foreColor, osf.Color backColor = null)
		|        {
		|            if (backColor != null)
		|            {
		|                M_HatchBrush = new System.Drawing.Drawing2D.HatchBrush((System.Drawing.Drawing2D.HatchStyle)hatchStyle, foreColor.M_Color, backColor.M_Color);
		|                base.M_Brush = M_HatchBrush;
		|                OneScriptForms.AddToHashtable(M_HatchBrush, this);
		|            }
		|            else
		|            {
		|                M_HatchBrush = new System.Drawing.Drawing2D.HatchBrush((System.Drawing.Drawing2D.HatchStyle)hatchStyle, foreColor.M_Color);
		|                base.M_Brush = M_HatchBrush;
		|                OneScriptForms.AddToHashtable(M_HatchBrush, this);
		|            }
		|        }
		|
		|        public HatchBrush(osf.HatchBrush p1)
		|        {
		|            M_HatchBrush = p1.M_HatchBrush;
		|            base.M_Brush = M_HatchBrush;
		|            OneScriptForms.AddToHashtable(M_HatchBrush, this);
		|        }
		|
		|        public HatchBrush(System.Drawing.Drawing2D.HatchBrush p1)
		|        {
		|            M_HatchBrush = p1;
		|            base.M_Brush = M_HatchBrush;
		|            OneScriptForms.AddToHashtable(M_HatchBrush, this);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Application" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Application
		|    {
		|        public ClApplication dll_obj;
		|        private static bool m_IsRunning = false;
		|
		|        public void Exit()
		|        {
		|            System.Windows.Forms.Application.Exit();
		|            Application.m_IsRunning = false;
		|        }
		|
		|        public void Run(Form form = null)
		|        {
		|            Application.m_IsRunning = true;
		|            if (form.GetType() != typeof(Form))
		|                return;
		|            form.Show();
		|        }
		|
		|        public bool IsRunning
		|        {
		|            get { return Application.m_IsRunning; }
		|        }
		|
		|        public void EnableVisualStyles()
		|        {
		|            System.Windows.Forms.Application.EnableVisualStyles();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public string ProductName
		|        {
		|            get { return ((AssemblyTitleAttribute)Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false)[0]).Title.ToString(); }
		|        }
		|
		|        public string ProductVersion
		|        {
		|            get { return new osf.Version((dynamic)Assembly.GetExecutingAssembly().GetName().Version).ToString(); }
		|        }
		|
		|        public string UserAppDataPath
		|        {
		|            get { return System.Windows.Forms.Application.UserAppDataPath; }
		|        }
		|
		|        public Version Version
		|        {
		|            get { return new osf.Version((dynamic)Assembly.GetExecutingAssembly().GetName().Version); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DateTimePicker" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DateTimePickerEx : System.Windows.Forms.DateTimePicker
		|    {
		|        public osf.DateTimePicker M_Object;
		|    }//endClass
		|
		|    public class DateTimePicker : Control
		|    {
		|        public ClDateTimePicker dll_obj;
		|        public DateTimePickerEx M_DateTimePicker;
		|        public string ValueChanged;
		|
		|        public DateTimePicker()
		|        {
		|            M_DateTimePicker = new DateTimePickerEx();
		|            M_DateTimePicker.M_Object = this;
		|            base.M_Control = M_DateTimePicker;
		|            M_DateTimePicker.ValueChanged += M_DateTimePicker_ValueChanged;
		|            ValueChanged = """";
		|        }
		|
		|        public DateTimePicker(osf.DateTimePicker p1)
		|        {
		|            M_DateTimePicker = p1.M_DateTimePicker;
		|            M_DateTimePicker.M_Object = this;
		|            base.M_Control = M_DateTimePicker;
		|            M_DateTimePicker.ValueChanged += M_DateTimePicker_ValueChanged;
		|            ValueChanged = """";
		|        }
		|
		|        public DateTimePicker(System.Windows.Forms.DateTimePicker p1)
		|        {
		|            M_DateTimePicker = (DateTimePickerEx)p1;
		|            M_DateTimePicker.M_Object = this;
		|            base.M_Control = M_DateTimePicker;
		|            M_DateTimePicker.ValueChanged += M_DateTimePicker_ValueChanged;
		|            ValueChanged = """";
		|        }
		|
		|        public bool ShowCheckBox
		|        {
		|            get { return M_DateTimePicker.ShowCheckBox; }
		|            set
		|            {
		|                M_DateTimePicker.ShowCheckBox = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool ShowUpDown
		|        {
		|            get { return M_DateTimePicker.ShowUpDown; }
		|            set
		|            {
		|                M_DateTimePicker.ShowUpDown = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int DropDownAlign
		|        {
		|            get { return (int)M_DateTimePicker.DropDownAlign; }
		|            set
		|            {
		|                M_DateTimePicker.DropDownAlign = (System.Windows.Forms.LeftRightAlignment)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public System.DateTime Value
		|        {
		|            get { return M_DateTimePicker.Value; }
		|            set
		|            {
		|                M_DateTimePicker.Value = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public System.DateTime MaxDate
		|        {
		|            get { return M_DateTimePicker.MaxDate; }
		|            set
		|            {
		|                M_DateTimePicker.MaxDate = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public System.DateTime MinDate
		|        {
		|            get { return M_DateTimePicker.MinDate; }
		|            set
		|            {
		|                M_DateTimePicker.MinDate = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string CustomFormat
		|        {
		|            get
		|            {
		|                if (M_DateTimePicker.CustomFormat == null)
		|                {
		|                    return """";
		|                }
		|                return M_DateTimePicker.CustomFormat;
		|            }
		|            set
		|            {
		|                M_DateTimePicker.CustomFormat = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public new string Text
		|        {
		|            get
		|            {
		|                if (M_DateTimePicker.Format.ToString() == ""Short"")
		|                {
		|                    return M_DateTimePicker.Value.ToShortDateString() + "" "" + M_DateTimePicker.Value.ToShortTimeString();
		|                }
		|                else if (M_DateTimePicker.Format.ToString() == ""Time"")
		|                {
		|                    return M_DateTimePicker.Value.ToLongTimeString();
		|                }
		|                else if (M_DateTimePicker.Format.ToString() == ""Long"")
		|                {
		|                    return M_DateTimePicker.Value.ToLongDateString() + "" "" + M_DateTimePicker.Value.ToLongTimeString();
		|                }
		|                else if (M_DateTimePicker.Format.ToString() == ""Custom"")
		|                {
		|                    if (M_DateTimePicker.CustomFormat != null)
		|                    {
		|                        return M_DateTimePicker.Value.ToString(M_DateTimePicker.CustomFormat);
		|                    }
		|                }
		|                return """";
		|            }
		|            set
		|            {
		|                M_DateTimePicker.Text = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int PreferredHeight
		|        {
		|            get { return M_DateTimePicker.PreferredHeight; }
		|        }
		|
		|        public osf.Size PreferredSize
		|        {
		|            get { return new Size(M_DateTimePicker.PreferredSize); }
		|        }
		|
		|        public int Format
		|        {
		|            get { return (int)M_DateTimePicker.Format; }
		|            set
		|            {
		|                M_DateTimePicker.Format = (System.Windows.Forms.DateTimePickerFormat)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void M_DateTimePicker_ValueChanged(object sender, System.EventArgs e)
		|        {
		|            if (ValueChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = ValueChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.ValueChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.ValueChanged);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ComboBoxObjectCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ComboBoxObjectCollection : CollectionBase
		|    {
		|        public ClComboBoxObjectCollection dll_obj;
		|        public System.Windows.Forms.ComboBox.ObjectCollection M_ComboBoxObjectCollection;
		|
		|        public ComboBoxObjectCollection()
		|        {
		|        }
		|
		|        public ComboBoxObjectCollection(System.Windows.Forms.ComboBox.ObjectCollection p1)
		|        {
		|            M_ComboBoxObjectCollection = p1;
		|            base.List = M_ComboBoxObjectCollection;
		|        }
		|
		|        public new object Add(object item)
		|        {
		|            M_ComboBoxObjectCollection.Add(item);
		|            System.Windows.Forms.Application.DoEvents();
		|            return item;
		|        }
		|
		|        public new object Insert(int index, object item)
		|        {
		|            M_ComboBoxObjectCollection.Insert(index, item);
		|            System.Windows.Forms.Application.DoEvents();
		|            return item;
		|        }
		|
		|        public new object this[int index]
		|        {
		|            get { return M_ComboBoxObjectCollection[index]; }
		|        }
		|
		|        public new void Remove(object item)
		|        {
		|            M_ComboBoxObjectCollection.Remove(item);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public override object Current
		|        {
		|            get { return Enumerator.Current; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ComboBox" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class NoKeyUpComboBoxEx : System.Windows.Forms.ComboBox
		|    {
		|        public osf.ComboBox M_Object;
		|        private const int WM_KEYUP = 0x101;
		|
		|        protected override void WndProc(ref Message m)
		|        {
		|            if (m.Msg == WM_KEYUP)
		|            {
		|                // Игнорировать поднятие клавиши Tab, чтобы избежать проблем с перемещением по колонке, содержащей поле выбора;
		|                // Иначе невозможно будет с помощью клавиши Tab передать фокус колонке, содержащей поле выбора.
		|                return;
		|            }
		|            base.WndProc(ref m);
		|        }
		|    }//endClass
		|		
		|    public class ComboBoxEx : System.Windows.Forms.ComboBox
		|    {
		|        public osf.ComboBox M_Object;
		|    }//endClass
		|
		|    public class ComboBox : ListControl
		|    {
		|        public ClComboBox dll_obj;
		|        private dynamic m_ComboBox;
		|        public string SelectedIndexChanged;
		|        public string DropDown;
		|        public ArrayList heights;
		|
		|        public dynamic M_ComboBox
		|        {
		|            get { return m_ComboBox; }
		|            set
		|            {
		|                m_ComboBox = value;
		|                ((System.Windows.Forms.ComboBox)m_ComboBox).DropDown += M_ComboBox_DropDown;
		|                ((System.Windows.Forms.ComboBox)m_ComboBox).SelectedIndexChanged += M_ComboBox_SelectedIndexChanged;
		|                ((System.Windows.Forms.ComboBox)m_ComboBox).DrawItem += M_ComboBox_DrawItem;
		|                ((System.Windows.Forms.ComboBox)m_ComboBox).MeasureItem += M_ComboBox_MeasureItem;
		|            }
		|        }
		|
		|        public ComboBox()
		|        {
		|            M_ComboBox = new ComboBoxEx();
		|            M_ComboBox.M_Object = this;
		|            base.M_ListControl = M_ComboBox;
		|            SelectedIndexChanged = """";
		|            DropDown = """";
		|            heights = new ArrayList();
		|        }
		|
		|        public ComboBox(osf.ComboBox p1)
		|        {
		|            M_ComboBox = p1.M_ComboBox;
		|            M_ComboBox.M_Object = this;
		|            base.M_ListControl = M_ComboBox;
		|            SelectedIndexChanged = """";
		|            DropDown = """";
		|            heights = new ArrayList();
		|        }
		|
		|        public ComboBox(System.Windows.Forms.ComboBox p1)
		|        {
		|            M_ComboBox = (ComboBoxEx)p1;
		|            M_ComboBox.M_Object = this;
		|            base.M_ListControl = M_ComboBox;
		|            SelectedIndexChanged = """";
		|            DropDown = """";
		|            heights = new ArrayList();
		|        }
		|
		|        public ComboBox(osf.NoKeyUpComboBoxEx p1)
		|        {
		|            M_ComboBox = (dynamic)((System.Windows.Forms.ComboBox)p1);
		|            M_ComboBox.M_Object = this;
		|            base.M_ListControl = M_ComboBox;
		|            SelectedIndexChanged = """";
		|            DropDown = """";
		|            heights = new ArrayList();
		|        }
		|
		|        public osf.ArrayList HeightItems
		|        {
		|            get { return heights; }
		|            set { heights = value; }
		|        }
		|
		|        public int DropDownStyle
		|        {
		|            get { return (int)M_ComboBox.DropDownStyle; }
		|            set { M_ComboBox.DropDownStyle = (System.Windows.Forms.ComboBoxStyle)value; }
		|        }
		|
		|        public int DropDownWidth
		|        {
		|            get { return M_ComboBox.DropDownWidth; }
		|            set { M_ComboBox.DropDownWidth = value; }
		|        }
		|
		|        public bool DroppedDown
		|        {
		|            get { return M_ComboBox.DroppedDown; }
		|            set { M_ComboBox.DroppedDown = value; }
		|        }
		|
		|        public bool IntegralHeight
		|        {
		|            get { return M_ComboBox.IntegralHeight; }
		|            set { M_ComboBox.IntegralHeight = value; }
		|        }
		|
		|        public int ItemHeight
		|        {
		|            get { return M_ComboBox.ItemHeight; }
		|            set { M_ComboBox.ItemHeight = value; }
		|        }
		|
		|        public osf.ComboBoxObjectCollection Items
		|        {
		|            get { return new ComboBoxObjectCollection(M_ComboBox.Items); }
		|        }
		|
		|        public int MaxDropDownItems
		|        {
		|            get { return M_ComboBox.MaxDropDownItems; }
		|            set { M_ComboBox.MaxDropDownItems = value; }
		|        }
		|
		|        public int MaxLength
		|        {
		|            get { return M_ComboBox.MaxLength; }
		|            set { M_ComboBox.MaxLength = value; }
		|        }
		|
		|        public void Paste()
		|        {
		|            System.Windows.Forms.IDataObject dataObject = System.Windows.Forms.Clipboard.GetDataObject();
		|            if (dataObject.GetDataPresent(System.Windows.Forms.DataFormats.Text))
		|            {
		|                M_ComboBox.Text = Convert.ToString(dataObject.GetData(System.Windows.Forms.DataFormats.Text));
		|            }
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public virtual int PreferredHeight
		|        {
		|            get { return M_ComboBox.PreferredHeight; }
		|        }
		|
		|        public int SelectedIndex
		|        {
		|            get { return M_ComboBox.SelectedIndex; }
		|            set { M_ComboBox.SelectedIndex = value; }
		|        }
		|
		|        public string SelectedText
		|        {
		|            get { return M_ComboBox.SelectedText; }
		|            set { M_ComboBox.SelectedText = value; }
		|        }
		|
		|        public int SelectionLength
		|        {
		|            get { return M_ComboBox.SelectionLength; }
		|            set { M_ComboBox.SelectionLength = value; }
		|        }
		|
		|        public int SelectionStart
		|        {
		|            get { return M_ComboBox.SelectionStart; }
		|            set { M_ComboBox.SelectionStart = value; }
		|        }
		|
		|        public bool Sorted
		|        {
		|            get { return M_ComboBox.Sorted; }
		|            set { M_ComboBox.Sorted = value; }
		|        }
		|
		|        public int DrawMode
		|        {
		|            get { return (int)M_ComboBox.DrawMode; }
		|            set { M_ComboBox.DrawMode = (System.Windows.Forms.DrawMode)value; }
		|        }
		|
		|        public void M_ComboBox_DropDown(object sender, System.EventArgs e)
		|        {
		|            if (DropDown.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = DropDown;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.DropDown);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.DropDown);
		|            }
		|        }
		|
		|        public void M_ComboBox_SelectedIndexChanged(object sender, System.EventArgs e)
		|        {
		|            if (SelectedIndexChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = SelectedIndexChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.SelectedIndexChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.SelectedIndexChanged);
		|            }
		|        }
		|
		|        private void M_ComboBox_MeasureItem(object sender, System.Windows.Forms.MeasureItemEventArgs e)
		|        {
		|            dynamic var1 = HeightItems[e.Index];
		|            try
		|            {
		|                e.ItemHeight = Convert.ToInt32(var1.AsString());
		|            }
		|            catch
		|            {
		|                e.ItemHeight = Convert.ToInt32(var1);
		|            }
		|        }
		|
		|        private void M_ComboBox_DrawItem(object sender, System.Windows.Forms.DrawItemEventArgs e)
		|        {
		|            if (e.Index == -1)
		|            {
		|                return;
		|            }
		|            e.DrawBackground();
		|            e.DrawFocusRectangle();
		|            dynamic item = M_ComboBox.Items[e.Index];
		|            System.Type type = item.GetType();
		|            System.Drawing.Color color1 = M_ComboBox.ForeColor;
		|            PropertyInfo propertyForeColor = type.GetProperty(""ForeColor"");
		|            Color colorForeColor = null;
		|            if (propertyForeColor != null)
		|            {
		|                try
		|                {
		|                    colorForeColor = (Color)propertyForeColor.GetValue(Items[e.Index], (object[])null);
		|                }
		|                catch
		|                {
		|                    colorForeColor = ((ClColor)propertyForeColor.GetValue(Items[e.Index], (object[])null)).Base_obj;
		|                }
		|            }
		|            if ((e.State & System.Windows.Forms.DrawItemState.Disabled) == System.Windows.Forms.DrawItemState.Disabled)
		|            {
		|                try
		|                {
		|                    if (!colorForeColor.IsEmpty)
		|                    {
		|                        color1 = colorForeColor.M_Color;
		|                    }
		|                }
		|                catch
		|                {
		|                    color1 = System.Drawing.SystemColors.GrayText;
		|                }
		|            }
		|            else if ((e.State & System.Windows.Forms.DrawItemState.Selected) == System.Windows.Forms.DrawItemState.Selected)
		|            {
		|                color1 = System.Drawing.SystemColors.HighlightText;
		|            }
		|            else
		|            {
		|                try
		|                {
		|                    if (!colorForeColor.IsEmpty)
		|                    {
		|                        color1 = colorForeColor.M_Color;
		|                    }
		|                }
		|                catch
		|                {
		|                }
		|            }
		|            string s = """";
		|            string ObjType = item.GetType().ToString();
		|            if (ObjType == ""System.Data.DataRowView"")
		|            {
		|                System.Data.DataRowView drv = (System.Data.DataRowView)item;
		|                try
		|                {
		|                    dynamic var1 = drv.Row[M_ComboBox.DisplayMember];
		|                    System.Type Type1 = var1.GetType();
		|                    s = Type1.GetCustomAttribute<ContextClassAttribute>().GetName();
		|                }
		|                catch
		|                {
		|                    if (drv.Row[M_ComboBox.DisplayMember].GetType() == typeof(System.Boolean))
		|                    {
		|                        ScriptEngine.Machine.Values.BooleanValue Bool1;
		|                        if ((System.Boolean)drv.Row[M_ComboBox.DisplayMember])
		|                        {
		|                            Bool1 = ScriptEngine.Machine.Values.BooleanValue.True;
		|                        }
		|                        else
		|                        {
		|                            Bool1 = ScriptEngine.Machine.Values.BooleanValue.False;
		|                        }
		|                        s = Bool1.ToString();
		|                    }
		|                    else
		|                    {
		|                        s = drv.Row[M_ComboBox.DisplayMember].ToString();
		|                    }
		|                }
		|            }
		|            else if (ObjType == ""osf.ListItem"")
		|            {
		|                try
		|                {
		|                    s = ((osf.ListItem)item).Value.GetType().GetCustomAttribute<ContextClassAttribute>().GetName();
		|                }
		|                catch
		|                {
		|                    s = ((osf.ListItem)item).Text;
		|                }
		|            }
		|            if (s == """")
		|            {
		|                PropertyInfo property1 = type.GetProperty(M_ComboBox.DisplayMember);
		|                if (property1 != null)
		|                {
		|                    s = Convert.ToString(property1.GetValue(Items[e.Index]));
		|                }
		|                else
		|                {
		|                    if (SelectedIndexChanged != """")
		|                    {
		|                        try
		|                        {
		|                            System.Type Type1 = item.GetType();
		|                            s = Type1.GetCustomAttribute<ContextClassAttribute>().GetName();
		|                        }
		|                        catch
		|                        {
		|                            s = item.ToString();
		|                        }
		|                    }
		|                    else
		|                    {
		|                        s = item.ToString();
		|                    }
		|                }
		|            }
		|            e.Graphics.DrawString(s, M_ComboBox.Font, (System.Drawing.Brush)new System.Drawing.SolidBrush(color1), (float)e.Bounds.X, (float)e.Bounds.Y);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ToolTip" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ToolTipEx : System.Windows.Forms.ToolTip
		|    {
		|        public osf.ToolTip M_Object;
		|    }//endClass
		|
		|    public class ToolTip
		|    {
		|        public ClToolTip dll_obj;
		|        public ToolTipEx M_ToolTip;
		|
		|        public ToolTip()
		|        {
		|            M_ToolTip = new ToolTipEx();
		|            M_ToolTip.M_Object = this;
		|        }
		|
		|        public ToolTip(osf.ToolTip p1)
		|        {
		|            M_ToolTip = p1.M_ToolTip;
		|            M_ToolTip.M_Object = this;
		|        }
		|
		|        public ToolTip(System.Windows.Forms.ToolTip p1)
		|        {
		|            M_ToolTip = (ToolTipEx)p1;
		|            M_ToolTip.M_Object = this;
		|        }
		|
		|        public bool Active
		|        {
		|            get { return M_ToolTip.Active; }
		|            set { M_ToolTip.Active = value; }
		|        }
		|
		|        public int AutomaticDelay
		|        {
		|            get { return M_ToolTip.AutomaticDelay; }
		|            set { M_ToolTip.AutomaticDelay = value; }
		|        }
		|
		|        public int AutoPopDelay
		|        {
		|            get { return M_ToolTip.AutoPopDelay; }
		|            set { M_ToolTip.AutoPopDelay = value; }
		|        }
		|
		|        public string GetToolTip(Control p1)
		|        {
		|            return M_ToolTip.GetToolTip(p1.M_Control);
		|        }
		|
		|        public int InitialDelay
		|        {
		|            get { return M_ToolTip.InitialDelay; }
		|            set { M_ToolTip.InitialDelay = value; }
		|        }
		|
		|        public void RemoveAll()
		|        {
		|            M_ToolTip.RemoveAll();
		|        }
		|
		|        public int ReshowDelay
		|        {
		|            get { return M_ToolTip.ReshowDelay; }
		|            set { M_ToolTip.ReshowDelay = value; }
		|        }
		|
		|        public void SetToolTip(Control p1, string p2)
		|        {
		|            M_ToolTip.SetToolTip(p1.M_Control, p2);
		|        }
		|
		|        public bool ShowAlways
		|        {
		|            get { return M_ToolTip.ShowAlways; }
		|            set { M_ToolTip.ShowAlways = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "RadioButton" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class RadioButtonEx : System.Windows.Forms.RadioButton
		|    {
		|        public osf.RadioButton M_Object;
		|    }//endClass
		|
		|    public class RadioButton : ButtonBase
		|    {
		|        public ClRadioButton dll_obj;
		|        private RadioButtonEx m_RadioButton;
		|        public string CheckChanged;
		|
		|        public RadioButtonEx M_RadioButton
		|        {
		|            get { return m_RadioButton; }
		|            set
		|            {
		|                m_RadioButton = value;
		|                m_RadioButton.CheckedChanged += M_RadioButton_CheckedChanged;
		|            }
		|        }
		|
		|        public RadioButton()
		|        {
		|            M_RadioButton = new RadioButtonEx();
		|            M_RadioButton.M_Object = this;
		|            base.M_ButtonBase = M_RadioButton;
		|            CheckChanged = """";
		|        }
		|
		|        public RadioButton(osf.RadioButton p1)
		|        {
		|            M_RadioButton = p1.M_RadioButton;
		|            M_RadioButton.M_Object = this;
		|            base.M_ButtonBase = M_RadioButton;
		|            CheckChanged = """";
		|        }
		|
		|        public RadioButton(System.Windows.Forms.RadioButton p1)
		|        {
		|            M_RadioButton = (RadioButtonEx)p1;
		|            M_RadioButton.M_Object = this;
		|            base.M_ButtonBase = M_RadioButton;
		|            CheckChanged = """";
		|        }
		|
		|        public int Appearance
		|        {
		|            get { return (int)M_RadioButton.Appearance; }
		|            set { M_RadioButton.Appearance = (System.Windows.Forms.Appearance)value; }
		|        }
		|
		|        public bool AutoCheck
		|        {
		|            get { return M_RadioButton.AutoCheck; }
		|            set { M_RadioButton.AutoCheck = value; }
		|        }
		|
		|        public int CheckAlign
		|        {
		|            get { return (int)M_RadioButton.CheckAlign; }
		|            set { M_RadioButton.CheckAlign = (System.Drawing.ContentAlignment)value; }
		|        }
		|
		|
		|        public bool Checked
		|        {
		|            get { return M_RadioButton.Checked; }
		|            set { M_RadioButton.Checked = value; }
		|        }
		|
		|        private void M_RadioButton_CheckedChanged(object sender, System.EventArgs e)
		|        {
		|            if (CheckChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = CheckChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CheckChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CheckChanged);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "StatusBarPanel" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class StatusBarPanelEx : System.Windows.Forms.StatusBarPanel
		|    {
		|        public osf.StatusBarPanel M_Object;
		|    }//endClass
		|
		|    public class StatusBarPanel : Component
		|    {
		|        public ClStatusBarPanel dll_obj;
		|        public StatusBarPanelEx M_StatusBarPanel;
		|
		|        public StatusBarPanel(string text = null)
		|        {
		|            M_StatusBarPanel = new StatusBarPanelEx();
		|            M_StatusBarPanel.M_Object = this;
		|            base.M_Component = M_StatusBarPanel;
		|            if (text != null)
		|            {
		|                M_StatusBarPanel.Text = text;
		|            }
		|        }
		|
		|        public StatusBarPanel(osf.StatusBarPanel p1)
		|        {
		|            M_StatusBarPanel = p1.M_StatusBarPanel;
		|            M_StatusBarPanel.M_Object = this;
		|            base.M_Component = M_StatusBarPanel;
		|        }
		|
		|        public StatusBarPanel(System.Windows.Forms.StatusBarPanel p1)
		|        {
		|            M_StatusBarPanel = (StatusBarPanelEx)p1;
		|            M_StatusBarPanel.M_Object = this;
		|            base.M_Component = M_StatusBarPanel;
		|        }
		|
		|        public int AutoSize
		|        {
		|            get { return (int)M_StatusBarPanel.AutoSize; }
		|            set { M_StatusBarPanel.AutoSize = (System.Windows.Forms.StatusBarPanelAutoSize)value; }
		|        }
		|
		|        public osf.Icon Icon
		|        {
		|            get { return new Icon(M_StatusBarPanel.Icon); }
		|            set { M_StatusBarPanel.Icon = (System.Drawing.Icon)value.M_Icon; }
		|        }
		|
		|        public int MinWidth
		|        {
		|            get { return M_StatusBarPanel.MinWidth; }
		|            set { M_StatusBarPanel.MinWidth = value; }
		|        }
		|
		|        public int BorderStyle
		|        {
		|            get { return (int)M_StatusBarPanel.BorderStyle; }
		|            set { M_StatusBarPanel.BorderStyle = (System.Windows.Forms.StatusBarPanelBorderStyle)value; }
		|        }
		|
		|        public string Text
		|        {
		|            get { return M_StatusBarPanel.Text; }
		|            set { M_StatusBarPanel.Text = value; }
		|        }
		|
		|        public int Width
		|        {
		|            get { return M_StatusBarPanel.Width; }
		|            set { M_StatusBarPanel.Width = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "StatusBarPanelCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class StatusBarPanelCollection : CollectionBase
		|    {
		|        public ClStatusBarPanelCollection dll_obj;
		|        public System.Windows.Forms.StatusBar.StatusBarPanelCollection M_StatusBarPanelCollection;
		|
		|        public StatusBarPanelCollection()
		|        {
		|        }
		|
		|        public StatusBarPanelCollection(System.Windows.Forms.StatusBar.StatusBarPanelCollection p1)
		|        {
		|            M_StatusBarPanelCollection = p1;
		|            base.List = M_StatusBarPanelCollection;
		|        }
		|
		|        public osf.StatusBarPanel Add(osf.StatusBarPanel p1)
		|        {
		|            M_StatusBarPanelCollection.Add(p1.M_StatusBarPanel);
		|            return p1;
		|        }
		|
		|        public osf.StatusBarPanel Insert(int index, osf.StatusBarPanel p1)
		|        {
		|            M_StatusBarPanelCollection.Insert(index, p1.M_StatusBarPanel);
		|            return p1;
		|        }
		|
		|        public void Remove(osf.StatusBarPanel p1)
		|        {
		|            M_StatusBarPanelCollection.Remove(p1.M_StatusBarPanel);
		|        }
		|
		|        public new osf.StatusBarPanel this[int Index]
		|        {
		|            get { return ((StatusBarPanelEx)M_StatusBarPanelCollection[Index]).M_Object; }
		|        }
		|
		|        public override object Current
		|        {
		|            get { return (object)((StatusBarPanelEx)Enumerator.Current).M_Object; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "StatusBar" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class StatusBarEx : System.Windows.Forms.StatusBar
		|    {
		|        public osf.StatusBar M_Object;
		|    }//endClass
		|
		|    public class StatusBar : Control
		|    {
		|        public ClStatusBar dll_obj;
		|        public StatusBarEx M_StatusBar;
		|
		|        public StatusBar()
		|        {
		|            M_StatusBar = new StatusBarEx();
		|            M_StatusBar.M_Object = this;
		|            base.M_Control = M_StatusBar;
		|        }
		|
		|        public StatusBar(osf.StatusBar p1)
		|        {
		|            M_StatusBar = p1.M_StatusBar;
		|            M_StatusBar.M_Object = this;
		|            base.M_Control = M_StatusBar;
		|        }
		|
		|        public StatusBar(System.Windows.Forms.StatusBar p1)
		|        {
		|            M_StatusBar = (StatusBarEx)p1;
		|            M_StatusBar.M_Object = this;
		|            base.M_Control = M_StatusBar;
		|        }
		|
		|        public osf.StatusBarPanelCollection Panels
		|        {
		|            get { return new StatusBarPanelCollection(M_StatusBar.Panels); }
		|        }
		|
		|        public bool ShowPanels
		|        {
		|            get { return M_StatusBar.ShowPanels; }
		|            set { M_StatusBar.ShowPanels = value; }
		|        }
		|
		|        public bool SizingGrip
		|        {
		|            get { return M_StatusBar.SizingGrip; }
		|            set { M_StatusBar.SizingGrip = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "FileSystemWatcher" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class FileSystemWatcherEx : System.IO.FileSystemWatcher
		|    {
		|        public osf.FileSystemWatcher M_Object;
		|    }//endClass
		|
		|    public class FileSystemWatcher : Component
		|    {
		|        public ClFileSystemWatcher dll_obj;
		|        private FileSystemWatcherEx m_FileSystemWatcher;
		|        public string Changed;
		|        public string Created;
		|        public string Deleted;
		|        public string Renamed;
		|
		|        public FileSystemWatcherEx M_FileSystemWatcher
		|        {
		|            get { return m_FileSystemWatcher; }
		|            set
		|            {
		|                m_FileSystemWatcher = value;
		|                base.M_Component = m_FileSystemWatcher;
		|                System.Windows.Forms.Form obj1 = new System.Windows.Forms.Form();
		|                IntPtr num1 = obj1.Handle;
		|                m_FileSystemWatcher.SynchronizingObject = obj1;
		|                m_FileSystemWatcher.Renamed += M_FileSystemWatcher_Renamed;
		|                m_FileSystemWatcher.Deleted += M_FileSystemWatcher_Deleted;
		|                m_FileSystemWatcher.Created += M_FileSystemWatcher_Created;
		|                m_FileSystemWatcher.Changed += M_FileSystemWatcher_Changed;
		|            }
		|        }
		|
		|        public FileSystemWatcher()
		|        {
		|            M_FileSystemWatcher = new FileSystemWatcherEx();
		|            M_FileSystemWatcher.M_Object = this;
		|            Changed = """";
		|            Created = """";
		|            Deleted = """";
		|            Renamed = """";
		|        }
		|
		|        public FileSystemWatcher(osf.FileSystemWatcher p1)
		|        {
		|            M_FileSystemWatcher = p1.M_FileSystemWatcher;
		|            M_FileSystemWatcher.M_Object = this;
		|            Changed = """";
		|            Created = """";
		|            Deleted = """";
		|            Renamed = """";
		|        }
		|
		|        public FileSystemWatcher(System.IO.FileSystemWatcher FileSystemWatcher)
		|        {
		|            M_FileSystemWatcher = (FileSystemWatcherEx)FileSystemWatcher;
		|            M_FileSystemWatcher.M_Object = this;
		|            Changed = """";
		|            Created = """";
		|            Deleted = """";
		|            Renamed = """";
		|        }
		|
		|        public bool EnableRaisingEvents
		|        {
		|            get { return M_FileSystemWatcher.EnableRaisingEvents; }
		|            set
		|            {
		|                M_FileSystemWatcher.EnableRaisingEvents = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string Filter
		|        {
		|            get { return M_FileSystemWatcher.Filter; }
		|            set
		|            {
		|                M_FileSystemWatcher.Filter = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool IncludeSubDirectories
		|        {
		|            get { return M_FileSystemWatcher.EnableRaisingEvents; }
		|            set
		|            {
		|                M_FileSystemWatcher.EnableRaisingEvents = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int InternalBufferSize
		|        {
		|            get { return M_FileSystemWatcher.InternalBufferSize; }
		|            set
		|            {
		|                M_FileSystemWatcher.InternalBufferSize = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int NotifyFilter
		|        {
		|            get { return (int)M_FileSystemWatcher.NotifyFilter; }
		|            set
		|            {
		|                M_FileSystemWatcher.NotifyFilter = (System.IO.NotifyFilters)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string Path
		|        {
		|            get { return M_FileSystemWatcher.Path; }
		|            set
		|            {
		|                M_FileSystemWatcher.Path = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void M_FileSystemWatcher_Changed(object sender, System.IO.FileSystemEventArgs e)
		|        {
		|            if (Changed.Length > 0)
		|            {
		|                FileSystemEventArgs FileSystemEventArgs1 = new FileSystemEventArgs();
		|                FileSystemEventArgs1.EventString = Changed;
		|                FileSystemEventArgs1.Sender = this;
		|                FileSystemEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Changed);
		|                FileSystemEventArgs1.ChangeType = (int)e.ChangeType;
		|                FileSystemEventArgs1.FullPath = e.FullPath;
		|                FileSystemEventArgs1.Name = e.Name;
		|                ClFileSystemEventArgs ClFileSystemEventArgs1 = new ClFileSystemEventArgs(FileSystemEventArgs1);
		|                OneScriptForms.Event = ClFileSystemEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Changed);
		|            }
		|        }
		|
		|        public void M_FileSystemWatcher_Created(object sender, System.IO.FileSystemEventArgs e)
		|        {
		|            if (Created.Length > 0)
		|            {
		|                FileSystemEventArgs FileSystemEventArgs1 = new FileSystemEventArgs();
		|                FileSystemEventArgs1.EventString = Created;
		|                FileSystemEventArgs1.Sender = this;
		|                FileSystemEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Created);
		|                FileSystemEventArgs1.ChangeType = (int)e.ChangeType;
		|                FileSystemEventArgs1.FullPath = e.FullPath;
		|                FileSystemEventArgs1.Name = e.Name;
		|                ClFileSystemEventArgs ClFileSystemEventArgs1 = new ClFileSystemEventArgs(FileSystemEventArgs1);
		|                OneScriptForms.Event = ClFileSystemEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Created);
		|            }
		|        }
		|
		|        public void M_FileSystemWatcher_Deleted(object sender, System.IO.FileSystemEventArgs e)
		|        {
		|            if (Deleted.Length > 0)
		|            {
		|                FileSystemEventArgs FileSystemEventArgs1 = new FileSystemEventArgs();
		|                FileSystemEventArgs1.EventString = Deleted;
		|                FileSystemEventArgs1.Sender = this;
		|                FileSystemEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Deleted);
		|                FileSystemEventArgs1.ChangeType = (int)e.ChangeType;
		|                FileSystemEventArgs1.FullPath = e.FullPath;
		|                FileSystemEventArgs1.Name = e.Name;
		|                ClFileSystemEventArgs ClFileSystemEventArgs1 = new ClFileSystemEventArgs(FileSystemEventArgs1);
		|                OneScriptForms.Event = ClFileSystemEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Deleted);
		|            }
		|        }
		|
		|        public void M_FileSystemWatcher_Renamed(object sender, System.IO.RenamedEventArgs e)
		|        {
		|            if (Renamed.Length > 0)
		|            {
		|                RenamedEventArgs RenamedEventArgs1 = new RenamedEventArgs();
		|                RenamedEventArgs1.EventString = Renamed;
		|                RenamedEventArgs1.Sender = this;
		|                RenamedEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Renamed);
		|                RenamedEventArgs1.ChangeType = (int)e.ChangeType;
		|                RenamedEventArgs1.FullPath = e.FullPath;
		|                RenamedEventArgs1.Name = e.Name;
		|                RenamedEventArgs1.OldFullPath = e.OldFullPath;
		|                RenamedEventArgs1.OldName = e.OldName;
		|                ClRenamedEventArgs ClRenamedEventArgs1 = new ClRenamedEventArgs(RenamedEventArgs1);
		|                OneScriptForms.Event = ClRenamedEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Renamed);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "SortedList" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class SortedList : IEnumerator
		|    {
		|        public ClSortedList dll_obj;
		|        public System.Collections.SortedList M_SortedList;
		|        public IEnumerator Enumerator;
		|
		|        public SortedList()
		|        {
		|            Enumerator = null;
		|            M_SortedList = new System.Collections.SortedList();
		|        }
		|
		|        public SortedList(System.Collections.SortedList p1)
		|        {
		|            Enumerator = null;
		|            M_SortedList = (System.Collections.SortedList)p1;
		|        }
		|
		|        public void Add(object key, object value)
		|        {
		|            M_SortedList.Add(RuntimeHelpers.GetObjectValue(key), RuntimeHelpers.GetObjectValue(value));
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_SortedList.Count; }
		|        }
		|
		|        public DictionaryEntry get_Item(object key)
		|        {
		|            return (DictionaryEntry)M_SortedList[RuntimeHelpers.GetObjectValue(key)];
		|        }
		|
		|        public object GetByIndex(int index)
		|        {
		|            return M_SortedList.GetByIndex(index);
		|        }
		|
		|        public void Remove(object key)
		|        {
		|            M_SortedList.Remove(RuntimeHelpers.GetObjectValue(key));
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public virtual IEnumerator GetEnumerator()
		|        {
		|            Enumerator = M_SortedList.GetEnumerator();
		|            return this;
		|        }
		|
		|        public object Current
		|        {
		|            get { return Enumerator.Current; }
		|        }
		|
		|        public virtual bool MoveNext()
		|        {
		|            return Enumerator.MoveNext();
		|        }
		|
		|        public virtual void Reset()
		|        {
		|            Enumerator.Reset();
		|        }
		|		
		|        public bool ContainsValue(object  p1)
		|        {
		|            return M_SortedList.ContainsValue(p1);
		|        }
		|
		|        public bool ContainsKey(object  p1)
		|        {
		|            return M_SortedList.ContainsKey(p1);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DictionaryEntry" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DictionaryEntry
		|    {
		|        public ClDictionaryEntry dll_obj;
		|        public System.Collections.DictionaryEntry M_DictionaryEntry;
		|
		|        public DictionaryEntry(object p1, object p2)
		|        {
		|            M_DictionaryEntry = new System.Collections.DictionaryEntry(p1, p2);
		|            OneScriptForms.AddToHashtable(M_DictionaryEntry, this);
		|        }
		|
		|        public DictionaryEntry(osf.DictionaryEntry p1)
		|        {
		|            M_DictionaryEntry = p1.M_DictionaryEntry;
		|            OneScriptForms.AddToHashtable(M_DictionaryEntry, this);
		|        }
		|
		|        public DictionaryEntry(System.Collections.DictionaryEntry p1)
		|        {
		|            M_DictionaryEntry = p1;
		|            OneScriptForms.AddToHashtable(M_DictionaryEntry, this);
		|        }
		|
		|        public object Key
		|        {
		|            get{return M_DictionaryEntry.Key;}
		|            set{M_DictionaryEntry.Key = value;}
		|        }
		|
		|        public object Value
		|        {
		|            get{return M_DictionaryEntry.Value;}
		|            set{M_DictionaryEntry.Value = value;}
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Cursors" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Cursors
		|    {
		|        public ClCursors dll_obj;
		|
		|        public osf.Cursor AppStarting
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.AppStarting); }
		|        }
		|
		|        public osf.Cursor Arrow
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.Arrow); }
		|        }
		|
		|        public osf.Cursor Cross
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.Cross); }
		|        }
		|
		|        public osf.Cursor Default
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.Default); }
		|        }
		|
		|        public osf.Cursor Hand
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.Hand); }
		|        }
		|
		|        public osf.Cursor Help
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.Help); }
		|        }
		|
		|        public osf.Cursor HSplit
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.HSplit); }
		|        }
		|
		|        public osf.Cursor IBeam
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.IBeam); }
		|        }
		|
		|        public osf.Cursor No
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.No); }
		|        }
		|
		|        public osf.Cursor NoMove2D
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.NoMove2D); }
		|        }
		|
		|        public osf.Cursor NoMoveHoriz
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.NoMoveHoriz); }
		|        }
		|
		|        public osf.Cursor NoMoveVert
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.NoMoveVert); }
		|        }
		|
		|        public osf.Cursor PanEast
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.PanEast); }
		|        }
		|
		|        public osf.Cursor PanNE
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.PanNE); }
		|        }
		|
		|        public osf.Cursor PanNorth
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.PanNorth); }
		|        }
		|
		|        public osf.Cursor PanNW
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.PanNW); }
		|        }
		|
		|        public osf.Cursor PanSE
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.PanSE); }
		|        }
		|
		|        public osf.Cursor PanSouth
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.PanSouth); }
		|        }
		|
		|        public osf.Cursor PanSW
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.PanSW); }
		|        }
		|
		|        public osf.Cursor PanWest
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.PanWest); }
		|        }
		|
		|        public osf.Cursor SizeAll
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.SizeAll); }
		|        }
		|
		|        public osf.Cursor SizeNESW
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.SizeNESW); }
		|        }
		|
		|        public osf.Cursor SizeNS
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.SizeNS); }
		|        }
		|
		|        public osf.Cursor SizeNWSE
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.SizeNWSE); }
		|        }
		|
		|        public osf.Cursor SizeWE
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.SizeWE); }
		|        }
		|
		|        public osf.Cursor UpArrow
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.UpArrow); }
		|        }
		|
		|        public osf.Cursor VSplit
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.VSplit); }
		|        }
		|
		|        public osf.Cursor WaitCursor
		|        {
		|            get {return new Cursor(System.Windows.Forms.Cursors.WaitCursor); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridTextBoxColumn" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridTextBoxColumnEx : System.Windows.Forms.DataGridTextBoxColumn
		|    {
		|        public osf.DataGridTextBoxColumn M_Object;
		|    }//endClass
		|		
		|    public class DataGridTextBoxColumn : DataGridColumnStyle
		|    {
		|        public ClDataGridTextBoxColumn dll_obj;
		|        public DataGridTextBoxColumnEx M_DataGridTextBoxColumn;
		|        public string DoubleClick;
		|
		|        public DataGridTextBoxColumn()
		|        {
		|            M_DataGridTextBoxColumn = new DataGridTextBoxColumnEx();
		|            M_DataGridTextBoxColumn.M_Object = this;
		|            base.M_DataGridColumnStyle = (System.Windows.Forms.DataGridColumnStyle)M_DataGridTextBoxColumn;
		|            M_DataGridTextBoxColumn.TextBox.DoubleClick += TextBox_DoubleClick;
		|            M_DataGridTextBoxColumn.TextBox.MouseDown += TextBox_MouseDown;
		|            DoubleClick = """";
		|        }
		|		
		|        public DataGridTextBoxColumn(osf.DataGridTextBoxColumn p1)
		|        {
		|            M_DataGridTextBoxColumn = p1.M_DataGridTextBoxColumn;
		|            M_DataGridTextBoxColumn.M_Object = this;
		|            base.M_DataGridColumnStyle = M_DataGridTextBoxColumn;
		|            M_DataGridTextBoxColumn.TextBox.DoubleClick += TextBox_DoubleClick;
		|            M_DataGridTextBoxColumn.TextBox.MouseDown += TextBox_MouseDown;
		|            DoubleClick = """";
		|        }
		|		
		|        public DataGridTextBoxColumn(System.Windows.Forms.DataGridTextBoxColumn p1)
		|        {
		|            M_DataGridTextBoxColumn = (DataGridTextBoxColumnEx)p1;
		|            M_DataGridTextBoxColumn.M_Object = this;
		|            base.M_DataGridColumnStyle = (System.Windows.Forms.DataGridColumnStyle)M_DataGridTextBoxColumn;
		|            M_DataGridTextBoxColumn.TextBox.DoubleClick += TextBox_DoubleClick;
		|            M_DataGridTextBoxColumn.TextBox.MouseDown += TextBox_MouseDown;
		|            DoubleClick = """";
		|        }
		|
		|        public osf.DataGridTextBox TextBox
		|        {
		|            get { return new DataGridTextBox((System.Windows.Forms.DataGridTextBox)M_DataGridTextBoxColumn.TextBox); }
		|        }
		|		
		|        private void TextBox_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		|        {
		|            if (System.DateTime.Now < OneScriptForms.gridMouseDownTime.AddMilliseconds(System.Windows.Forms.SystemInformation.DoubleClickTime))
		|            {
		|                if (DoubleClick.Length > 0)
		|                {
		|                    EventArgs EventArgs1 = new EventArgs();
		|                    EventArgs1.EventString = DoubleClick;
		|                    EventArgs1.Sender = this;
		|                    EventArgs1.Parameter = OneScriptForms.GetEventParameter(dll_obj.DoubleClick);
		|                    ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                    OneScriptForms.Event = ClEventArgs1;
		|                    OneScriptForms.ExecuteEvent(dll_obj.DoubleClick);
		|                }
		|            }
		|        }
		|
		|        private void TextBox_DoubleClick(object sender, System.EventArgs e)
		|        {
		|            if (DoubleClick.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = DoubleClick;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(dll_obj.DoubleClick);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(dll_obj.DoubleClick);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridColumnStyle" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridColumnStyle : Component
		|    {
		|        public System.Windows.Forms.DataGridColumnStyle M_DataGridColumnStyle;
		|
		|        public DataGridColumnStyle()
		|        {
		|        }
		|
		|        public DataGridColumnStyle(osf.DataGridColumnStyle p1)
		|        {
		|            M_DataGridColumnStyle = p1.M_DataGridColumnStyle;
		|            base.M_Component = M_DataGridColumnStyle;
		|        }
		|
		|        public DataGridColumnStyle(System.Windows.Forms.DataGridColumnStyle p1)
		|        {
		|            M_DataGridColumnStyle = p1;
		|            base.M_Component = M_DataGridColumnStyle;
		|        }
		|
		|        public int Alignment
		|        {
		|            get { return (int)M_DataGridColumnStyle.Alignment; }
		|            set { M_DataGridColumnStyle.Alignment = (System.Windows.Forms.HorizontalAlignment)value; }
		|        }
		|
		|        public string HeaderText
		|        {
		|            get { return M_DataGridColumnStyle.HeaderText; }
		|            set { M_DataGridColumnStyle.HeaderText = value; }
		|        }
		|
		|        public string MappingName
		|        {
		|            get { return M_DataGridColumnStyle.MappingName; }
		|            set { M_DataGridColumnStyle.MappingName = value; }
		|        }
		|
		|        public int Width
		|        {
		|            get { return M_DataGridColumnStyle.Width; }
		|            set { M_DataGridColumnStyle.Width = value; }
		|        }
		|		
		|        public bool ReadOnly
		|        {
		|            get { return M_DataGridColumnStyle.ReadOnly; }
		|            set { M_DataGridColumnStyle.ReadOnly = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridTextBox" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridTextBox : TextBox
		|    {
		|        public new ClDataGridTextBox dll_obj;
		|        public System.Windows.Forms.DataGridTextBox M_DataGridTextBox;
		|
		|        public DataGridTextBox()
		|        {
		|            M_DataGridTextBox = new System.Windows.Forms.DataGridTextBox();
		|            base.M_Control = M_DataGridTextBox;
		|        }
		|
		|        public DataGridTextBox(System.Windows.Forms.TextBox p1)
		|        {
		|            M_DataGridTextBox = (System.Windows.Forms.DataGridTextBox)p1;
		|            base.M_Control = M_DataGridTextBox;
		|        }
		|
		|        public DataGridTextBox(osf.DataGridTextBox p1)
		|        {
		|            M_DataGridTextBox = p1.M_DataGridTextBox;
		|            base.M_Control = M_DataGridTextBox;
		|        }
		|
		|        public DataGridTextBox(System.Windows.Forms.DataGridTextBox p1)
		|        {
		|            M_DataGridTextBox = p1;
		|            base.M_Control = M_DataGridTextBox;
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "GridColumnStylesCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class GridColumnStylesCollection : CollectionBase
		|    {
		|        public ClGridColumnStylesCollection dll_obj;
		|        public System.Windows.Forms.GridColumnStylesCollection M_GridColumnStylesCollection;
		|
		|        public GridColumnStylesCollection(System.Windows.Forms.GridColumnStylesCollection p1)
		|        {
		|            M_GridColumnStylesCollection = p1;
		|            base.List = M_GridColumnStylesCollection;
		|        }
		|
		|        public int Add(osf.DataGridColumnStyle p1)
		|        {
		|            int res = Convert.ToInt32(M_GridColumnStylesCollection.Add((System.Windows.Forms.DataGridColumnStyle)p1.M_DataGridColumnStyle));
		|            System.Windows.Forms.Application.DoEvents();
		|            return res;
		|        }
		|
		|        public new osf.DataGridColumnStyle this[int p1]
		|        {
		|            get { return new DataGridColumnStyle(M_GridColumnStylesCollection[p1]); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridTableStyle" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridTableStyleEx : System.Windows.Forms.DataGridTableStyle
		|    {
		|        public osf.DataGridTableStyle M_Object;
		|    }//endClass
		|
		|    public class DataGridTableStyle : Component
		|    {
		|        public ClDataGridTableStyle dll_obj;
		|        public DataGridTableStyleEx M_DataGridTableStyle;
		|
		|        public DataGridTableStyle()
		|        {
		|            M_DataGridTableStyle = new DataGridTableStyleEx();
		|            M_DataGridTableStyle.M_Object = this;
		|            base.M_Component = M_DataGridTableStyle;
		|        }
		|		
		|        public DataGridTableStyle(osf.DataGridTableStyle p1)
		|        {
		|            M_DataGridTableStyle = p1.M_DataGridTableStyle;
		|            M_DataGridTableStyle.M_Object = this;
		|            base.M_Component = M_DataGridTableStyle;
		|        }
		|
		|        public DataGridTableStyle(System.Windows.Forms.DataGridTableStyle p1)
		|        {
		|            M_DataGridTableStyle = (DataGridTableStyleEx)p1;
		|            M_DataGridTableStyle.M_Object = this;
		|            base.M_Component = M_DataGridTableStyle;
		|        }
		|
		|        public osf.GridColumnStylesCollection GridColumnStyles
		|        {
		|            get { return new GridColumnStylesCollection(M_DataGridTableStyle.GridColumnStyles); }
		|        }
		|
		|        public string MappingName
		|        {
		|            get { return M_DataGridTableStyle.MappingName; }
		|            set { M_DataGridTableStyle.MappingName = value; }
		|        }
		|
		|        public osf.Color ForeColor
		|        {
		|            get { return new Color(M_DataGridTableStyle.ForeColor); }
		|            set { M_DataGridTableStyle.ForeColor = value.M_Color; }
		|        }
		|
		|        public osf.Color HeaderForeColor
		|        {
		|            get { return new Color(M_DataGridTableStyle.HeaderForeColor); }
		|            set { M_DataGridTableStyle.HeaderForeColor = value.M_Color; }
		|        }
		|
		|        public bool ColumnHeadersVisible
		|        {
		|            get { return M_DataGridTableStyle.ColumnHeadersVisible; }
		|            set { M_DataGridTableStyle.ColumnHeadersVisible = value; }
		|        }
		|
		|        public bool RowHeadersVisible
		|        {
		|            get { return M_DataGridTableStyle.RowHeadersVisible; }
		|            set { M_DataGridTableStyle.RowHeadersVisible = value; }
		|        }
		|
		|        public int PreferredRowHeight
		|        {
		|            get { return M_DataGridTableStyle.PreferredRowHeight; }
		|            set { M_DataGridTableStyle.PreferredRowHeight = value; }
		|        }
		|		
		|        public int PreferredColumnWidth
		|        {
		|            get { return M_DataGridTableStyle.PreferredColumnWidth; }
		|            set { M_DataGridTableStyle.PreferredColumnWidth = value; }
		|        }
		|
		|        public bool AllowSorting
		|        {
		|            get { return M_DataGridTableStyle.AllowSorting; }
		|            set { M_DataGridTableStyle.AllowSorting = value; }
		|        }
		|
		|        public osf.DataGrid DataGrid
		|        {
		|            get { return ((DataGridEx)(M_DataGridTableStyle.DataGrid)).M_Object; }
		|            set { M_DataGridTableStyle.DataGrid = value.M_DataGrid; }
		|        }
		|
		|        public bool ReadOnly
		|        {
		|            get { return M_DataGridTableStyle.ReadOnly; }
		|            set { M_DataGridTableStyle.ReadOnly = value; }
		|        }
		|
		|        public osf.Color GridLineColor
		|        {
		|            get { return new Color(M_DataGridTableStyle.GridLineColor); }
		|            set { M_DataGridTableStyle.GridLineColor = value.M_Color; }
		|        }
		|
		|        public osf.Color BackColor
		|        {
		|            get { return new Color(M_DataGridTableStyle.BackColor); }
		|            set { M_DataGridTableStyle.BackColor = value.M_Color; }
		|        }
		|
		|        public osf.Color HeaderBackColor
		|        {
		|            get { return new Color(M_DataGridTableStyle.HeaderBackColor); }
		|            set { M_DataGridTableStyle.HeaderBackColor = value.M_Color; }
		|        }
		|
		|        public osf.Color AlternatingBackColor
		|        {
		|            get { return new Color(M_DataGridTableStyle.AlternatingBackColor); }
		|            set { M_DataGridTableStyle.AlternatingBackColor = value.M_Color; }
		|        }
		|
		|        public int RowHeaderWidth
		|        {
		|            get { return M_DataGridTableStyle.RowHeaderWidth; }
		|            set { M_DataGridTableStyle.RowHeaderWidth = value; }
		|        }
		|
		|        public osf.Font HeaderFont
		|        {
		|            get { return new Font(M_DataGridTableStyle.HeaderFont); }
		|            set { M_DataGridTableStyle.HeaderFont = value.M_Font; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "GridTableStylesCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class GridTableStylesCollection : CollectionBase
		|    {
		|        public ClGridTableStylesCollection dll_obj;
		|        public System.Windows.Forms.GridTableStylesCollection M_GridTableStylesCollection;
		|
		|        public GridTableStylesCollection(System.Windows.Forms.GridTableStylesCollection p1)
		|        {
		|            M_GridTableStylesCollection = p1;
		|            base.List = M_GridTableStylesCollection;
		|        }
		|
		|        public int Add(osf.DataGridTableStyle p1)
		|        {
		|            int res = Convert.ToInt32(M_GridTableStylesCollection.Add((System.Windows.Forms.DataGridTableStyle)p1.M_DataGridTableStyle));
		|            System.Windows.Forms.Application.DoEvents();
		|            return res;
		|        }
		|
		|        public new osf.DataGridTableStyle this[int p1]
		|        {
		|            get { return ((DataGridTableStyleEx)M_GridTableStylesCollection[p1]).M_Object; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridCell" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridCell
		|    {
		|        public ClDataGridCell dll_obj;
		|        public System.Windows.Forms.DataGridCell M_DataGridCell;
		|
		|        public DataGridCell(int p1, int p2)
		|        {
		|            M_DataGridCell = new System.Windows.Forms.DataGridCell(p1, p2);
		|            M_DataGridCell.RowNumber = p1;
		|            M_DataGridCell.ColumnNumber = p2;
		|            OneScriptForms.AddToHashtable(M_DataGridCell, this);
		|        }
		|
		|        public DataGridCell(osf.DataGridCell p1)
		|        {
		|            M_DataGridCell = p1.M_DataGridCell;
		|            OneScriptForms.AddToHashtable(M_DataGridCell, this);
		|        }
		|		
		|        public DataGridCell(System.Windows.Forms.DataGridCell p1)
		|        {
		|            M_DataGridCell = p1;
		|            OneScriptForms.AddToHashtable(M_DataGridCell, this);
		|        }
		|
		|        public int ColumnNumber
		|        {
		|            get { return M_DataGridCell.ColumnNumber; }
		|            set
		|            {
		|                M_DataGridCell.ColumnNumber = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int RowNumber
		|        {
		|            get { return M_DataGridCell.RowNumber; }
		|            set
		|            {
		|                M_DataGridCell.RowNumber = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGrid" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridEx : System.Windows.Forms.DataGrid
		|    {
		|        public osf.DataGrid M_Object;
		|    }//endClass
		|
		|    public class DataGrid : Control
		|    {
		|        public ClDataGrid dll_obj;
		|        public string CurrentCellChanged;
		|        public DataGridEx M_DataGrid;
		|
		|        public DataGrid()
		|        {
		|            M_DataGrid = new DataGridEx();
		|            M_DataGrid.M_Object = this;
		|            base.M_Control = M_DataGrid;
		|            M_DataGrid.CurrentCellChanged += M_DataGrid_CurrentCellChanged;
		|            M_DataGrid.MouseDown += M_DataGrid_MouseDown;
		|            CurrentCellChanged = """";
		|        }
		|
		|        public DataGrid(osf.DataGrid p1)
		|        {
		|            M_DataGrid = p1.M_DataGrid;
		|            M_DataGrid.M_Object = this;
		|            base.M_Control = M_DataGrid;
		|            M_DataGrid.CurrentCellChanged += M_DataGrid_CurrentCellChanged;
		|            M_DataGrid.MouseDown += M_DataGrid_MouseDown;
		|            CurrentCellChanged = """";
		|        }
		|
		|        public DataGrid(System.Windows.Forms.DataGrid p1)
		|        {
		|            M_DataGrid = (DataGridEx)p1;
		|            M_DataGrid.M_Object = this;
		|            base.M_Control = M_DataGrid;
		|            M_DataGrid.CurrentCellChanged += M_DataGrid_CurrentCellChanged;
		|            M_DataGrid.MouseDown += M_DataGrid_MouseDown;
		|            CurrentCellChanged = """";
		|        }
		|		
		|        private void M_DataGrid_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		|        {
		|            OneScriptForms.gridMouseDownTime = DateTime.Now;
		|        }
		|
		|        public bool AllowSorting
		|        {
		|            get { return M_DataGrid.AllowSorting; }
		|            set
		|            {
		|                M_DataGrid.AllowSorting = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Color BackgroundColor
		|        {
		|            get { return new Color(M_DataGrid.BackgroundColor); }
		|            set
		|            {
		|                M_DataGrid.BackgroundColor = value.M_Color;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Color CaptionBackColor
		|        {
		|            get { return new Color(M_DataGrid.CaptionBackColor); }
		|            set
		|            {
		|                M_DataGrid.CaptionBackColor = value.M_Color;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string CaptionText
		|        {
		|            get { return M_DataGrid.CaptionText; }
		|            set
		|            {
		|                M_DataGrid.CaptionText = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool CaptionVisible
		|        {
		|            get { return M_DataGrid.CaptionVisible; }
		|            set
		|            {
		|                M_DataGrid.CaptionVisible = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.DataGridCell CurrentCell
		|        {
		|            get { return new DataGridCell(M_DataGrid.CurrentCell); }
		|            set
		|            {
		|                M_DataGrid.CurrentCell = value.M_DataGridCell;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int CurrentRowIndex
		|        {
		|            get { return M_DataGrid.CurrentRowIndex; }
		|            set
		|            {
		|                M_DataGrid.CurrentRowIndex = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string DataMember
		|        {
		|            get { return M_DataGrid.DataMember; }
		|            set { M_DataGrid.DataMember = value; }
		|        }
		|
		|        public object DataSource
		|        {
		|            get
		|            {
		|                if (M_DataGrid.DataSource != null)
		|                {
		|                    if (M_DataGrid.DataSource.GetType() == typeof(System.Data.DataView))
		|                    {
		|                        osf.DataView DataView1 = new osf.DataView((System.Data.DataView)M_DataGrid.DataSource);
		|                        return (dynamic)DataView1;
		|                    }
		|                    else
		|                    {
		|                        return ((dynamic)M_DataGrid.DataSource).M_Object;
		|                    }
		|                }
		|                return null;
		|            }
		|            set
		|            {
		|                System.Type Type1 = ((dynamic)value).GetType();
		|                string strType1 = Type1.ToString();
		|                string str1 = strType1.Substring(strType1.LastIndexOf(""."") + 1);
		|                M_DataGrid.DataSource = Type1.GetField(""M_"" + str1).GetValue(value);
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Rectangle GetCurrentCellBounds()
		|        {
		|            return new Rectangle(M_DataGrid.GetCurrentCellBounds());
		|        }
		|
		|        public bool IsSelected(int row)
		|        {
		|            return M_DataGrid.IsSelected(row);
		|        }
		|
		|        public bool ReadOnly
		|        {
		|            get { return M_DataGrid.ReadOnly; }
		|            set
		|            {
		|                M_DataGrid.ReadOnly = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void SetDataBinding(object source, string member = null)
		|        {
		|            if (source is osf.DataView)
		|            {
		|                M_DataGrid.SetDataBinding((System.Data.DataView)((osf.DataView)source).M_DataView, member);
		|            }
		|            if (source is osf.DataTable)
		|            {
		|                M_DataGrid.SetDataBinding((System.Data.DataTable)((osf.DataTable)source).M_DataTable, member);
		|            }
		|            if (source is osf.DataSet)
		|            {
		|                M_DataGrid.SetDataBinding((System.Data.DataSet)((osf.DataSet)source).M_DataSet, member);
		|            }
		|            if (source is osf.ArrayList)
		|            {
		|                M_DataGrid.SetDataBinding((System.Collections.ArrayList)((osf.ArrayList)source).M_ArrayList, member);
		|            }
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public osf.GridTableStylesCollection TableStyles
		|        {
		|            get { return new GridTableStylesCollection(M_DataGrid.TableStyles); }
		|        }
		|
		|        public void M_DataGrid_CurrentCellChanged(object sender, System.EventArgs e)
		|        {
		|            if (CurrentCellChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = CurrentCellChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.CurrentCellChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.CurrentCellChanged);
		|            }
		|        }
		|
		|        public int PreferredRowHeight
		|        {
		|            get { return M_DataGrid.PreferredRowHeight; }
		|            set { M_DataGrid.PreferredRowHeight = value; }
		|        }
		|
		|        public bool EndEdit(osf.DataGridColumnStyle p1, int p2, bool p3)
		|        {
		|            return M_DataGrid.EndEdit(p1.M_DataGridColumnStyle, p2, p3);
		|        }
		|
		|        public bool BeginEdit(osf.DataGridColumnStyle p1, int p2)
		|        {
		|            return M_DataGrid.BeginEdit(p1.M_DataGridColumnStyle, p2);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataItem" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataItem
		|    {
		|        public ClDataItem dll_obj;
		|        public System.Data.DataRow M_DataRow;
		|        public object Index;
		|
		|        public DataItem()
		|        {
		|        }
		|
		|        public DataItem(System.Data.DataRow p1, object p2)
		|        {
		|            M_DataRow = p1;
		|            Index = p2;
		|        }
		|		
		|        public DataItem(osf.DataItem p1)
		|        {
		|            M_DataRow = p1.M_DataRow;
		|            Index = p1.Index;
		|        }
		|
		|        public osf.DataRow DataRow
		|        {
		|            get { return new DataRow(M_DataRow); }
		|            set { M_DataRow = value.M_DataRow; }
		|        }
		|
		|        public object Value
		|        {
		|            get
		|            {
		|                if (Index != null)
		|                {
		|                    if (Index.GetType() == typeof(int))
		|                    {
		|                        return M_DataRow[Convert.ToInt32(Index)];
		|                    }
		|                    if (Index.GetType() == typeof(string))
		|                    {
		|                        return M_DataRow[Convert.ToString(Index)];
		|                    }
		|                }
		|                return null;
		|            }
		|            set
		|            {
		|                if (Index is string)
		|                {
		|                    M_DataRow[(string)Index] = value;
		|                }
		|                else
		|                {
		|                    M_DataRow[(int)Index] = value;
		|                }
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataRowCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataRowCollection : ICollection, IEnumerable, IEnumerator
		|    {
		|        public ClDataRowCollection dll_obj;
		|        public System.Data.DataRowCollection M_DataRowCollection;
		|        private System.Collections.IEnumerator Enumerator;
		|
		|        public DataRowCollection(System.Data.DataRowCollection p1)
		|        {
		|            M_DataRowCollection = p1;
		|        }
		|
		|        public osf.DataRow Add(DataRow p1)
		|        {
		|            M_DataRowCollection.Add(p1.M_DataRow);
		|            return p1;
		|        }
		|
		|        public void Clear()
		|        {
		|            M_DataRowCollection.Clear();
		|        }
		|
		|        public osf.DataRow InsertAt(osf.DataRow p1, int index)
		|        {
		|            M_DataRowCollection.InsertAt(p1.M_DataRow, index);
		|            return p1;
		|        }
		|
		|        public void Remove(DataRow p1)
		|        {
		|            M_DataRowCollection.Remove(p1.M_DataRow);
		|        }
		|
		|        public void RemoveAt(int p1)
		|        {
		|            M_DataRowCollection.RemoveAt(p1);
		|        }
		|
		|        public osf.DataRow this[int index]
		|        {
		|            get { return new DataRow(M_DataRowCollection[index]); }
		|            set
		|            {
		|            }
		|        }
		|
		|        public void CopyTo(Array array, int index)
		|        {
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_DataRowCollection.Count; }
		|        }
		|
		|        public bool IsSynchronized
		|        {
		|            get { return M_DataRowCollection.IsSynchronized; }
		|        }
		|
		|        public object SyncRoot
		|        {
		|            get { return M_DataRowCollection.SyncRoot; }
		|        }
		|
		|        public System.Collections.IEnumerator GetEnumerator()
		|        {
		|            Enumerator = M_DataRowCollection.GetEnumerator();
		|            return (IEnumerator)this;
		|        }
		|
		|        public object Current
		|        {
		|            get { return new DataRow((System.Data.DataRow)Enumerator.Current); }
		|        }
		|
		|        public bool MoveNext()
		|        {
		|            return Enumerator.MoveNext();
		|        }
		|
		|        public void Reset()
		|        {
		|            Enumerator.Reset();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataRow" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataRow
		|    {
		|        public ClDataRow dll_obj;
		|        public System.Data.DataRow M_DataRow;
		|
		|        public DataRow(osf.DataRow p1)
		|        {
		|            M_DataRow = p1.M_DataRow;
		|            OneScriptForms.AddToHashtable(M_DataRow, this);
		|        }
		|
		|        public DataRow(System.Data.DataRow p1)
		|        {
		|            M_DataRow = p1;
		|            OneScriptForms.AddToHashtable(M_DataRow, this);
		|        }
		|
		|        public void AcceptChanges()
		|        {
		|            M_DataRow.AcceptChanges();
		|        }
		|
		|        public object get_Item(object index)
		|        {
		|            return (object)new DataItem(M_DataRow, index);
		|        }
		|
		|        public void SetItem(object index, object item)
		|        {
		|            if (index is string)
		|            {
		|                M_DataRow[(string)index] = item;
		|            }
		|            else
		|            {
		|                M_DataRow[(int)index] = item;
		|            }
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|		
		|        public void BeginEdit()
		|        {
		|            M_DataRow.BeginEdit();
		|        }
		|
		|        public void EndEdit()
		|        {
		|            M_DataRow.EndEdit();
		|        }
		|
		|        public void RejectChanges()
		|        {
		|            M_DataRow.RejectChanges();
		|        }
		|		
		|        public void Delete()
		|        {
		|            M_DataRow.Delete();
		|        }
		|		
		|        public void CancelEdit()
		|        {
		|            M_DataRow.CancelEdit();
		|        }
		|
		|        public int RowState
		|        {
		|            get { return (int)M_DataRow.RowState; }
		|        }
		|		
		|        public osf.DataTable Table
		|        {
		|            get { return ((osf.DataTableEx)M_DataRow.Table).M_Object; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataView" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataView : IEnumerable, IEnumerator
		|    {
		|        public ClDataView dll_obj;
		|        public System.Data.DataView M_DataView;
		|        private System.Collections.IEnumerator Enumerator;
		|
		|        public DataView()
		|        {
		|            M_DataView = new System.Data.DataView();
		|            OneScriptForms.AddToHashtable(M_DataView, this);
		|        }
		|
		|        public DataView(osf.DataView p1)
		|        {
		|            M_DataView = p1.M_DataView;
		|            OneScriptForms.AddToHashtable(M_DataView, this);
		|        }
		|
		|        public DataView(System.Data.DataView p1)
		|        {
		|            M_DataView = p1;
		|            OneScriptForms.AddToHashtable(M_DataView, this);
		|        }
		|
		|        public osf.DataRowView AddNew()
		|        {
		|            return new DataRowView(M_DataView.AddNew());
		|        }
		|
		|        public bool AllowEdit
		|        {
		|            get { return M_DataView.AllowEdit; }
		|            set
		|            {
		|                M_DataView.AllowEdit = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool AllowNew
		|        {
		|            get { return M_DataView.AllowNew; }
		|            set
		|            {
		|                M_DataView.AllowNew = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool ApplyDefaultSort
		|        {
		|            get { return M_DataView.ApplyDefaultSort; }
		|            set
		|            {
		|                M_DataView.ApplyDefaultSort = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void BeginInit()
		|        {
		|            M_DataView.BeginInit();
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_DataView.Count; }
		|        }
		|
		|        public void EndInit()
		|        {
		|            M_DataView.EndInit();
		|        }
		|
		|        public object get_Item(int index)
		|        {
		|            return new DataRowView(M_DataView[index]);
		|        }
		|
		|        public string RowFilter
		|        {
		|            get { return M_DataView.RowFilter; }
		|            set { M_DataView.RowFilter = value; }
		|        }
		|
		|        public string Sort
		|        {
		|            get { return M_DataView.Sort; }
		|            set { M_DataView.Sort = value; }
		|        }
		|
		|        public osf.DataTable Table
		|        {
		|            get { return  (DataTable)((DataTableEx)M_DataView.Table).M_Object; }
		|            set { M_DataView.Table = (System.Data.DataTable)value.M_DataTable; }
		|        }
		|
		|        public System.Collections.IEnumerator GetEnumerator()
		|        {
		|            Enumerator = M_DataView.GetEnumerator();
		|            return (IEnumerator)this;
		|        }
		|
		|        public object Current
		|        {
		|            get { return (object)new DataRow((System.Data.DataRow)Enumerator.Current); }
		|        }
		|
		|        public bool MoveNext()
		|        {
		|            return Enumerator.MoveNext();
		|        }
		|
		|        public void Reset()
		|        {
		|            Enumerator.Reset();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataSet" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataSetEx : System.Data.DataSet
		|    {
		|        public osf.DataSet M_Object;
		|    }//endClass
		|		
		|    public class DataSet
		|    {
		|        public ClDataSet dll_obj;
		|        public DataSetEx M_DataSet;
		|
		|        public DataSet()
		|        {
		|            M_DataSet = new DataSetEx();
		|            M_DataSet.M_Object = this;
		|        }
		|

		|        public DataSet(osf.DataSet p1)
		|        {
		|            M_DataSet = p1.M_DataSet;
		|            M_DataSet.M_Object = this;
		|        }
		|
		|        public DataSet(System.Data.DataSet p1)
		|        {
		|            M_DataSet = (DataSetEx)p1;
		|            M_DataSet.M_Object = this;
		|        }
		|
		|        public void AcceptChanges()
		|        {
		|            M_DataSet.AcceptChanges();
		|        }
		|
		|        public string DataSetName
		|        {
		|            get { return M_DataSet.DataSetName; }
		|            set { M_DataSet.DataSetName = value; }
		|        }
		|
		|        public bool HasChanges()
		|        {
		|            return M_DataSet.HasChanges();
		|        }
		|
		|        public void RejectChanges()
		|        {
		|            M_DataSet.RejectChanges();
		|        }
		|
		|        public osf.DataTableCollection Tables
		|        {
		|            get
		|            {
		|                if (M_DataSet.Tables != null)
		|                {
		|                    return new DataTableCollection(M_DataSet.Tables);
		|                }
		|                return null;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataTable" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataTableEx : System.Data.DataTable
		|    {
		|        public osf.DataTable M_Object;
		|    }//endClass
		|
		|    public class DataTable
		|    {
		|        public ClDataTable dll_obj;
		|        public DataTableEx M_DataTable;
		|
		|        public DataTable()
		|        {
		|            M_DataTable = new DataTableEx();
		|            M_DataTable.M_Object = this;
		|        }
		|
		|        public DataTable(string p1)
		|        {
		|            M_DataTable = new DataTableEx();
		|            M_DataTable.M_Object = this;
		|            M_DataTable.TableName = p1;
		|        }
		|
		|        public DataTable(osf.DataTable p1)
		|        {
		|            M_DataTable = p1.M_DataTable;
		|            M_DataTable.M_Object = this;
		|        }
		|
		|        public DataTable(System.Data.DataTable p1)
		|        {
		|            M_DataTable = (DataTableEx)p1;
		|            M_DataTable.M_Object = this;
		|        }
		|
		|        public void AcceptChanges()
		|        {
		|            M_DataTable.AcceptChanges();
		|        }
		|
		|        public osf.DataTable Clone()
		|        {
		|            return new DataTable(M_DataTable.Clone());
		|        }
		|
		|        public osf.DataColumn get_Column(object p1)
		|        {
		|            if (p1 is int)
		|            {
		|                return ((DataColumnEx)(M_DataTable.Columns[Convert.ToInt32(p1)])).M_Object;
		|            }
		|            else
		|            {
		|                return ((DataColumnEx)(M_DataTable.Columns[Convert.ToString(p1)])).M_Object;
		|            }
		|        }
		|
		|        public osf.DataColumnCollection Columns
		|        {
		|            get { return new DataColumnCollection(M_DataTable.Columns); }
		|        }
		|
		|        public osf.DataTable Copy()
		|        {
		|            return new DataTable(M_DataTable.Copy());
		|        }
		|
		|        public osf.DataSet DataSet
		|        {
		|            get { return ((DataSetEx)M_DataTable.DataSet).M_Object; }
		|        }
		|
		|        public osf.DataView DefaultView
		|        {
		|            get { return new DataView(M_DataTable.DefaultView); }
		|        }
		|
		|        public osf.DataRow NewRow()
		|        {
		|            return new DataRow(M_DataTable.NewRow());
		|        }
		|
		|        public void RejectChanges()
		|        {
		|            M_DataTable.RejectChanges();
		|        }
		|
		|        public osf.DataRowCollection Rows
		|        {
		|            get { return new DataRowCollection(M_DataTable.Rows); }
		|        }
		|
		|        public object[] Select(string filter)
		|        {
		|            System.Data.DataRow[] dataRowArray = M_DataTable.Select(filter);
		|            int num1 = dataRowArray.Length;
		|            object[] objArray = new object[num1];
		|            for (int i = 0; i < dataRowArray.Length; i++)
		|            {
		|                objArray[i] = (object)new DataRow(dataRowArray[i]);
		|            }
		|            return objArray;
		|        }
		|
		|        public void Sort(string expression)
		|        {
		|            if (M_DataTable.Rows.Count > 0)
		|            {
		|                System.Data.DataTable DataTable1 = M_DataTable.Copy();
		|                M_DataTable.Clear();
		|                System.Data.DataRow[] DataRowArray1 = DataTable1.Select((string)null, expression);
		|                for (int i = 0; i < DataRowArray1.Length; i++)
		|                {
		|                    M_DataTable.ImportRow(DataRowArray1[i]);
		|                }
		|            }
		|        }
		|
		|        public string TableName
		|        {
		|            get { return M_DataTable.TableName; }
		|            set { M_DataTable.TableName = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataTableCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataTableCollection : ICollection, IEnumerable, IEnumerator
		|    {
		|        public ClDataTableCollection dll_obj;
		|        public System.Data.DataTableCollection M_DataTableCollection;
		|        private System.Collections.IEnumerator Enumerator;
		|
		|        public DataTableCollection(System.Data.DataTableCollection p1)
		|        {
		|            M_DataTableCollection = p1;
		|        }
		|
		|        public osf.DataTable Add(osf.DataTable p1 = null)
		|        {
		|            if (p1 == null)
		|            {
		|                return new DataTable(M_DataTableCollection.Add());
		|            }
		|            M_DataTableCollection.Add(p1.M_DataTable);
		|            return p1;
		|        }
		|
		|        public void Remove(object p1)
		|        {
		|            if (p1 is DataTable)
		|            {
		|                M_DataTableCollection.Remove(((DataTable)p1).M_DataTable);
		|            }
		|            else
		|            {
		|                M_DataTableCollection.Remove(Convert.ToString(p1));
		|            }
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void RemoveAt(int p1)
		|        {
		|            M_DataTableCollection.RemoveAt(p1);
		|        }
		|
		|        public osf.DataTable this[object p1]
		|        {
		|            get
		|            {
		|                if (p1 is int)
		|                {
		|                    return ((DataTableEx)M_DataTableCollection[(int)p1]).M_Object;
		|                }
		|                return ((DataTableEx)M_DataTableCollection[(string)p1]).M_Object;
		|            }
		|        }
		|
		|        public void CopyTo(Array array, int index)
		|        {
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_DataTableCollection.Count; }
		|        }
		|
		|        public bool IsSynchronized
		|        {
		|            get { return M_DataTableCollection.IsSynchronized; }
		|        }
		|
		|        public object SyncRoot
		|        {
		|            get { return M_DataTableCollection.SyncRoot; }
		|        }
		|
		|        public IEnumerator GetEnumerator()
		|        {
		|            Enumerator = M_DataTableCollection.GetEnumerator();
		|            return (IEnumerator)this;
		|        }
		|
		|        public object Current
		|        {
		|            get { return ((DataTableEx)(System.Data.DataTable)Enumerator.Current).M_Object; }
		|        }
		|
		|        public bool MoveNext()
		|        {
		|            return Enumerator.MoveNext();
		|        }
		|
		|        public void Reset()
		|        {
		|            Enumerator.Reset();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataColumnCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataColumnCollection : ICollection, IEnumerable, IEnumerator
		|    {
		|        public ClDataColumnCollection dll_obj;
		|        public System.Data.DataColumnCollection M_DataColumnCollection;
		|        public System.Collections.IEnumerator Enumerator;
		|
		|        public DataColumnCollection(System.Data.DataColumnCollection p1)
		|        {
		|            M_DataColumnCollection = p1;
		|        }
		|
		|        public osf.DataColumn AddItem(string p1)
		|        {
		|            DataColumn DataColumn1 = new DataColumn(p1);
		|            M_DataColumnCollection.Add(DataColumn1.M_DataColumn);
		|            System.Windows.Forms.Application.DoEvents();
		|            return DataColumn1;
		|        }
		|
		|        public osf.DataColumn Add(osf.DataColumn p1)
		|        {
		|            M_DataColumnCollection.Add(p1.M_DataColumn);
		|            System.Windows.Forms.Application.DoEvents();
		|            return p1;
		|        }
		|
		|        public void Clear()
		|        {
		|            M_DataColumnCollection.Clear();
		|        }
		|
		|        public void Remove(osf.DataColumn p1)
		|        {
		|            M_DataColumnCollection.Remove(p1.M_DataColumn);
		|        }
		|
		|        public void RemoveAt(int index)
		|        {
		|            M_DataColumnCollection.RemoveAt(index);
		|        }
		|
		|        public osf.DataColumn this[object index]
		|        {
		|            get
		|            {
		|                if (index is string)
		|                {
		|                    return new osf.DataColumn(M_DataColumnCollection[Convert.ToString(index)]);
		|                }
		|                return new osf.DataColumn(M_DataColumnCollection[Convert.ToInt32(index)]);
		|            }
		|            set
		|            {
		|            }
		|        }
		|
		|        public void CopyTo(Array array, int index)
		|        {
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_DataColumnCollection.Count; }
		|        }
		|
		|        public bool IsSynchronized
		|        {
		|            get { return M_DataColumnCollection.IsSynchronized; }
		|        }
		|
		|        public object SyncRoot
		|        {
		|            get { return M_DataColumnCollection.SyncRoot; }
		|        }
		|
		|        public System.Collections.IEnumerator GetEnumerator()
		|        {
		|            Enumerator = M_DataColumnCollection.GetEnumerator();
		|            return (IEnumerator)this;
		|        }
		|
		|        public object Current
		|        {
		|            get { return (object)((DataColumnEx)((System.Data.DataColumn)Enumerator.Current)).M_Object; }
		|        }
		|
		|        public bool MoveNext()
		|        {
		|            return Enumerator.MoveNext();
		|        }
		|
		|        public void Reset()
		|        {
		|            Enumerator.Reset();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataColumn" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataColumnEx : System.Data.DataColumn
		|    {
		|        public osf.DataColumn M_Object;
		|
		|        public DataColumnEx()
		|        {
		|        }
		|
		|        public DataColumnEx(string p1) : base(p1)
		|        {
		|        }
		|
		|        public DataColumnEx(string p1, System.Type p2) : base(p1, p2)
		|        {
		|        }
		|    }//endClass
		|
		|    public class DataColumn
		|    {
		|        public ClDataColumn dll_obj;
		|        public DataColumnEx M_DataColumn;
		|
		|        public DataColumn()
		|        {
		|            M_DataColumn = new DataColumnEx();
		|            M_DataColumn.M_Object = this;
		|        }
		|        public DataColumn(string p1)
		|        {
		|            M_DataColumn = new DataColumnEx(p1);
		|            M_DataColumn.M_Object = this;
		|        }
		|        public DataColumn(string p1, System.Type p2)
		|        {
		|            M_DataColumn = new DataColumnEx(p1, p2);
		|            M_DataColumn.M_Object = this;
		|        }
		|
		|        public DataColumn(osf.DataColumn p1)
		|        {
		|            M_DataColumn = p1.M_DataColumn;
		|            M_DataColumn.M_Object = this;
		|        }
		|
		|        public DataColumn(System.Data.DataColumn p1)
		|        {
		|            M_DataColumn = (DataColumnEx)p1;
		|            M_DataColumn.M_Object = this;
		|        }
		|
		|        public bool AutoIncrement
		|        {
		|            get { return M_DataColumn.AutoIncrement; }
		|            set { M_DataColumn.AutoIncrement = value; }
		|        }
		|
		|        public string ColumnName
		|        {
		|            get { return M_DataColumn.ColumnName; }
		|            set { M_DataColumn.ColumnName = value; }
		|        }
		|
		|        public string Caption
		|        {
		|            get { return M_DataColumn.Caption; }
		|            set { M_DataColumn.Caption = value; }
		|        }
		|
		|        public System.Type DataType
		|        {
		|            get { return M_DataColumn.DataType; }
		|            set { M_DataColumn.DataType = value; }
		|        }
		|
		|        public object DefaultValue
		|        {
		|            get { return M_DataColumn.DefaultValue; }
		|            set { M_DataColumn.DefaultValue = value; }
		|        }
		|
		|        public int Ordinal
		|        {
		|            get { return M_DataColumn.Ordinal; }
		|        }
		|
		|        public bool ReadOnly
		|        {
		|            get { return M_DataColumn.ReadOnly; }
		|            set { M_DataColumn.ReadOnly = value; }
		|        }
		|
		|        public osf.DataTable Table
		|        {
		|            get { return  (DataTable)((DataTableEx)M_DataColumn.Table).M_Object; }
		|        }
		|		
		|        public int AutoIncrementSeed
		|        {
		|            get { return Convert.ToInt32(M_DataColumn.AutoIncrementSeed); }
		|            set { M_DataColumn.AutoIncrementSeed = value; }
		|        }
		|
		|        public int AutoIncrementStep
		|        {
		|            get { return Convert.ToInt32(M_DataColumn.AutoIncrementStep); }
		|            set { M_DataColumn.AutoIncrementStep = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Link" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class LinkEx : System.Windows.Forms.LinkLabel.Link
		|    {
		|        public osf.Link M_Object;
		|        public LinkEx() : base()
		|        {
		|        }
		|        public LinkEx(int start, int count) : base(start, count)
		|        {
		|        }
		|    }//endClass
		|
		|    public class Link
		|    {
		|        public ClLink dll_obj;
		|        public LinkEx M_Link;
		|
		|        public Link()
		|        {
		|            M_Link = new LinkEx();
		|            M_Link.M_Object = this;
		|        }
		|		
		|        public Link(osf.Link p1)
		|        {
		|            M_Link = p1.M_Link;
		|            M_Link.M_Object = this;
		|        }
		|
		|        public Link(System.Windows.Forms.LinkLabel.Link p1)
		|        {
		|            M_Link = new LinkEx(p1.Start, p1.Length);
		|            M_Link.M_Object = this;
		|        }
		|
		|        public int Length
		|        {
		|            get { return M_Link.Length; }
		|            set { M_Link.Length = value; }
		|        }
		|
		|        public bool Enabled
		|        {
		|            get { return M_Link.Enabled; }
		|            set { M_Link.Enabled = value; }
		|        }
		|
		|        public string Name
		|        {
		|            get { return M_Link.Name; }
		|            set { M_Link.Name = value; }
		|        }
		|
		|        public int Start
		|        {
		|            get { return M_Link.Start; }
		|            set { M_Link.Start = value; }
		|        }
		|
		|        public string Description
		|        {
		|            get { return M_Link.Description; }
		|            set { M_Link.Description = value; }
		|        }
		|
		|        public bool Visited
		|        {
		|            get { return M_Link.Visited; }
		|            set { M_Link.Visited = value; }
		|        }
		|
		|        public object LinkData
		|        {
		|            get { return M_Link.LinkData; }
		|            set { M_Link.LinkData = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "LinkArea" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class LinkArea
		|    {
		|        public ClLinkArea dll_obj;
		|        public System.Windows.Forms.LinkArea M_LinkArea;
		|
		|        public LinkArea(int p1, int p2)
		|        {
		|            M_LinkArea = new System.Windows.Forms.LinkArea(p1, p2);
		|            OneScriptForms.AddToHashtable(M_LinkArea, this);
		|        }
		|		
		|        public LinkArea(osf.LinkArea p1)
		|        {
		|            M_LinkArea = p1.M_LinkArea;
		|            OneScriptForms.AddToHashtable(M_LinkArea, this);
		|        }
		|
		|        public LinkArea(System.Windows.Forms.LinkArea p1)
		|        {
		|            M_LinkArea = p1;
		|            OneScriptForms.AddToHashtable(M_LinkArea, this);
		|        }
		|
		|        public int Length
		|        {
		|            get { return M_LinkArea.Length; }
		|            set { M_LinkArea.Length = value; }
		|        }
		|
		|        public int Start
		|        {
		|            get { return M_LinkArea.Start; }
		|            set { M_LinkArea.Start = value; }
		|        }
		|
		|        public bool IsEmpty
		|        {
		|            get { return M_LinkArea.IsEmpty; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Label" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class LabelEx : System.Windows.Forms.Label
		|    {
		|        public osf.Label M_Object;
		|    }//endClass
		|
		|    public class Label : Control
		|    {
		|        public ClLabel dll_obj;
		|        public LabelEx M_Label;
		|        private osf.Bitmap image;
		|
		|        public Label()
		|        {
		|            M_Label = new LabelEx();
		|            M_Label.M_Object = this;
		|            base.M_Control = M_Label;
		|        }
		|
		|        public Label(osf.Label p1)
		|        {
		|            M_Label = p1.M_Label;
		|            M_Label.M_Object = this;
		|            base.M_Control = M_Label;
		|        }
		|
		|        public Label(System.Windows.Forms.Label p1)
		|        {
		|            M_Label = (LabelEx)p1;
		|            M_Label.M_Object = this;
		|            base.M_Control = M_Label;
		|        }
		|
		|        public bool AutoSize
		|        {
		|            get { return M_Label.AutoSize; }
		|            set
		|            {
		|                M_Label.AutoSize = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int BorderStyle
		|        {
		|            get { return (int)M_Label.BorderStyle; }
		|            set
		|            {
		|                M_Label.BorderStyle = (System.Windows.Forms.BorderStyle)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Bitmap Image
		|        {
		|            get { return image; }
		|            set
		|            {
		|                image = value;
		|                M_Label.Image = value.M_Image;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int ImageAlign
		|        {
		|            get { return (int)M_Label.ImageAlign; }
		|            set
		|            {
		|                M_Label.ImageAlign = (System.Drawing.ContentAlignment)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int ImageIndex
		|        {
		|            get { return M_Label.ImageIndex; }
		|            set
		|            {
		|                M_Label.ImageIndex = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.ImageList ImageList
		|        {
		|            get { return new ImageList(M_Label.ImageList); }
		|            set
		|            {
		|                M_Label.ImageList = value.M_ImageList;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int PreferredHeight
		|        {
		|            get { return M_Label.PreferredHeight; }
		|        }
		|
		|        public int PreferredWidth
		|        {
		|            get { return M_Label.PreferredWidth; }
		|        }
		|
		|        public int TextAlign
		|        {
		|            get { return (int)M_Label.TextAlign; }
		|            set
		|            {
		|                M_Label.TextAlign = (System.Drawing.ContentAlignment)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "LinkLabel" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class LinkLabelEx : System.Windows.Forms.LinkLabel
		|    {
		|        public osf.LinkLabel M_Object;
		|    }//endClass
		|
		|    public class LinkLabel : Label
		|    {
		|        public new ClLinkLabel dll_obj;
		|        public LinkLabelEx M_LinkLabel;
		|        public string LinkClicked;
		|        private osf.Bitmap image;
		|
		|        public LinkLabel()
		|        {
		|            M_LinkLabel = new LinkLabelEx();
		|            M_LinkLabel.M_Object = this;
		|            base.M_Control = M_LinkLabel;
		|            M_LinkLabel.LinkClicked += M_LinkLabel_LinkClicked;
		|            LinkClicked = """";
		|        }
		|
		|        public LinkLabel(osf.LinkLabel p1)
		|        {
		|            M_LinkLabel = p1.M_LinkLabel;
		|            M_LinkLabel.M_Object = this;
		|            base.M_Control = M_LinkLabel;
		|            M_LinkLabel.LinkClicked += M_LinkLabel_LinkClicked;
		|            LinkClicked = """";
		|        }
		|
		|        public LinkLabel(System.Windows.Forms.LinkLabel p1)
		|        {
		|            M_LinkLabel = (LinkLabelEx)p1;
		|            M_LinkLabel.M_Object = this;
		|            base.M_Control = M_LinkLabel;
		|            M_LinkLabel.LinkClicked += M_LinkLabel_LinkClicked;
		|            LinkClicked = """";
		|        }
		|
		|        public osf.Color VisitedLinkColor
		|        {
		|            get { return new Color(M_LinkLabel.VisitedLinkColor); }
		|            set { M_LinkLabel.VisitedLinkColor = value.M_Color; }
		|        }
		|
		|        public osf.Color LinkColor
		|        {
		|            get { return new Color(M_LinkLabel.LinkColor); }
		|            set { M_LinkLabel.LinkColor = value.M_Color; }
		|        }
		|
		|        public bool LinkVisited
		|        {
		|            get { return M_LinkLabel.LinkVisited; }
		|            set { M_LinkLabel.LinkVisited = value; }
		|        }
		|
		|        public osf.Color ActiveLinkColor
		|        {
		|            get { return new Color(M_LinkLabel.ActiveLinkColor); }
		|            set { M_LinkLabel.ActiveLinkColor = value.M_Color; }
		|        }
		|
		|
		|        public osf.LinkArea LinkArea
		|        {
		|            get { return new LinkArea(M_LinkLabel.LinkArea); }
		|            set { M_LinkLabel.LinkArea = value.M_LinkArea; }
		|        }
		|
		|        public osf.LinkCollection Links
		|        {
		|            get { return new LinkCollection(M_LinkLabel.Links); }
		|        }
		|
		|        public int LinkBehavior
		|        {
		|            get { return (int)M_LinkLabel.LinkBehavior; }
		|            set { M_LinkLabel.LinkBehavior = (System.Windows.Forms.LinkBehavior)value; }
		|        }
		|
		|        public new bool AutoSize
		|        {
		|            get { return M_LinkLabel.AutoSize; }
		|            set
		|            {
		|                M_LinkLabel.AutoSize = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public new int ImageAlign
		|        {
		|            get { return (int)M_LinkLabel.ImageAlign; }
		|            set
		|            {
		|                M_LinkLabel.ImageAlign = (System.Drawing.ContentAlignment)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public new int TextAlign
		|        {
		|            get { return (int)M_LinkLabel.TextAlign; }
		|            set
		|            {
		|                M_LinkLabel.TextAlign = (System.Drawing.ContentAlignment)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public new osf.Bitmap Image
		|        {
		|            get { return image; }
		|            set
		|            {
		|                image = value;
		|                M_LinkLabel.Image = value.M_Image;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public new osf.ImageList ImageList
		|        {
		|            get { return new ImageList(M_LinkLabel.ImageList); }
		|            set
		|            {
		|                M_LinkLabel.ImageList = value.M_ImageList;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public new int ImageIndex
		|        {
		|            get { return M_LinkLabel.ImageIndex; }
		|            set
		|            {
		|                M_LinkLabel.ImageIndex = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public new int PreferredHeight
		|        {
		|            get { return M_LinkLabel.PreferredHeight; }
		|        }
		|
		|        public new int PreferredWidth
		|        {
		|            get { return M_LinkLabel.PreferredWidth; }
		|        }
		|
		|        public new int BorderStyle
		|        {
		|            get { return (int)M_LinkLabel.BorderStyle; }
		|            set
		|            {
		|                M_LinkLabel.BorderStyle = (System.Windows.Forms.BorderStyle)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|		
		|        private void M_LinkLabel_LinkClicked(object sender, System.Windows.Forms.LinkLabelLinkClickedEventArgs e)
		|        {
		|            if (LinkClicked.Length > 0)
		|            {
		|                LinkLabelLinkClickedEventArgs LinkLabelLinkClickedEventArgs1 = new LinkLabelLinkClickedEventArgs();
		|                LinkLabelLinkClickedEventArgs1.EventString = LinkClicked;
		|                LinkLabelLinkClickedEventArgs1.Sender = this;
		|                LinkLabelLinkClickedEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.LinkClicked);
		|                LinkLabelLinkClickedEventArgs1.Button = (int)e.Button;
		|                LinkLabelLinkClickedEventArgs1.Link = new Link(e.Link);
		|                ClLinkLabelLinkClickedEventArgs ClLinkLabelLinkClickedEventArgs1 = new ClLinkLabelLinkClickedEventArgs(LinkLabelLinkClickedEventArgs1);
		|                OneScriptForms.Event = ClLinkLabelLinkClickedEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.LinkClicked);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "LinkCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class LinkCollection
		|    {
		|        public ClLinkCollection dll_obj;
		|        public System.Windows.Forms.LinkLabel.LinkCollection M_LinkCollection;
		|
		|        public LinkCollection(System.Windows.Forms.LinkLabel p1)
		|        {
		|            M_LinkCollection = p1.Links;
		|        }
		|		
		|        public LinkCollection(System.Windows.Forms.LinkLabel.LinkCollection p1)
		|        {
		|            M_LinkCollection = p1;
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_LinkCollection.Count; }
		|        }
		|
		|        public bool LinksAdded
		|        {
		|            get { return M_LinkCollection.LinksAdded; }
		|        }
		|
		|        public bool IsReadOnly
		|        {
		|            get { return M_LinkCollection.IsReadOnly; }
		|        }
		|
		|
		|        public int Add(osf.Link p1)
		|        {
		|            return M_LinkCollection.Add((System.Windows.Forms.LinkLabel.Link)p1.M_Link);
		|        }
		|
		|        public void Clear()
		|        {
		|            M_LinkCollection.Clear();
		|        }
		|
		|        public void Remove(osf.Link p1)
		|        {
		|            M_LinkCollection.Remove((System.Windows.Forms.LinkLabel.Link)p1.M_Link);
		|        }
		|
		|        public void RemoveAt(int p1)
		|        {
		|            M_LinkCollection.RemoveAt(p1);
		|        }
		|
		|        public virtual object this[int index]
		|        {
		|            get { return M_LinkCollection[index]; }
		|            set { M_LinkCollection[index] = (System.Windows.Forms.LinkLabel.Link)value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Encoding" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Encoding
		|    {
		|        public ClEncoding dll_obj;
		|        public System.Text.Encoding M_Encoding;
		|
		|        public Encoding()
		|        {
		|            M_Encoding = System.Text.Encoding.Default;
		|        }
		|
		|        private Encoding(osf.Encoding p1)
		|        {
		|            M_Encoding = p1.M_Encoding;
		|        }
		|
		|        private Encoding(System.Text.Encoding p1)
		|        {
		|            M_Encoding = p1;
		|        }
		|
		|        public osf.Encoding GetEncoding(int p1)
		|        {
		|            return new Encoding(System.Text.Encoding.GetEncoding(p1));
		|        }
		|
		|        public int GetByteCount(string sText)
		|        {
		|            return M_Encoding.GetByteCount(sText);
		|        }
		|
		|        public osf.Encoding ByDefault
		|        {
		|            get { return new Encoding(System.Text.Encoding.Default); }
		|        }
		|
		|        public osf.Encoding Unicode
		|        {
		|            get { return new Encoding(System.Text.Encoding.Unicode); }
		|        }
		|
		|        public osf.Encoding UTF8
		|        {
		|            get { return new Encoding(System.Text.Encoding.UTF8); }
		|        }
		|
		|        public osf.Encoding UTF7
		|        {
		|            get { return new Encoding(System.Text.Encoding.UTF7); }
		|        }
		|
		|        public osf.Encoding ASCII
		|        {
		|            get { return new Encoding(System.Text.Encoding.ASCII); }
		|        }
		|
		|        public osf.Encoding BigEndianUnicode
		|        {
		|            get { return new Encoding(System.Text.Encoding.BigEndianUnicode); }
		|        }
		|
		|        public int WindowsCodePage
		|        {
		|            get { return M_Encoding.WindowsCodePage; }
		|        }
		|
		|        public string BodyName
		|        {
		|            get { return M_Encoding.BodyName; }
		|        }
		|
		|        public string HeaderName
		|        {
		|            get { return M_Encoding.HeaderName; }
		|        }
		|
		|        public string EncodingName
		|        {
		|            get { return M_Encoding.EncodingName; }
		|        }
		|
		|        public string WebName
		|        {
		|            get { return M_Encoding.WebName; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ToolBarButton" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ToolBarButtonEx : System.Windows.Forms.ToolBarButton
		|    {
		|        public osf.ToolBarButton M_Object;
		|    }//endClass
		|
		|    public class ToolBarButton
		|    {
		|        public ClToolBarButton dll_obj;
		|        public ToolBarButtonEx M_ToolBarButton;
		|
		|        public ToolBarButton(string text = null)
		|        {
		|            M_ToolBarButton = new ToolBarButtonEx();
		|            M_ToolBarButton.M_Object = this;
		|            M_ToolBarButton.Text = text;
		|        }
		|
		|        public ToolBarButton(osf.ToolBarButton p1)
		|        {
		|            M_ToolBarButton = p1.M_ToolBarButton;
		|            M_ToolBarButton.M_Object = this;
		|        }
		|
		|        public ToolBarButton(System.Windows.Forms.ToolBarButton p1)
		|        {
		|            M_ToolBarButton = (ToolBarButtonEx)p1;
		|            M_ToolBarButton.M_Object = this;
		|        }
		|
		|        public osf.ContextMenu DropDownMenu
		|        {
		|            get { return (ContextMenu)((ContextMenuEx)M_ToolBarButton.DropDownMenu).M_Object; }
		|            set { M_ToolBarButton.DropDownMenu = value.M_ContextMenu; }
		|        }
		|
		|        public bool Enabled
		|        {
		|            get { return M_ToolBarButton.Enabled; }
		|            set
		|            {
		|                M_ToolBarButton.Enabled = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int ImageIndex
		|        {
		|            get { return M_ToolBarButton.ImageIndex; }
		|            set { M_ToolBarButton.ImageIndex = value; }
		|        }
		|
		|        public bool PartialPush
		|        {
		|            get { return M_ToolBarButton.PartialPush; }
		|            set { M_ToolBarButton.PartialPush = value; }
		|        }
		|
		|        public bool Pushed
		|        {
		|            get { return M_ToolBarButton.Pushed; }
		|            set { M_ToolBarButton.Pushed = value; }
		|        }
		|
		|        public osf.Rectangle Rectangle
		|        {
		|            get { return new Rectangle(M_ToolBarButton.Rectangle); }
		|        }
		|
		|        public int Style
		|        {
		|            get { return (int)M_ToolBarButton.Style; }
		|            set { M_ToolBarButton.Style = (System.Windows.Forms.ToolBarButtonStyle)value; }
		|        }
		|
		|        public object Tag
		|        {
		|            get { return M_ToolBarButton.Tag; }
		|            set { M_ToolBarButton.Tag = value; }
		|        }
		|
		|        public string Text
		|        {
		|            get { return M_ToolBarButton.Text; }
		|            set { M_ToolBarButton.Text = value; }
		|        }
		|
		|        public string ToolTipText
		|        {
		|            get { return M_ToolBarButton.ToolTipText; }
		|            set { M_ToolBarButton.ToolTipText = value; }
		|        }
		|
		|        public bool Visible
		|        {
		|            get { return M_ToolBarButton.Visible; }
		|            set { M_ToolBarButton.Visible = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ToolBar" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ToolBarEx : System.Windows.Forms.ToolBar
		|    {
		|        public osf.ToolBar M_Object;
		|    }//endClass
		|
		|    public class ToolBar : Control
		|    {
		|        public ClToolBar dll_obj;
		|        private ToolBarEx m_ToolBar;
		|        public string ButtonClick;
		|
		|        public ToolBarEx M_ToolBar
		|        {
		|            get { return m_ToolBar; }
		|            set
		|            {
		|                m_ToolBar = value;
		|                m_ToolBar.ButtonClick += M_ToolBar_ButtonClick;
		|            }
		|        }
		|
		|        public ToolBar()
		|        {
		|            M_ToolBar = new ToolBarEx();
		|            M_ToolBar.M_Object = this;
		|            base.M_Control = M_ToolBar;
		|            ButtonClick = """";
		|        }
		|		
		|        public ToolBar(osf.ToolBar p1)
		|        {
		|            M_ToolBar = p1.M_ToolBar;
		|            M_ToolBar.M_Object = this;
		|            base.M_Control = M_ToolBar;
		|            ButtonClick = """";
		|        }
		|
		|        public ToolBar(System.Windows.Forms.ToolBar p1)
		|        {
		|            M_ToolBar = (ToolBarEx)p1;
		|            M_ToolBar.M_Object = this;
		|            base.M_Control = M_ToolBar;
		|            ButtonClick = """";
		|        }
		|
		|        public void M_ToolBar_ButtonClick(object sender, System.Windows.Forms.ToolBarButtonClickEventArgs e)
		|        {
		|            if (ButtonClick.Length > 0)
		|            {
		|                ToolBarButtonClickEventArgs ToolBarButtonClickEventArgs1 = new ToolBarButtonClickEventArgs();
		|                ToolBarButtonClickEventArgs1.EventString = ButtonClick;
		|                ToolBarButtonClickEventArgs1.Sender = this;
		|                ToolBarButtonClickEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.ButtonClick);
		|                ToolBarButtonClickEventArgs1.Button = ((ToolBarButtonEx)e.Button).M_Object;
		|                ClToolBarButtonClickEventArgs ClToolBarButtonClickEventArgs1 = new ClToolBarButtonClickEventArgs(ToolBarButtonClickEventArgs1);
		|                OneScriptForms.Event = ClToolBarButtonClickEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.ButtonClick);
		|            }
		|        }
		|
		|        public int Appearance
		|        {
		|            get { return (int)M_ToolBar.Appearance; }
		|            set { M_ToolBar.Appearance = (System.Windows.Forms.ToolBarAppearance)value; }
		|        }
		|
		|        public bool AutoSize
		|        {
		|            get { return M_ToolBar.AutoSize; }
		|            set { M_ToolBar.AutoSize = value; }
		|        }
		|
		|        public int BorderStyle
		|        {
		|            get { return (int)M_ToolBar.BorderStyle; }
		|            set { M_ToolBar.BorderStyle = (System.Windows.Forms.BorderStyle)value; }
		|        }
		|
		|        public osf.ToolBarButtonCollection Buttons
		|        {
		|            get { return new ToolBarButtonCollection(M_ToolBar.Buttons); }
		|        }
		|
		|        public osf.Size ButtonSize
		|        {
		|            get { return new Size(M_ToolBar.ButtonSize); }
		|            set { M_ToolBar.ButtonSize = value.M_Size; }
		|        }
		|
		|        public bool Divider
		|        {
		|            get { return M_ToolBar.Divider; }
		|            set { M_ToolBar.Divider = value; }
		|        }
		|
		|        public bool DropDownArrows
		|        {
		|            get { return M_ToolBar.DropDownArrows; }
		|            set { M_ToolBar.DropDownArrows = value; }
		|        }
		|
		|        public osf.ImageList ImageList
		|        {
		|            get { return new ImageList(M_ToolBar.ImageList); }
		|            set { M_ToolBar.ImageList = value.M_ImageList; }
		|        }
		|
		|        public osf.Size ImageSize
		|        {
		|            get { return new Size(M_ToolBar.ImageSize); }
		|        }
		|
		|        public bool ShowToolTips
		|        {
		|            get { return M_ToolBar.ShowToolTips; }
		|            set { M_ToolBar.ShowToolTips = value; }
		|        }
		|
		|        public int TextAlign
		|        {
		|            get { return (int)M_ToolBar.TextAlign; }
		|            set { M_ToolBar.TextAlign = (System.Windows.Forms.ToolBarTextAlign)value; }
		|        }
		|
		|        public bool Wrappable
		|        {
		|            get { return M_ToolBar.Wrappable; }
		|            set { M_ToolBar.Wrappable = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ToolBarButtonCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ToolBarButtonCollection : CollectionBase
		|    {
		|        public ClToolBarButtonCollection dll_obj;
		|        private System.Windows.Forms.ToolBar.ToolBarButtonCollection M_ToolBarButtonCollection;
		|
		|        public ToolBarButtonCollection()
		|        {
		|        }
		|
		|        public ToolBarButtonCollection(System.Windows.Forms.ToolBar.ToolBarButtonCollection p1)
		|        {
		|            M_ToolBarButtonCollection = p1;
		|            base.List = M_ToolBarButtonCollection;
		|        }
		|
		|        public osf.ToolBarButton Add(ToolBarButton ToolBarButton)
		|        {
		|            M_ToolBarButtonCollection.Add(ToolBarButton.M_ToolBarButton);
		|            return ToolBarButton;
		|        }
		|
		|        public osf.ToolBarButton Insert(int index, ToolBarButton ToolBarButton)
		|        {
		|            M_ToolBarButtonCollection.Insert(index, ToolBarButton.M_ToolBarButton);
		|            return ToolBarButton;
		|        }
		|
		|        public void Remove(ToolBarButton ToolBarButton)
		|        {
		|            M_ToolBarButtonCollection.Remove(ToolBarButton.M_ToolBarButton);
		|        }
		|
		|        public new osf.ToolBarButton this[int Index]
		|        {
		|            get { return ((ToolBarButtonEx)M_ToolBarButtonCollection[Index]).M_Object; }
		|            set
		|            {
		|            }
		|        }
		|
		|        public override object Current
		|        {
		|            get { return (object)((ToolBarButtonEx)((System.Windows.Forms.ToolBarButton)Enumerator.Current)).M_Object; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ProgressBar" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class HProgressBarEx : System.Windows.Forms.ProgressBar
		|    {
		|        public object M_Object;
		|        public ClProgressBar dll_obj;
		|    }//endClass
		|
		|    public class VProgressBarEx : System.Windows.Forms.ProgressBar
		|    {
		|        public object M_Object;
		|        public ClProgressBar dll_obj;
		|
		|        protected override System.Windows.Forms.CreateParams CreateParams
		|        {
		|            get
		|            {
		|                System.Windows.Forms.CreateParams cp = base.CreateParams;
		|                cp.Style |= 0x04;
		|                return cp;
		|            }
		|        }
		|    }//endClass
		|
		|    public class ProgressBar : Control
		|    {
		|        public ClProgressBar dll_obj;
		|        public HProgressBarEx M_ProgressBarH;
		|        public VProgressBarEx M_ProgressBarV;
		|        private bool HV;
		|
		|        public ProgressBar(bool p1)
		|        {
		|            HV = p1;
		|            if (p1)
		|            {
		|                M_ProgressBarV = new VProgressBarEx();
		|                M_ProgressBarV.M_Object = M_ProgressBarV;
		|                base.M_Control = M_ProgressBarV;
		|            }
		|            else
		|            {
		|                M_ProgressBarH = new HProgressBarEx();
		|                M_ProgressBarH.M_Object = M_ProgressBarH;
		|                base.M_Control = M_ProgressBarH;
		|            }
		|        }
		|
		|        public int Maximum
		|        {
		|            get
		|            {
		|                if (HV)
		|                {
		|                    return M_ProgressBarV.Maximum;
		|                }
		|                else
		|                {
		|                    return M_ProgressBarH.Maximum;
		|                }
		|            }
		|            set
		|            {
		|                if (HV)
		|                {
		|                    M_ProgressBarV.Maximum = value;
		|                }
		|                else
		|                {
		|                    M_ProgressBarH.Maximum = value;
		|                }
		|            }
		|        }
		|
		|        public int Minimum
		|        {
		|            get
		|            {
		|                if (HV)
		|                {
		|                    return M_ProgressBarV.Minimum;
		|                }
		|                else
		|                {
		|                    return M_ProgressBarH.Minimum;
		|                }
		|            }
		|            set
		|            {
		|                if (HV)
		|                {
		|                    M_ProgressBarV.Minimum = value;
		|                }
		|                else
		|                {
		|                    M_ProgressBarH.Minimum = value;
		|                }
		|            }
		|        }
		|
		|        public int Value
		|        {
		|            get
		|            {
		|                if (HV)
		|                {
		|                    return M_ProgressBarV.Value;
		|                }
		|                else
		|                {
		|                    return M_ProgressBarH.Value;
		|                }
		|            }
		|            set
		|            {
		|                if (HV)
		|                {
		|                    M_ProgressBarV.Value = value;
		|                }
		|                else
		|                {
		|                    M_ProgressBarH.Value = value;
		|                }
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "MessageBox" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class MessageBox
		|    {
		|        public ClMessageBox dll_obj;
		|        public string Text;
		|        public string Title;
		|        public int Buttons;
		|        public int Icon;
		|
		|        public MessageBox()
		|        {
		|            Text = null;
		|            Title = null;
		|            Buttons = (int)System.Windows.Forms.MessageBoxButtons.OK;
		|            Icon = (int)System.Windows.Forms.MessageBoxIcon.None;
		|        }
		|
		|        public int Show(string text = null, string title = null, int buttons = (int)System.Windows.Forms.MessageBoxButtons.OK, int icon = (int)System.Windows.Forms.MessageBoxIcon.None)
		|        {
		|            if (text == null)
		|            {
		|                text = Text;
		|            }
		|            if (title == null)
		|            {
		|                title = Title;
		|            }
		|            if (buttons == (int)System.Windows.Forms.MessageBoxButtons.OK)
		|            {
		|                buttons = Buttons;
		|            }
		|            if (icon == (int)System.Windows.Forms.MessageBoxIcon.None)
		|            {
		|                icon = Icon;
		|            }
		|            return (int)System.Windows.Forms.MessageBox.Show(text, title, (System.Windows.Forms.MessageBoxButtons)buttons, (System.Windows.Forms.MessageBoxIcon)icon);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "UserControl" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class UserControlEx : System.Windows.Forms.UserControl
		|    {
		|        public osf.UserControl M_Object;
		|    }//endClass
		|
		|    public class UserControl : ContainerControl
		|    {
		|        public ClUserControl dll_obj;
		|        public UserControlEx M_UserControl;
		|        public object M_Value;
		|
		|        public UserControl()
		|        {
		|            M_UserControl = new UserControlEx();
		|            M_UserControl.M_Object = this;
		|            base.M_ContainerControl = M_UserControl;
		|            M_Value = null;
		|        }
		|		
		|        public UserControl(osf.UserControl p1)
		|        {
		|            M_UserControl = p1.M_UserControl;
		|            M_UserControl.M_Object = this;
		|            base.M_ContainerControl = M_UserControl;
		|            M_Value = null;
		|        }
		|
		|        public UserControl(System.Windows.Forms.UserControl p1)
		|        {
		|            M_UserControl = (UserControlEx)p1;
		|            M_UserControl.M_Object = this;
		|            base.M_ContainerControl = M_UserControl;
		|            M_Value = null;
		|        }
		|
		|        public new string Text
		|        {
		|            get { return M_UserControl.Text; }
		|            set
		|            {
		|                M_UserControl.Text = value;
		|                M_UserControl.Invalidate();
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public object Value
		|        {
		|            get { return M_Value; }
		|            set
		|            {
		|                M_Value = value;
		|                M_UserControl.Invalidate();
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "NotifyIcon" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class NotifyIcon : Component
		|    {
		|        public ClNotifyIcon dll_obj;
		|        private System.Windows.Forms.NotifyIcon m_NotifyIcon;
		|        public string Click;
		|        public string DoubleClick;
		|        public string MouseDown;
		|        public string MouseMove;
		|        public string MouseUp;
		|
		|        public System.Windows.Forms.NotifyIcon M_NotifyIcon
		|        {
		|            get { return m_NotifyIcon; }
		|            set
		|            {
		|                m_NotifyIcon = value;
		|                base.M_Component = m_NotifyIcon;
		|                m_NotifyIcon.DoubleClick += M_NotifyIcon_DoubleClick;
		|                m_NotifyIcon.Click += M_NotifyIcon_Click;
		|                m_NotifyIcon.MouseMove += M_NotifyIcon_MouseMove;
		|                m_NotifyIcon.MouseUp += M_NotifyIcon_MouseUp;
		|                m_NotifyIcon.MouseDown += M_NotifyIcon_MouseDown;
		|            }
		|        }
		|		
		|        public NotifyIcon()
		|        {
		|            M_NotifyIcon = new System.Windows.Forms.NotifyIcon();
		|            Click = """";
		|            DoubleClick = """";
		|            MouseDown = """";
		|            MouseMove = """";
		|            MouseUp = """";
		|            OneScriptForms.AddToHashtable(M_NotifyIcon, this);
		|        }
		|
		|        public NotifyIcon(osf.NotifyIcon p1)
		|        {
		|            M_NotifyIcon = p1.M_NotifyIcon;
		|            Click = """";
		|            DoubleClick = """";
		|            MouseDown = """";
		|            MouseMove = """";
		|            MouseUp = """";
		|            OneScriptForms.AddToHashtable(M_NotifyIcon, this);
		|        }
		|
		|        public NotifyIcon(System.Windows.Forms.NotifyIcon p1)
		|        {
		|            M_NotifyIcon = p1;
		|            Click = """";
		|            DoubleClick = """";
		|            MouseDown = """";
		|            MouseMove = """";
		|            MouseUp = """";
		|            OneScriptForms.AddToHashtable(M_NotifyIcon, this);
		|        }
		|
		|        public osf.ContextMenu ContextMenu
		|        {
		|            get { return new ContextMenu(M_NotifyIcon.ContextMenu); }
		|            set { M_NotifyIcon.ContextMenu = value.M_ContextMenu; }
		|        }
		|
		|        public osf.Icon Icon
		|        {
		|            get { return new Icon(M_NotifyIcon.Icon); }
		|            set
		|            {
		|                M_NotifyIcon.Icon = (System.Drawing.Icon)value.M_Icon;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string Text
		|        {
		|            get { return M_NotifyIcon.Text; }
		|            set
		|            {
		|                M_NotifyIcon.Text = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool Visible
		|        {
		|            get { return M_NotifyIcon.Visible; }
		|            set
		|            {
		|                M_NotifyIcon.Visible = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void M_NotifyIcon_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		|        {
		|            if (MouseDown.Length > 0)
		|            {
		|                MouseEventArgs MouseEventArgs1 = new MouseEventArgs();
		|                MouseEventArgs1.EventString = MouseDown;
		|                MouseEventArgs1.Sender = this;
		|                MouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(dll_obj.MouseDown);
		|                MouseEventArgs1.Clicks = e.Clicks;
		|                MouseEventArgs1.Button = (int)e.Button;
		|                MouseEventArgs1.X = e.X;
		|                MouseEventArgs1.Y = e.Y;
		|                ClMouseEventArgs ClMouseEventArgs1 = new ClMouseEventArgs(MouseEventArgs1);
		|                OneScriptForms.Event = ClMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(dll_obj.MouseDown);
		|            }
		|        }
		|
		|        public void M_NotifyIcon_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
		|        {
		|            if (MouseUp.Length > 0)
		|            {
		|                MouseEventArgs MouseEventArgs1 = new MouseEventArgs();
		|                MouseEventArgs1.EventString = MouseUp;
		|                MouseEventArgs1.Sender = this;
		|                MouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(dll_obj.MouseUp);
		|                MouseEventArgs1.Clicks = e.Clicks;
		|                MouseEventArgs1.Button = (int)e.Button;
		|                MouseEventArgs1.X = e.X;
		|                MouseEventArgs1.Y = e.Y;
		|                ClMouseEventArgs ClMouseEventArgs1 = new ClMouseEventArgs(MouseEventArgs1);
		|                OneScriptForms.Event = ClMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(dll_obj.MouseUp);
		|            }
		|        }
		|
		|        public void M_NotifyIcon_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		|        {
		|            if (MouseMove.Length > 0)
		|            {
		|                MouseEventArgs MouseEventArgs1 = new MouseEventArgs();
		|                MouseEventArgs1.EventString = MouseMove;
		|                MouseEventArgs1.Sender = this;
		|                MouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(dll_obj.MouseMove);
		|                MouseEventArgs1.Clicks = e.Clicks;
		|                MouseEventArgs1.Button = (int)e.Button;
		|                MouseEventArgs1.X = e.X;
		|                MouseEventArgs1.Y = e.Y;
		|                ClMouseEventArgs ClMouseEventArgs1 = new ClMouseEventArgs(MouseEventArgs1);
		|                OneScriptForms.Event = ClMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(dll_obj.MouseMove);
		|            }
		|        }
		|
		|        public void M_NotifyIcon_Click(object sender, System.EventArgs e)
		|        {
		|            if (Click.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Click;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(dll_obj.Click);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(dll_obj.Click);
		|            }
		|        }
		|
		|        public void M_NotifyIcon_DoubleClick(object sender, System.EventArgs e)
		|        {
		|            if (DoubleClick.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = DoubleClick;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(dll_obj.DoubleClick);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(dll_obj.DoubleClick);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "SaveFileDialog" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class SaveFileDialog : FileDialog
		|    {
		|        public ClSaveFileDialog dll_obj;
		|        public System.Windows.Forms.SaveFileDialog M_SaveFileDialog;
		|
		|        public SaveFileDialog()
		|        {
		|            M_SaveFileDialog = new System.Windows.Forms.SaveFileDialog();
		|            base.M_FileDialog = M_SaveFileDialog;
		|            OneScriptForms.AddToHashtable(M_SaveFileDialog, this);
		|        }
		|		
		|        public SaveFileDialog(osf.SaveFileDialog p1)
		|        {
		|            M_SaveFileDialog = p1.M_SaveFileDialog;
		|            base.M_FileDialog = M_SaveFileDialog;
		|            OneScriptForms.AddToHashtable(M_SaveFileDialog, this);
		|        }
		|
		|        public SaveFileDialog(System.Windows.Forms.SaveFileDialog p1)
		|        {
		|            M_SaveFileDialog = p1;
		|            base.M_FileDialog = M_SaveFileDialog;
		|            OneScriptForms.AddToHashtable(M_SaveFileDialog, this);
		|        }
		|
		|        public bool CreatePrompt
		|        {
		|            get { return M_SaveFileDialog.CreatePrompt; }
		|            set { M_SaveFileDialog.CreatePrompt = value; }
		|        }
		|
		|        public void Reset()
		|        {
		|            M_SaveFileDialog.Reset();
		|        }
		|
		|        public bool OverwritePrompt
		|        {
		|            get { return M_SaveFileDialog.OverwritePrompt; }
		|            set { M_SaveFileDialog.OverwritePrompt = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "OpenFileDialog" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class OpenFileDialog : FileDialog
		|    {
		|        public ClOpenFileDialog dll_obj;
		|        public System.Windows.Forms.OpenFileDialog M_OpenFileDialog;
		|
		|        public OpenFileDialog()
		|        {
		|            M_OpenFileDialog = new System.Windows.Forms.OpenFileDialog();
		|            base.M_FileDialog = M_OpenFileDialog;
		|            OneScriptForms.AddToHashtable(M_OpenFileDialog, this);
		|        }
		|		
		|        public OpenFileDialog(osf.OpenFileDialog p1)
		|        {
		|            M_OpenFileDialog = p1.M_OpenFileDialog;
		|            base.M_FileDialog = M_OpenFileDialog;
		|            OneScriptForms.AddToHashtable(M_OpenFileDialog, this);
		|        }
		|
		|        public OpenFileDialog(System.Windows.Forms.OpenFileDialog p1)
		|        {
		|            M_OpenFileDialog = p1;
		|            base.M_FileDialog = M_OpenFileDialog;
		|            OneScriptForms.AddToHashtable(M_OpenFileDialog, this);
		|        }
		|
		|        public override bool CheckFileExists
		|        {
		|            get { return M_OpenFileDialog.CheckFileExists; }
		|            set { M_OpenFileDialog.CheckFileExists = value; }
		|        }
		|
		|        public bool ReadOnlyChecked
		|        {
		|            get { return M_OpenFileDialog.ReadOnlyChecked; }
		|            set { M_OpenFileDialog.ReadOnlyChecked = value; }
		|        }
		|
		|        public void Reset()
		|        {
		|            M_OpenFileDialog.Reset();
		|        }
		|
		|        public bool ShowReadOnly
		|        {
		|            get { return M_OpenFileDialog.ShowReadOnly; }
		|            set { M_OpenFileDialog.ShowReadOnly = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "FileDialog" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class FileDialog : CommonDialog
		|    {
		|        private System.Windows.Forms.FileDialog m_FileDialog;
		|
		|        public System.Windows.Forms.FileDialog M_FileDialog
		|        {
		|            get { return m_FileDialog; }
		|            set
		|            {
		|                m_FileDialog = value;
		|                base.M_CommonDialog = m_FileDialog;
		|            }
		|        }
		|
		|        public FileDialog(System.Windows.Forms.FileDialog p1 = null)
		|        {
		|        }
		|
		|        public bool AddExtension
		|        {
		|            get { return M_FileDialog.AddExtension; }
		|            set { M_FileDialog.AddExtension = value; }
		|        }
		|
		|        public virtual bool CheckFileExists
		|        {
		|            get { return M_FileDialog.CheckFileExists; }
		|            set { M_FileDialog.CheckFileExists = value; }
		|        }
		|
		|        public bool CheckPathExists
		|        {
		|            get { return M_FileDialog.CheckPathExists; }
		|            set { M_FileDialog.CheckPathExists = value; }
		|        }
		|
		|        public string DefaultExt
		|        {
		|            get { return M_FileDialog.DefaultExt; }
		|            set { M_FileDialog.DefaultExt = value; }
		|        }
		|
		|        public bool DereferenceLinks
		|        {
		|            get { return M_FileDialog.DereferenceLinks; }
		|            set { M_FileDialog.DereferenceLinks = value; }
		|        }
		|
		|        public string FileName
		|        {
		|            get { return M_FileDialog.FileName; }
		|            set { M_FileDialog.FileName = value; }
		|        }
		|
		|        public string Filter
		|        {
		|            get { return M_FileDialog.Filter; }
		|            set { M_FileDialog.Filter = value; }
		|        }
		|
		|        public int FilterIndex
		|        {
		|            get { return M_FileDialog.FilterIndex; }
		|            set { M_FileDialog.FilterIndex = value; }
		|        }
		|
		|        public string InitialDirectory
		|        {
		|            get { return M_FileDialog.InitialDirectory; }
		|            set { M_FileDialog.InitialDirectory = value; }
		|        }
		|
		|        public bool RestoreDirectory
		|        {
		|            get { return M_FileDialog.RestoreDirectory; }
		|            set { M_FileDialog.RestoreDirectory = value; }
		|        }
		|
		|        public string Title
		|        {
		|            get { return M_FileDialog.Title; }
		|            set { M_FileDialog.Title = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "FontDialog" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class FontDialogEx : System.Windows.Forms.FontDialog
		|    {
		|        public osf.FontDialog M_Object;
		|    }//endClass
		|
		|    public class FontDialog : CommonDialog
		|    {
		|        public ClFontDialog dll_obj;
		|        public FontDialogEx M_FontDialog;
		|
		|        public FontDialog()
		|        {
		|            M_FontDialog = new FontDialogEx();
		|            M_FontDialog.M_Object = this;
		|            base.M_CommonDialog = M_FontDialog;
		|        }
		|
		|        public FontDialog(osf.FontDialog p1)
		|        {
		|            M_FontDialog = p1.M_FontDialog;
		|            M_FontDialog.M_Object = this;
		|            base.M_CommonDialog = M_FontDialog;
		|        }
		|
		|        public FontDialog(System.Windows.Forms.FontDialog p1)
		|        {
		|            M_FontDialog = (FontDialogEx)p1;
		|            M_FontDialog.M_Object = this;
		|            base.M_CommonDialog = M_FontDialog;
		|        }
		|
		|        public osf.Font Font
		|        {
		|            get { return new Font(M_FontDialog.Font); }
		|            set { M_FontDialog.Font = value.M_Font; }
		|        }
		|
		|        public osf.Color Color
		|        {
		|            get { return new Color(M_FontDialog.Color); }
		|            set { M_FontDialog.Color = value.M_Color; }
		|        }
		|
		|        public bool ShowColor
		|        {
		|            get { return M_FontDialog.ShowColor; }
		|            set { M_FontDialog.ShowColor = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ColorDialog" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ColorDialogEx : System.Windows.Forms.ColorDialog
		|    {
		|        public osf.ColorDialog M_Object;
		|    }//endClass
		|
		|    public class ColorDialog : CommonDialog
		|    {
		|        public ClColorDialog dll_obj;
		|        public ColorDialogEx M_ColorDialog;
		|
		|        public ColorDialog()
		|        {
		|            M_ColorDialog = new ColorDialogEx();
		|            M_ColorDialog.M_Object = this;
		|            base.M_CommonDialog = M_ColorDialog;
		|        }
		|
		|        public ColorDialog(osf.ColorDialog p1)
		|        {
		|            M_ColorDialog = p1.M_ColorDialog;
		|            M_ColorDialog.M_Object = this;
		|            base.M_CommonDialog = M_ColorDialog;
		|        }
		|
		|        public ColorDialog(System.Windows.Forms.ColorDialog p1)
		|        {
		|            M_ColorDialog = (ColorDialogEx)p1;
		|            M_ColorDialog.M_Object = this;
		|            base.M_CommonDialog = M_ColorDialog;
		|        }
		|
		|        public osf.Color Color
		|        {
		|            get { return new Color(M_ColorDialog.Color); }
		|            set { M_ColorDialog.Color = value.M_Color; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Timer" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TimerEx : System.Windows.Forms.Timer
		|    {
		|        public osf.Timer M_Object;
		|    }//endClass
		|
		|    public class Timer : Component
		|    {
		|        public ClTimer dll_obj;
		|        public TimerEx M_Timer;
		|        public string Tick;
		|
		|        public Timer()
		|        {
		|            M_Timer = new TimerEx();
		|            M_Timer.M_Object = this;
		|            base.M_Component = M_Timer;
		|            M_Timer.Tick += M_Timer_Tick1;
		|            Tick = """";
		|        }
		|		
		|        public Timer(osf.Timer p1)
		|        {
		|            M_Timer = p1.M_Timer;
		|            M_Timer.M_Object = this;
		|            base.M_Component = M_Timer;
		|            M_Timer.Tick += M_Timer_Tick1;
		|            Tick = """";
		|        }
		|
		|        public Timer(System.Windows.Forms.Timer p1)
		|        {
		|            M_Timer = (TimerEx)p1;
		|            M_Timer.M_Object = this;
		|            base.M_Component = M_Timer;
		|            M_Timer.Tick += M_Timer_Tick1;
		|            Tick = """";
		|        }
		|
		|        public int Interval
		|        {
		|            get { return M_Timer.Interval; }
		|            set { M_Timer.Interval = value; }
		|        }
		|
		|        public void Start()
		|        {
		|            M_Timer.Start();
		|        }
		|
		|        public void Stop()
		|        {
		|            M_Timer.Stop();
		|        }
		|
		|        public void M_Timer_Tick1(object sender, System.EventArgs e)
		|        {
		|            if (Tick.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Tick;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Tick);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Tick);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "FolderBrowserDialog" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class FolderBrowserDialog : CommonDialog
		|    {
		|        public ClFolderBrowserDialog dll_obj;
		|        public System.Windows.Forms.FolderBrowserDialog M_FolderBrowserDialog;
		|
		|        public FolderBrowserDialog()
		|        {
		|            M_FolderBrowserDialog = new System.Windows.Forms.FolderBrowserDialog();
		|            base.M_CommonDialog = M_FolderBrowserDialog;
		|            OneScriptForms.AddToHashtable(M_FolderBrowserDialog, this);
		|        }
		|
		|        public FolderBrowserDialog(osf.FolderBrowserDialog p1)
		|        {
		|            M_FolderBrowserDialog = p1.M_FolderBrowserDialog;
		|            base.M_CommonDialog = M_FolderBrowserDialog;
		|        }
		|
		|        public FolderBrowserDialog(System.Windows.Forms.FolderBrowserDialog p1)
		|        {
		|            M_FolderBrowserDialog = p1;
		|            base.M_CommonDialog = M_FolderBrowserDialog;
		|        }
		|
		|        public string Description
		|        {
		|            get { return M_FolderBrowserDialog.Description; }
		|            set { M_FolderBrowserDialog.Description = value; }
		|        }
		|
		|        public void Reset()
		|        {
		|            M_FolderBrowserDialog.Reset();
		|        }
		|
		|        public int RootFolder
		|        {
		|            get { return (int)M_FolderBrowserDialog.RootFolder; }
		|            set { M_FolderBrowserDialog.RootFolder = (System.Environment.SpecialFolder)value; }
		|        }
		|
		|        public string SelectedPath
		|        {
		|            get { return M_FolderBrowserDialog.SelectedPath; }
		|            set { M_FolderBrowserDialog.SelectedPath = value; }
		|        }
		|
		|        public bool ShowNewFolderButton
		|        {
		|            get { return M_FolderBrowserDialog.ShowNewFolderButton; }
		|            set { M_FolderBrowserDialog.ShowNewFolderButton = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "CommonDialog" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class CommonDialog : Component
		|    {
		|        public System.Windows.Forms.CommonDialog M_CommonDialog;
		|
		|        public CommonDialog()
		|        {
		|        }
		|
		|        public CommonDialog(osf.CommonDialog p1)
		|        {
		|            M_CommonDialog = p1.M_CommonDialog;
		|            base.M_Component = M_CommonDialog;
		|        }
		|
		|        public CommonDialog(System.Windows.Forms.CommonDialog p1)
		|        {
		|            M_CommonDialog = p1;
		|            base.M_Component = M_CommonDialog;
		|        }
		|
		|        public int ShowDialog()
		|        {
		|            return (int)M_CommonDialog.ShowDialog();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TreeNodeCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TreeNodeCollection : CollectionBase
		|    {
		|        public ClTreeNodeCollection dll_obj;
		|        public System.Windows.Forms.TreeNodeCollection M_TreeNodeCollection;
		|
		|        public TreeNodeCollection()
		|        {
		|        }
		|
		|        public TreeNodeCollection(System.Windows.Forms.TreeNodeCollection p1)
		|        {
		|            M_TreeNodeCollection = p1;
		|            base.List = M_TreeNodeCollection;
		|        }
		|
		|        public new osf.TreeNode Add(object p1)
		|        {
		|            if (p1 is TreeNode)
		|            {
		|                M_TreeNodeCollection.Add((System.Windows.Forms.TreeNode)((TreeNode)p1).M_TreeNode);
		|                System.Windows.Forms.Application.DoEvents();
		|                return (TreeNode)p1;
		|            }
		|            TreeNode TreeNode1 = new TreeNode();
		|            TreeNode1.Text = Convert.ToString(p1);
		|            M_TreeNodeCollection.Add((System.Windows.Forms.TreeNode)((TreeNode)TreeNode1).M_TreeNode);
		|            System.Windows.Forms.Application.DoEvents();
		|            return TreeNode1;
		|        }
		|
		|        public osf.TreeNode Insert(int p1, TreeNode p2)
		|        {
		|            M_TreeNodeCollection.Insert(p1, p2.M_TreeNode);
		|            return p2;
		|        }
		|
		|        public new osf.TreeNode this[int index]
		|        {
		|            get { return ((TreeNodeEx)M_TreeNodeCollection[index]).M_Object; }
		|        }
		|
		|        public void Remove(TreeNode TreeNode)
		|        {
		|            M_TreeNodeCollection.Remove((System.Windows.Forms.TreeNode)TreeNode.M_TreeNode);
		|        }
		|
		|        public override object Current
		|        {
		|            get { return (object)((TreeNodeEx)(System.Windows.Forms.TreeNode)Enumerator.Current).M_Object; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TreeNode" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TreeNodeEx : System.Windows.Forms.TreeNode
		|    {
		|        public osf.TreeNode M_Object;
		|    }//endClass
		|
		|    public class TreeNode
		|    {
		|        public ClTreeNode dll_obj;
		|        public TreeNodeEx M_TreeNode;
		|
		|        public TreeNode()
		|        {
		|            M_TreeNode = new TreeNodeEx();
		|            M_TreeNode.M_Object = this;
		|        }
		|
		|        public TreeNode(string p1)
		|        {
		|            M_TreeNode = new TreeNodeEx();
		|            M_TreeNode.M_Object = this;
		|            M_TreeNode.Text = p1;
		|        }
		|
		|        public TreeNode(osf.TreeNode p1)
		|        {
		|            M_TreeNode = p1.M_TreeNode;
		|            M_TreeNode.M_Object = this;
		|        }
		|
		|        public TreeNode(System.Windows.Forms.TreeNode p1)
		|        {
		|            M_TreeNode = (TreeNodeEx)p1;
		|            M_TreeNode.M_Object = this;
		|        }
		|
		|        public void BeginEdit()
		|        {
		|            M_TreeNode.BeginEdit();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public bool Checked
		|        {
		|            get { return M_TreeNode.Checked; }
		|            set { M_TreeNode.Checked = value; }
		|        }
		|
		|        public void Collapse()
		|        {
		|            M_TreeNode.Collapse();
		|        }
		|
		|        public void Expand()
		|        {
		|            M_TreeNode.Expand();
		|        }
		|
		|        public string FullPath
		|        {
		|            get { return M_TreeNode.FullPath; }
		|        }
		|
		|        public int ImageIndex
		|        {
		|            get { return M_TreeNode.ImageIndex; }
		|            set { M_TreeNode.ImageIndex = value; }
		|        }
		|
		|        public int Index
		|        {
		|            get { return M_TreeNode.Index; }
		|        }
		|
		|        public osf.TreeNodeCollection Nodes
		|        {
		|            get { return new TreeNodeCollection(M_TreeNode.Nodes); }
		|        }
		|
		|        public osf.Font NodeFont
		|        {
		|            get { return new Font(M_TreeNode.NodeFont); }
		|            set { M_TreeNode.NodeFont = value.M_Font; }
		|        }
		|
		|        public osf.TreeNode Parent
		|        {
		|            get { return (TreeNode)((TreeNodeEx)M_TreeNode.Parent).M_Object; }
		|        }
		|
		|        public osf.TreeNode NextVisibleNode
		|        {
		|            get { return ((TreeNodeEx)M_TreeNode.NextVisibleNode).M_Object; }
		|        }
		|
		|        public osf.TreeNode PrevVisibleNode
		|        {
		|            get { return ((TreeNodeEx)M_TreeNode.PrevVisibleNode).M_Object; }
		|        }
		|
		|        public void Remove()
		|        {
		|            M_TreeNode.Remove();
		|        }
		|
		|        public int SelectedImageIndex
		|        {
		|            get { return M_TreeNode.SelectedImageIndex; }
		|            set { M_TreeNode.SelectedImageIndex = value; }
		|        }
		|
		|        public object Tag
		|        {
		|            get { return M_TreeNode.Tag; }
		|            set { M_TreeNode.Tag = value; }
		|        }
		|
		|        public string Text
		|        {
		|            get { return M_TreeNode.Text; }
		|            set { M_TreeNode.Text = value; }
		|        }
		|
		|        public osf.TreeView TreeView
		|        {
		|            get { return (TreeView)((TreeViewEx)M_TreeNode.TreeView).M_Object; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TreeView" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TreeViewEx : System.Windows.Forms.TreeView
		|    {
		|        public osf.TreeView M_Object;
		|    }//endClass
		|
		|    public class TreeView : Control
		|    {
		|        public ClTreeView dll_obj;
		|        public TreeViewEx M_TreeView;
		|        public string AfterLabelEdit;
		|        public string AfterSelect;
		|        public string BeforeExpand;
		|        public string BeforeLabelEdit;
		|        public string BeforeSelect;
		|
		|        public TreeView()
		|        {
		|            M_TreeView = new TreeViewEx();
		|            M_TreeView.M_Object = this;
		|            base.M_Control = M_TreeView;
		|            M_TreeView.BeforeExpand += M_TreeView_BeforeExpand;
		|            M_TreeView.AfterSelect += M_TreeView_AfterSelect;
		|            M_TreeView.AfterLabelEdit += M_TreeView_AfterLabelEdit;
		|            M_TreeView.BeforeSelect += M_TreeView_BeforeSelect;
		|            AfterLabelEdit = """";
		|            AfterSelect = """";
		|            BeforeExpand = """";
		|            BeforeLabelEdit = """";
		|            BeforeSelect = """";
		|        }
		|
		|        public TreeView(osf.TreeView p1)
		|        {
		|            M_TreeView = p1.M_TreeView;
		|            M_TreeView.M_Object = this;
		|            base.M_Control = M_TreeView;
		|            M_TreeView.BeforeExpand += M_TreeView_BeforeExpand;
		|            M_TreeView.AfterSelect += M_TreeView_AfterSelect;
		|            M_TreeView.AfterLabelEdit += M_TreeView_AfterLabelEdit;
		|            M_TreeView.BeforeSelect += M_TreeView_BeforeSelect;
		|            AfterLabelEdit = """";
		|            AfterSelect = """";
		|            BeforeExpand = """";
		|            BeforeLabelEdit = """";
		|            BeforeSelect = """";
		|        }
		|
		|        public TreeView(System.Windows.Forms.TreeView p1)
		|        {
		|            M_TreeView = (TreeViewEx)p1;
		|            M_TreeView.M_Object = this;
		|            base.M_Control = M_TreeView;
		|            M_TreeView.BeforeExpand += M_TreeView_BeforeExpand;
		|            M_TreeView.AfterSelect += M_TreeView_AfterSelect;
		|            M_TreeView.AfterLabelEdit += M_TreeView_AfterLabelEdit;
		|            M_TreeView.BeforeSelect += M_TreeView_BeforeSelect;
		|            AfterLabelEdit = """";
		|            AfterSelect = """";
		|            BeforeExpand = """";
		|            BeforeLabelEdit = """";
		|            BeforeSelect = """";
		|        }
		|
		|        public override void BeginUpdate()
		|        {
		|            M_TreeView.BeginUpdate();
		|        }
		|
		|        public int BorderStyle
		|        {
		|            get { return (int)M_TreeView.BorderStyle; }
		|            set { M_TreeView.BorderStyle = (System.Windows.Forms.BorderStyle)value; }
		|        }
		|
		|        public bool CheckBoxes
		|        {
		|            get { return M_TreeView.CheckBoxes; }
		|            set { M_TreeView.CheckBoxes = value; }
		|        }
		|
		|        public override void EndUpdate()
		|        {
		|            M_TreeView.EndUpdate();
		|        }
		|
		|        public bool FullRowSelect
		|        {
		|            get { return M_TreeView.FullRowSelect; }
		|            set { M_TreeView.FullRowSelect = value; }
		|        }
		|
		|        public osf.TreeNode GetNodeAt(int x, int y)
		|        {
		|            if (M_TreeView.GetNodeAt(x, y) != null)
		|            {
		|                return ((TreeNodeEx)M_TreeView.GetNodeAt(x, y)).M_Object;
		|            }
		|            return null;
		|        }
		|
		|        public bool HideSelection
		|        {
		|            get { return M_TreeView.HideSelection; }
		|            set { M_TreeView.HideSelection = value; }
		|        }
		|
		|        public bool HotTracking
		|        {
		|            get { return M_TreeView.HotTracking; }
		|            set { M_TreeView.HotTracking = value; }
		|        }
		|
		|        public int ImageIndex
		|        {
		|            get { return M_TreeView.ImageIndex; }
		|            set { M_TreeView.ImageIndex = value; }
		|        }
		|
		|        public osf.ImageList ImageList
		|        {
		|            get { return new ImageList(M_TreeView.ImageList); }
		|            set { M_TreeView.ImageList = value.M_ImageList; }
		|        }
		|
		|        public int Indent
		|        {
		|            get { return M_TreeView.Indent; }
		|            set { M_TreeView.Indent = value; }
		|        }
		|
		|        public int ItemHeight
		|        {
		|            get { return M_TreeView.ItemHeight; }
		|            set { M_TreeView.ItemHeight = value; }
		|        }
		|
		|        public bool LabelEdit
		|        {
		|            get { return M_TreeView.LabelEdit; }
		|            set { M_TreeView.LabelEdit = value; }
		|        }
		|
		|        public osf.TreeNodeCollection Nodes
		|        {
		|            get { return new TreeNodeCollection(M_TreeView.Nodes); }
		|        }
		|
		|        public string PathSeparator
		|        {
		|            get { return M_TreeView.PathSeparator; }
		|            set { M_TreeView.PathSeparator = value; }
		|        }
		|
		|        public bool Scrollable
		|        {
		|            get { return M_TreeView.Scrollable; }
		|            set { M_TreeView.Scrollable = value; }
		|        }
		|
		|        public int SelectedImageIndex
		|        {
		|            get { return M_TreeView.SelectedImageIndex; }
		|            set { M_TreeView.SelectedImageIndex = value; }
		|        }
		|
		|        public osf.TreeNode SelectedNode
		|        {
		|            get
		|            {
		|                if (M_TreeView.SelectedNode != null)
		|                {
		|                    return ((TreeNodeEx)M_TreeView.SelectedNode).M_Object;
		|                }
		|                return null;
		|            }
		|            set { M_TreeView.SelectedNode = (System.Windows.Forms.TreeNode)value.M_TreeNode; }
		|        }
		|
		|        public bool ShowLines
		|        {
		|            get { return M_TreeView.ShowLines; }
		|            set { M_TreeView.ShowLines = value; }
		|        }
		|
		|        public bool ShowPlusMinus
		|        {
		|            get { return M_TreeView.ShowPlusMinus; }
		|            set { M_TreeView.ShowPlusMinus = value; }
		|        }
		|
		|        public bool ShowRootLines
		|        {
		|            get { return M_TreeView.ShowRootLines; }
		|            set { M_TreeView.ShowRootLines = value; }
		|        }
		|
		|        public bool Sorted
		|        {
		|            get { return M_TreeView.Sorted; }
		|            set { M_TreeView.Sorted = value; }
		|        }
		|
		|        public void M_TreeView_AfterLabelEdit(object sender, System.Windows.Forms.NodeLabelEditEventArgs e)
		|        {
		|            if (AfterLabelEdit.Length > 0)
		|            {
		|                NodeLabelEditEventArgs NodeLabelEditEventArgs1 = new NodeLabelEditEventArgs();
		|                NodeLabelEditEventArgs1.EventString = AfterLabelEdit;
		|                NodeLabelEditEventArgs1.Sender = this;
		|                NodeLabelEditEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.AfterLabelEdit);
		|                NodeLabelEditEventArgs1.CancelEdit = e.CancelEdit;
		|                NodeLabelEditEventArgs1.Label = e.Label;
		|                NodeLabelEditEventArgs1.Node = (TreeNode)((TreeNodeEx)e.Node).M_Object;
		|                NodeLabelEditEventArgs1.Label_old = e.Node.Text;
		|                ClNodeLabelEditEventArgs ClNodeLabelEditEventArgs1 = new ClNodeLabelEditEventArgs(NodeLabelEditEventArgs1);
		|                OneScriptForms.Event = ClNodeLabelEditEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.AfterLabelEdit);
		|                e.CancelEdit = NodeLabelEditEventArgs1.CancelEdit;
		|            }
		|        }
		|
		|        public void M_TreeView_AfterSelect(object sender, System.Windows.Forms.TreeViewEventArgs e)
		|        {
		|            if (AfterSelect.Length > 0)
		|            {
		|                TreeViewEventArgs TreeViewEventArgs1 = new TreeViewEventArgs();
		|                TreeViewEventArgs1.Action = (int)e.Action;
		|                TreeViewEventArgs1.Node = (TreeNode)((TreeNodeEx)e.Node).M_Object;
		|                TreeViewEventArgs1.EventString = AfterSelect;
		|                TreeViewEventArgs1.Sender = this;
		|                TreeViewEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.AfterSelect);
		|                ClTreeViewEventArgs ClTreeViewEventArgs1 = new ClTreeViewEventArgs(TreeViewEventArgs1);
		|                OneScriptForms.Event = ClTreeViewEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.AfterSelect);
		|            }
		|        }
		|
		|        public void M_TreeView_BeforeExpand(object sender, System.Windows.Forms.TreeViewCancelEventArgs e)
		|        {
		|            if (BeforeExpand.Length > 0)
		|            {
		|                TreeViewCancelEventArgs TreeViewCancelEventArgs1 = new TreeViewCancelEventArgs();
		|                TreeViewCancelEventArgs1.Cancel = e.Cancel;
		|                TreeViewCancelEventArgs1.Action = (int)e.Action;
		|                TreeViewCancelEventArgs1.Node = (TreeNode)((TreeNodeEx)e.Node).M_Object;
		|                TreeViewCancelEventArgs1.EventString = BeforeExpand;
		|                TreeViewCancelEventArgs1.Sender = this;
		|                TreeViewCancelEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.BeforeExpand);
		|                ClTreeViewCancelEventArgs ClTreeViewCancelEventArgs1 = new ClTreeViewCancelEventArgs(TreeViewCancelEventArgs1);
		|                OneScriptForms.Event = ClTreeViewCancelEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.BeforeExpand);
		|                e.Cancel = TreeViewCancelEventArgs1.Cancel;
		|            }
		|        }
		|
		|        public void M_TreeView_BeforeSelect(object sender, System.Windows.Forms.TreeViewCancelEventArgs e)
		|        {
		|            if (BeforeSelect.Length > 0)
		|            {
		|                TreeViewCancelEventArgs TreeViewCancelEventArgs1 = new TreeViewCancelEventArgs();
		|                TreeViewCancelEventArgs1.Cancel = e.Cancel;
		|                TreeViewCancelEventArgs1.Action = (int)e.Action;
		|                TreeViewCancelEventArgs1.Node = (TreeNode)((TreeNodeEx)e.Node).M_Object;
		|                TreeViewCancelEventArgs1.EventString = BeforeSelect;
		|                TreeViewCancelEventArgs1.Sender = this;
		|                TreeViewCancelEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.BeforeSelect);
		|                ClTreeViewCancelEventArgs ClTreeViewCancelEventArgs1 = new ClTreeViewCancelEventArgs(TreeViewCancelEventArgs1);
		|                OneScriptForms.Event = ClTreeViewCancelEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.BeforeSelect);
		|                e.Cancel = TreeViewCancelEventArgs1.Cancel;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ExtractIconClass" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    class ExtractIconClass
		|    {
		|        [DllImport(""Kernel32.dll"")] public static extern int GetModuleHandle(string lpModuleName);
		|        [DllImport(""Shell32.dll"")] public static extern IntPtr ExtractIcon(int hInst, string FileName, int nIconIndex);
		|        [DllImport(""Shell32.dll"")] public static extern int DestroyIcon(IntPtr hIcon);
		|        [DllImport(""Shell32.dll"")] public static extern IntPtr ExtractIconEx(string FileName, int nIconIndex, int[] lgIcon, int[] smIcon, int nIcons);
		|        [DllImport(""Shell32.dll"")] private static extern int SHGetFileInfo(string pszPath, uint dwFileAttributes, out SHFILEINFO psfi, uint cbfileInfo, SHGFI uFlags);
		|        [StructLayout(LayoutKind.Sequential)]
		|
		|        private struct SHFILEINFO
		|        {
		|            public SHFILEINFO(bool b)
		|            {
		|                hIcon = IntPtr.Zero;
		|                iIcon = 0;
		|                dwAttributes = 0;
		|                szDisplayName = """";
		|                szTypeName = """";
		|            }
		|            public IntPtr hIcon;
		|            public int iIcon;
		|            public uint dwAttributes;
		|            [MarshalAs(UnmanagedType.LPStr, SizeConst = 260)]
		|            public string szDisplayName;
		|            [MarshalAs(UnmanagedType.LPStr, SizeConst = 80)]
		|            public string szTypeName;
		|        };
		|
		|        private enum SHGFI
		|        {
		|            SmallIcon = 0x00000001,
		|            LargeIcon = 0x00000000,
		|            Icon = 0x00000100,
		|            DisplayName = 0x00000200,
		|            Typename = 0x00000400,
		|            SysIconIndex = 0x00004000,
		|            UseFileAttributes = 0x00000010
		|        }
		|
		|        public static System.Drawing.Icon GetIcon(string strPath, bool bSmall)
		|        {
		|            SHFILEINFO info = new SHFILEINFO(true);
		|            int cbFileInfo = Marshal.SizeOf(info);
		|            SHGFI flags;
		|            if (bSmall)
		|                flags = SHGFI.Icon | SHGFI.SmallIcon | SHGFI.UseFileAttributes;
		|            else
		|                flags = SHGFI.Icon | SHGFI.LargeIcon | SHGFI.UseFileAttributes;
		|
		|            SHGetFileInfo(strPath, 256, out info, (uint)cbFileInfo, flags);
		|            
		|            return System.Drawing.Icon.FromHandle(info.hIcon);
		|        }        
		|
		|        public static System.Drawing.Icon GetSysIcon(int icNo)
		|        {
		|            IntPtr HIcon = ExtractIcon(GetModuleHandle(string.Empty), ""DDORes.dll""/*""Shell32.dll""*/, icNo);            
		|            return System.Drawing.Icon.FromHandle(HIcon);
		|        }
		|        public static System.Drawing.Icon GetSysIconFromDll(int icNo, string dll)
		|        {
		|            IntPtr HIcon = ExtractIcon(GetModuleHandle(string.Empty), dll + "".dll"", icNo);
		|            return System.Drawing.Icon.FromHandle(HIcon);
		|        }
		|        public static System.Drawing.Icon GetIconFromExeDll(int icNo, string dll)
		|        {
		|            IntPtr HIcon = ExtractIcon(GetModuleHandle(string.Empty), dll, icNo);
		|
		|            return System.Drawing.Icon.FromHandle(HIcon);
		|        }
		|    }
		|}
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "MonthCalendar" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class MonthCalendarEx : System.Windows.Forms.MonthCalendar
		|    {
		|        public osf.MonthCalendar M_Object;
		|    }//endClass
		|
		|    public class MonthCalendar : Control
		|    {
		|        public ClMonthCalendar dll_obj;
		|        public MonthCalendarEx M_MonthCalendar;
		|        public string M_DateChanged;
		|        public string M_DateSelected;
		|
		|        public MonthCalendar()
		|        {
		|            M_MonthCalendar = new MonthCalendarEx();
		|            M_MonthCalendar.M_Object = this;
		|            base.M_Control = M_MonthCalendar;
		|            M_MonthCalendar.DateChanged += new System.Windows.Forms.DateRangeEventHandler(MonthCalendar_DateChanged);
		|            M_MonthCalendar.DateSelected += new System.Windows.Forms.DateRangeEventHandler(MonthCalendar_DateSelected);
		|            M_DateChanged = """";
		|            M_DateSelected = """";
		|        }
		|
		|        public MonthCalendar(osf.MonthCalendar p1)
		|        {
		|            M_MonthCalendar = p1.M_MonthCalendar;
		|            M_MonthCalendar.M_Object = this;
		|            base.M_Control = M_MonthCalendar;
		|            M_MonthCalendar.DateChanged += new System.Windows.Forms.DateRangeEventHandler(MonthCalendar_DateChanged);
		|            M_MonthCalendar.DateSelected += new System.Windows.Forms.DateRangeEventHandler(MonthCalendar_DateSelected);
		|            M_DateChanged = """";
		|            M_DateSelected = """";
		|        }
		|
		|        public MonthCalendar(System.Windows.Forms.MonthCalendar p1)
		|        {
		|            M_MonthCalendar = (MonthCalendarEx)p1;
		|            M_MonthCalendar.M_Object = this;
		|            base.M_Control = M_MonthCalendar;
		|            M_MonthCalendar.DateChanged += new System.Windows.Forms.DateRangeEventHandler(MonthCalendar_DateChanged);
		|            M_MonthCalendar.DateSelected += new System.Windows.Forms.DateRangeEventHandler(MonthCalendar_DateSelected);
		|            M_DateChanged = """";
		|            M_DateSelected = """";
		|        }
		|
		|        public bool ShowToday
		|        {
		|            get { return M_MonthCalendar.ShowToday; }
		|            set { M_MonthCalendar.ShowToday = value; }
		|        }
		|
		|        public int FirstDayOfWeek
		|        {
		|            get { return (int)M_MonthCalendar.FirstDayOfWeek; }
		|            set { M_MonthCalendar.FirstDayOfWeek = (System.Windows.Forms.Day)value; }
		|        }
		|
		|        public bool ShowTodayCircle
		|        {
		|            get { return M_MonthCalendar.ShowTodayCircle; }
		|            set { M_MonthCalendar.ShowTodayCircle = value; }
		|        }
		|
		|        public int MaxSelectionCount
		|        {
		|            get { return M_MonthCalendar.MaxSelectionCount; }
		|            set { M_MonthCalendar.MaxSelectionCount = value; }
		|        }
		|
		|        public System.DateTime[] MonthlyBoldedDates
		|        {
		|            get { return M_MonthCalendar.MonthlyBoldedDates; }
		|            set { M_MonthCalendar.MonthlyBoldedDates = value; }
		|        }
		|
		|        public System.DateTime[] AnnuallyBoldedDates
		|        {
		|            get { return M_MonthCalendar.AnnuallyBoldedDates; }
		|            set { M_MonthCalendar.AnnuallyBoldedDates = value; }
		|        }
		|
		|        public osf.SelectionRange SelectionRange
		|        {
		|            get { return new SelectionRange(M_MonthCalendar.SelectionRange); }
		|            set { M_MonthCalendar.SelectionRange = value.M_SelectionRange; }
		|        }
		|
		|        public System.DateTime TodayDate
		|        {
		|            get { return M_MonthCalendar.TodayDate; }
		|            set { M_MonthCalendar.TodayDate = value; }
		|        }
		|
		|        public System.DateTime[] BoldedDates
		|        {
		|            get { return M_MonthCalendar.BoldedDates; }
		|            set { M_MonthCalendar.BoldedDates = value; }
		|        }
		|
		|        public System.DateTime SelectionStart
		|        {
		|            get { return M_MonthCalendar.SelectionStart; }
		|            set
		|            {
		|                M_MonthCalendar.SelectionStart = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public System.DateTime SelectionEnd
		|        {
		|            get { return M_MonthCalendar.SelectionEnd; }
		|            set
		|            {
		|                M_MonthCalendar.SelectionEnd = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string DateChanged
		|        {
		|            get { return M_DateChanged; }
		|            set { M_DateChanged = value; }
		|        }
		|
		|        public string DateSelected
		|        {
		|            get { return M_DateSelected; }
		|            set { M_DateSelected = value; }
		|        }
		|
		|        public System.DateTime MaxDate
		|        {
		|            get { return M_MonthCalendar.MaxDate; }
		|            set
		|            {
		|                M_MonthCalendar.MaxDate = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public System.DateTime MinDate
		|        {
		|            get { return M_MonthCalendar.MinDate; }
		|            set
		|            {
		|                M_MonthCalendar.MinDate = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Size PreferredSize
		|        {
		|            get { return new Size(M_MonthCalendar.PreferredSize); }
		|        }
		|
		|        private void MonthCalendar_DateChanged(object sender, System.Windows.Forms.DateRangeEventArgs e)
		|        {
		|            if (M_DateChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = M_DateChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.DateChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.DateChanged);
		|            }
		|        }
		|
		|        private void MonthCalendar_DateSelected(object sender, System.Windows.Forms.DateRangeEventArgs e)
		|        {
		|            if (M_DateSelected.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = M_DateSelected;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.DateSelected);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.DateSelected);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "SelectionRange" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class SelectionRange
		|    {
		|        public ClSelectionRange dll_obj;
		|        public System.Windows.Forms.SelectionRange M_SelectionRange;
		|
		|        public SelectionRange()
		|        {
		|            M_SelectionRange = new System.Windows.Forms.SelectionRange();
		|            OneScriptForms.AddToHashtable(M_SelectionRange, this);
		|        }
		|
		|        public SelectionRange(DateTime p1, DateTime p2)
		|        {
		|            M_SelectionRange = new System.Windows.Forms.SelectionRange(p1, p2);
		|            OneScriptForms.AddToHashtable(M_SelectionRange, this);
		|        }
		|
		|        public SelectionRange(osf.SelectionRange p1)
		|        {
		|            M_SelectionRange = p1.M_SelectionRange;
		|            OneScriptForms.AddToHashtable(M_SelectionRange, this);
		|        }
		|		
		|        public SelectionRange(System.Windows.Forms.SelectionRange p1)
		|        {
		|            M_SelectionRange = p1;
		|            OneScriptForms.AddToHashtable(M_SelectionRange, this);
		|        }
		|
		|        public System.DateTime End
		|        {
		|            get { return M_SelectionRange.End; }
		|            set { M_SelectionRange.End = value; }
		|        }
		|
		|        public System.DateTime Start
		|        {
		|            get { return M_SelectionRange.Start; }
		|            set { M_SelectionRange.Start = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Process" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ProcessEx : System.Diagnostics.Process
		|    {
		|        public osf.Process M_Object;
		|    }//endClass
		|
		|    public class Process
		|    {
		|        public ClProcess dll_obj;
		|        public ProcessEx M_Process;
		|
		|        public Process()
		|        {
		|            M_Process = new ProcessEx();
		|            M_Process.M_Object = this;
		|        }
		|		
		|        public Process(osf.Process p1)
		|        {
		|            M_Process = p1.M_Process;
		|            M_Process.M_Object = this;
		|        }
		|
		|        public Process(System.Diagnostics.Process p1)
		|        {
		|            M_Process = (ProcessEx)p1;
		|            M_Process.M_Object = this;
		|        }
		|
		|        public bool HasExited
		|        {
		|            get { return M_Process.HasExited; }
		|        }
		|
		|        public osf.StreamReader StandardOutput
		|        {
		|            get { return new StreamReader(M_Process.StandardOutput); }
		|        }
		|
		|        public osf.Process Start()
		|        {
		|            M_Process.Start();
		|            return this;
		|        }
		|
		|        public osf.ProcessStartInfo StartInfo
		|        {
		|            get { return new ProcessStartInfo(M_Process.StartInfo); }
		|            set { M_Process.StartInfo = (System.Diagnostics.ProcessStartInfo)value.M_ProcessStartInfo; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ProcessStartInfo" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ProcessStartInfo
		|    {
		|        public ClProcessStartInfo dll_obj;
		|        public System.Diagnostics.ProcessStartInfo M_ProcessStartInfo;
		|
		|        public ProcessStartInfo(string filename = null, string arguments = null)
		|        {
		|            M_ProcessStartInfo = new System.Diagnostics.ProcessStartInfo(filename, arguments);
		|            OneScriptForms.AddToHashtable(M_ProcessStartInfo, this);
		|        }
		|
		|        public ProcessStartInfo(osf.ProcessStartInfo p1)
		|        {
		|            M_ProcessStartInfo = p1.M_ProcessStartInfo;
		|            OneScriptForms.AddToHashtable(M_ProcessStartInfo, this);
		|        }
		|		
		|        public ProcessStartInfo(System.Diagnostics.ProcessStartInfo p1)
		|        {
		|            M_ProcessStartInfo = p1;
		|            OneScriptForms.AddToHashtable(M_ProcessStartInfo, this);
		|        }
		|
		|        public string Arguments
		|        {
		|            get { return M_ProcessStartInfo.Arguments; }
		|            set { M_ProcessStartInfo.Arguments = value; }
		|        }
		|
		|        public bool CreateNoWindow
		|        {
		|            get { return M_ProcessStartInfo.CreateNoWindow; }
		|            set { M_ProcessStartInfo.CreateNoWindow = value; }
		|        }
		|
		|        public string Domain
		|        {
		|            get { return M_ProcessStartInfo.Domain; }
		|            set { M_ProcessStartInfo.Domain = value; }
		|        }
		|
		|        public string FileName
		|        {
		|            get { return M_ProcessStartInfo.FileName; }
		|            set { M_ProcessStartInfo.FileName = value; }
		|        }
		|
		|        public string Password
		|        {
		|            get { return """"; }
		|            set
		|            {
		|                SecureString secureString = new SecureString();
		|                for (int i = 0; i < Strings.Len(value); i++)
		|                {
		|                    secureString.AppendChar(Convert.ToChar(value.Substring(i, 1)));
		|                }
		|                M_ProcessStartInfo.Password = secureString;
		|            }
		|        }
		|
		|        public bool RedirectStandardOutput
		|        {
		|            get { return M_ProcessStartInfo.RedirectStandardOutput; }
		|            set { M_ProcessStartInfo.RedirectStandardOutput = value; }
		|        }
		|
		|        public string UserName
		|        {
		|            get { return M_ProcessStartInfo.UserName; }
		|            set { M_ProcessStartInfo.UserName = value; }
		|        }
		|
		|        public bool UseShellExecute
		|        {
		|            get { return M_ProcessStartInfo.UseShellExecute; }
		|            set { M_ProcessStartInfo.UseShellExecute = value; }
		|        }
		|
		|        public int WindowStyle
		|        {
		|            get { return (int)M_ProcessStartInfo.WindowStyle; }
		|            set { M_ProcessStartInfo.WindowStyle = (System.Diagnostics.ProcessWindowStyle)value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TextBox" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TextBoxEx : System.Windows.Forms.TextBox
		|    {
		|        public osf.TextBox M_Object;
		|    }//endClass
		|
		|    public class TextBox : TextBoxBase
		|    {
		|        public ClTextBox dll_obj;
		|        public TextBoxEx M_TextBox;
		|
		|        public TextBox()
		|        {
		|            M_TextBox = new TextBoxEx();
		|            M_TextBox.M_Object = this;
		|            base.M_TextBoxBase = M_TextBox;
		|        }
		|		
		|        public TextBox(osf.TextBox p1)
		|        {
		|            M_TextBox = p1.M_TextBox;
		|            M_TextBox.M_Object = this;
		|            base.M_TextBoxBase = M_TextBox;
		|        }
		|
		|        public TextBox(System.Windows.Forms.TextBox p1)
		|        {
		|            M_TextBox = (TextBoxEx)p1;
		|            M_TextBox.M_Object = this;
		|            base.M_TextBoxBase = M_TextBox;
		|        }
		|
		|        public bool AcceptsReturn
		|        {
		|            get { return M_TextBox.AcceptsReturn; }
		|            set
		|            {
		|                M_TextBox.AcceptsReturn = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int CharacterCasing
		|        {
		|            get { return (int)M_TextBox.CharacterCasing; }
		|            set { M_TextBox.CharacterCasing = (System.Windows.Forms.CharacterCasing)value; }
		|        }
		|
		|        public string PasswordChar
		|        {
		|            get { return Convert.ToString(M_TextBox.PasswordChar); }
		|            set { M_TextBox.PasswordChar = Convert.ToChar(value); }
		|        }
		|
		|        public int ScrollBars
		|        {
		|            get { return (int)M_TextBox.ScrollBars; }
		|            set { M_TextBox.ScrollBars = (System.Windows.Forms.ScrollBars)value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TextBoxBase" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TextBoxBase : Control
		|    {
		|        private System.Windows.Forms.TextBoxBase m_TextBoxBase;
		|
		|        public System.Windows.Forms.TextBoxBase M_TextBoxBase
		|        {
		|            get { return m_TextBoxBase; }
		|            set
		|            {
		|                m_TextBoxBase = value;
		|                base.M_Control = m_TextBoxBase;
		|            }
		|        }
		|
		|        public TextBoxBase()
		|        {
		|        }
		|
		|        public bool AcceptsTab
		|        {
		|            get { return M_TextBoxBase.AcceptsTab; }
		|            set
		|            {
		|                M_TextBoxBase.AcceptsTab = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void AppendText(string text)
		|        {
		|            M_TextBoxBase.AppendText(text);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public bool AutoSize
		|        {
		|            get { return M_TextBoxBase.AutoSize; }
		|            set
		|            {
		|                M_TextBoxBase.AutoSize = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int BorderStyle
		|        {
		|            get { return (int)M_TextBoxBase.BorderStyle; }
		|            set
		|            {
		|                M_TextBoxBase.BorderStyle = (System.Windows.Forms.BorderStyle)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool CanUndo
		|        {
		|            get { return M_TextBoxBase.CanUndo; }
		|        }
		|
		|        public void Copy()
		|        {
		|            M_TextBoxBase.Copy();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void Cut()
		|        {
		|            M_TextBoxBase.Cut();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public bool HideSelection
		|        {
		|            get { return M_TextBoxBase.HideSelection; }
		|            set
		|            {
		|                M_TextBoxBase.HideSelection = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int MaxLength
		|        {
		|            get { return M_TextBoxBase.MaxLength; }
		|            set
		|            {
		|                M_TextBoxBase.MaxLength = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool Modified
		|        {
		|            get { return M_TextBoxBase.Modified; }
		|            set
		|            {
		|                M_TextBoxBase.Modified = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool Multiline
		|        {
		|            get { return M_TextBoxBase.Multiline; }
		|            set
		|            {
		|                M_TextBoxBase.Multiline = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public virtual int PreferredHeight
		|        {
		|            get { return M_TextBoxBase.PreferredHeight; }
		|        }
		|
		|        public void Paste()
		|        {
		|            M_TextBoxBase.Paste();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public bool ReadOnly
		|        {
		|            get { return M_TextBoxBase.ReadOnly; }
		|            set
		|            {
		|                M_TextBoxBase.ReadOnly = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void ScrollToCaret()
		|        {
		|            M_TextBoxBase.ScrollToCaret();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void SelectAll()
		|        {
		|            M_TextBoxBase.SelectAll();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public string SelectedText
		|        {
		|            get { return M_TextBoxBase.SelectedText; }
		|            set
		|            {
		|                M_TextBoxBase.SelectedText = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int SelectionLength
		|        {
		|            get { return M_TextBoxBase.SelectionLength; }
		|            set
		|            {
		|                M_TextBoxBase.SelectionLength = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int SelectionStart
		|        {
		|            get { return M_TextBoxBase.SelectionStart; }
		|            set
		|            {
		|                M_TextBoxBase.SelectionStart = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int TextLength
		|        {
		|            get { return M_TextBoxBase.TextLength; }
		|        }
		|
		|        public void Undo()
		|        {
		|            M_TextBoxBase.Undo();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public bool WordWrap
		|        {
		|            get { return M_TextBoxBase.WordWrap; }
		|            set
		|            {
		|                M_TextBoxBase.WordWrap = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "PropertyGrid" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class PropertyGridEx : System.Windows.Forms.PropertyGrid
		|    {
		|        public osf.PropertyGrid M_Object;
		|    }//endClass
		|
		|    public class PropertyGrid : ContainerControl
		|    {
		|        public ClPropertyGrid dll_obj;
		|        public string PropertyValueChanged;
		|        public string SelectedGridItemChanged;
		|        public PropertyGridEx M_PropertyGrid;
		|
		|        public PropertyGrid()
		|        {
		|            M_PropertyGrid = new PropertyGridEx();
		|            M_PropertyGrid.M_Object = this;
		|            base.M_ContainerControl = M_PropertyGrid;
		|            M_PropertyGrid.PropertyValueChanged += M_PropertyGrid_PropertyValueChanged;
		|            M_PropertyGrid.SelectedGridItemChanged += M_PropertyGrid_SelectedGridItemChanged;
		|            PropertyValueChanged = """";
		|            SelectedGridItemChanged = """";
		|        }
		|
		|        public PropertyGrid(osf.PropertyGrid p1)
		|        {
		|            M_PropertyGrid = p1.M_PropertyGrid;
		|            M_PropertyGrid.M_Object = this;
		|            base.M_ContainerControl = M_PropertyGrid;
		|            M_PropertyGrid.PropertyValueChanged += M_PropertyGrid_PropertyValueChanged;
		|            M_PropertyGrid.SelectedGridItemChanged += M_PropertyGrid_SelectedGridItemChanged;
		|            PropertyValueChanged = """";
		|            SelectedGridItemChanged = """";
		|        }
		|
		|        public PropertyGrid(System.Windows.Forms.PropertyGrid p1)
		|        {
		|            M_PropertyGrid = (PropertyGridEx)p1;
		|            M_PropertyGrid.M_Object = this;
		|            base.M_ContainerControl = M_PropertyGrid;
		|            M_PropertyGrid.PropertyValueChanged += M_PropertyGrid_PropertyValueChanged;
		|            M_PropertyGrid.SelectedGridItemChanged += M_PropertyGrid_SelectedGridItemChanged;
		|            PropertyValueChanged = """";
		|            SelectedGridItemChanged = """";
		|        }
		|
		|        private void M_PropertyGrid_SelectedGridItemChanged(object sender, System.Windows.Forms.SelectedGridItemChangedEventArgs e)
		|        {
		|            if (SelectedGridItemChanged.Length > 0)
		|            {
		|                SelectedGridItemChangedEventArgs SelectedGridItemChangedEventArgs1 = new SelectedGridItemChangedEventArgs();
		|                SelectedGridItemChangedEventArgs1.OldLabel = e.OldSelection.Label;
		|                SelectedGridItemChangedEventArgs1.NewLabel = e.NewSelection.Label;
		|                SelectedGridItemChangedEventArgs1.OldValue = e.OldSelection.Value;
		|                SelectedGridItemChangedEventArgs1.NewValue = e.NewSelection.Value;
		|                SelectedGridItemChangedEventArgs1.EventString = SelectedGridItemChanged;
		|                SelectedGridItemChangedEventArgs1.Sender = this;
		|                SelectedGridItemChangedEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.SelectedGridItemChanged);
		|                ClSelectedGridItemChangedEventArgs ClSelectedGridItemChangedEventArgs1 = new ClSelectedGridItemChangedEventArgs(SelectedGridItemChangedEventArgs1);
		|                OneScriptForms.Event = ClSelectedGridItemChangedEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.SelectedGridItemChanged);
		|            }
		|        }
		|
		|        public void M_PropertyGrid_PropertyValueChanged(object sender, System.Windows.Forms.PropertyValueChangedEventArgs e)
		|        {
		|            if (PropertyValueChanged.Length > 0)
		|            {
		|                PropertyValueChangedEventArgs PropertyValueChangedEventArgs1 = new PropertyValueChangedEventArgs();
		|                PropertyValueChangedEventArgs1.EventString = PropertyValueChanged;
		|                PropertyValueChangedEventArgs1.Sender = this;
		|                PropertyValueChangedEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.PropertyValueChanged);
		|                PropertyValueChangedEventArgs1.OldValue = e.OldValue;
		|                PropertyValueChangedEventArgs1.ChangedItem = new GridItem(e.ChangedItem);
		|                ClPropertyValueChangedEventArgs ClPropertyValueChangedEventArgs1 = new ClPropertyValueChangedEventArgs(PropertyValueChangedEventArgs1);
		|                OneScriptForms.Event = ClPropertyValueChangedEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.PropertyValueChanged);
		|            }
		|        }
		|
		|        public int PropertySort
		|        {
		|            get { return (int)M_PropertyGrid.PropertySort; }
		|            set { M_PropertyGrid.PropertySort = (System.Windows.Forms.PropertySort)value; }
		|        }
		|
		|        public object SelectedObject
		|        {
		|            get { return M_PropertyGrid.SelectedObject; }
		|            set
		|            {
		|                try
		|                {
		|                    M_PropertyGrid.SelectedObject = ((dynamic)value).M_Object;
		|                }
		|                catch
		|                {
		|                    M_PropertyGrid.SelectedObject = value;
		|                }
		|            }
		|        }
		|
		|        public osf.GridItem SelectedGridItem
		|        {
		|            get { return new GridItem(M_PropertyGrid.SelectedGridItem); }
		|            set { M_PropertyGrid.SelectedGridItem = value.M_GridItem; }
		|        }
		|
		|        public bool ToolbarVisible
		|        {
		|            get { return this.M_PropertyGrid.ToolbarVisible; }
		|            set { this.M_PropertyGrid.ToolbarVisible = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "GridItem" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class GridItem
		|    {
		|        public ClGridItem dll_obj;
		|        public System.Windows.Forms.GridItem M_GridItem;
		|
		|        public GridItem(osf.GridItem p1)
		|        {
		|            M_GridItem = p1.M_GridItem;
		|            OneScriptForms.AddToHashtable(M_GridItem, this);
		|        }
		|		
		|        public GridItem(System.Windows.Forms.GridItem p1)
		|        {
		|            M_GridItem = p1;
		|            OneScriptForms.AddToHashtable(M_GridItem, this);
		|        }
		|
		|        public string Label
		|        {
		|            get { return M_GridItem.Label; }
		|        }
		|
		|        public object Value
		|        {
		|            get { return M_GridItem.Value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "GridItemCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class GridItemCollection : System.Collections.ICollection
		|    {
		|        public ClGridItemCollection dll_obj;
		|        public System.Windows.Forms.GridItemCollection M_GridItemCollection;
		|
		|        public GridItemCollection(System.Windows.Forms.GridItemCollection p1)
		|        {
		|            M_GridItemCollection = p1;
		|        }
		|
		|        public osf.GridItem this[int index]
		|        {
		|            get { return new GridItem(M_GridItemCollection[index]); }
		|        }
		|
		|        public osf.GridItem this[string str]
		|        {
		|            get { return new GridItem(M_GridItemCollection[str]); }
		|        }
		|
		|        public void CopyTo(Array array, int index)
		|        {
		|            CopyTo(array, index);
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_GridItemCollection.Count; }
		|        }
		|
		|        public bool IsSynchronized
		|        {
		|            get { return IsSynchronized; }
		|        }
		|
		|        public object SyncRoot
		|        {
		|            get { return SyncRoot; }
		|        }
		|
		|        public System.Collections.IEnumerator GetEnumerator()
		|        {
		|            return M_GridItemCollection.GetEnumerator();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ColumnHeader" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ColumnHeaderEx : System.Windows.Forms.ColumnHeader
		|    {
		|        public osf.ColumnHeader M_Object;
		|    }//endClass
		|
		|    public class ColumnHeader
		|    {
		|        public ClColumnHeader dll_obj;
		|        public ColumnHeaderEx M_ColumnHeader;
		|        public int SortType;
		|
		|        public ColumnHeader()
		|        {
		|            M_ColumnHeader = new ColumnHeaderEx();
		|            M_ColumnHeader.M_Object = this;
		|            SortType = 0;
		|        }
		|
		|        public ColumnHeader(string text, int width, System.Windows.Forms.HorizontalAlignment alignment)
		|        {
		|            M_ColumnHeader = new ColumnHeaderEx();
		|            if (text is string)
		|            {
		|                M_ColumnHeader.Text = text;
		|            }
		|            M_ColumnHeader.Width = width;
		|            M_ColumnHeader.TextAlign = (System.Windows.Forms.HorizontalAlignment)alignment;
		|            M_ColumnHeader.M_Object = this;
		|            SortType = 0;
		|        }
		|
		|        public ColumnHeader(osf.ColumnHeader p1)
		|        {
		|            M_ColumnHeader = p1.M_ColumnHeader;
		|            M_ColumnHeader.M_Object = this;
		|            SortType = 0;
		|        }
		|
		|        public ColumnHeader(System.Windows.Forms.ColumnHeader p1)
		|        {
		|            M_ColumnHeader = (ColumnHeaderEx)p1;
		|            M_ColumnHeader.M_Object = this;
		|            SortType = 0;
		|        }
		|
		|        public int Index
		|        {
		|            get { return M_ColumnHeader.Index; }
		|        }
		|
		|        public string Text
		|        {
		|            get { return M_ColumnHeader.Text; }
		|            set { M_ColumnHeader.Text = value; }
		|        }
		|
		|        public int TextAlign
		|        {
		|            get { return (int)M_ColumnHeader.TextAlign; }
		|            set { M_ColumnHeader.TextAlign = (System.Windows.Forms.HorizontalAlignment)value; }
		|        }
		|
		|        public int Width
		|        {
		|            get { return M_ColumnHeader.Width; }
		|            set { M_ColumnHeader.Width = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListViewSubItemCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListViewSubItemCollection : CollectionBase
		|    {
		|        public ClListViewSubItemCollection dll_obj;
		|        public System.Windows.Forms.ListViewItem.ListViewSubItemCollection M_ListViewSubItemCollection;
		|
		|        public ListViewSubItemCollection()
		|        {
		|        }
		|
		|        public ListViewSubItemCollection(System.Windows.Forms.ListViewItem.ListViewSubItemCollection p1)
		|        {
		|            M_ListViewSubItemCollection = p1;
		|            base.List = M_ListViewSubItemCollection;
		|        }
		|
		|        public new osf.ListViewSubItem Add(object item)
		|        {
		|            if (item is ListViewSubItem)
		|            {
		|                M_ListViewSubItemCollection.Add((((ListViewSubItem)item).M_ListViewSubItem));
		|                System.Windows.Forms.Application.DoEvents();
		|                return (ListViewSubItem)item;
		|            }
		|            ListViewSubItem ListViewSubItem1 = new ListViewSubItem("""");
		|            ListViewSubItem1.Text = Convert.ToString(item);
		|            M_ListViewSubItemCollection.Add(ListViewSubItem1.M_ListViewSubItem);
		|            System.Windows.Forms.Application.DoEvents();
		|            return (ListViewSubItem)ListViewSubItem1;
		|        }
		|
		|        public osf.ListViewSubItem Insert(int index, ListViewSubItem p1)
		|        {
		|            M_ListViewSubItemCollection.Insert(index, (System.Windows.Forms.ListViewItem.ListViewSubItem)p1.M_ListViewSubItem);
		|            return p1;
		|        }
		|
		|        public new osf.ListViewSubItem this[int index]
		|        {
		|            get { return new ListViewSubItem(M_ListViewSubItemCollection[index]); }
		|        }
		|
		|        public override object Current
		|        {
		|            get { return ((dynamic)Enumerator.Current).M_ListViewSubItem; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListViewSubItem" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListViewSubItem
		|    {
		|        public ClListViewSubItem dll_obj;
		|        public System.Windows.Forms.ListViewItem.ListViewSubItem M_ListViewSubItem;
		|
		|        public ListViewSubItem(string p1 = """")
		|        {
		|            M_ListViewSubItem = new System.Windows.Forms.ListViewItem.ListViewSubItem();
		|            M_ListViewSubItem.Text = p1;
		|            OneScriptForms.AddToHashtable(M_ListViewSubItem, this);
		|        }
		|
		|        public ListViewSubItem(osf.ListViewSubItem p1)
		|        {
		|            M_ListViewSubItem = p1.M_ListViewSubItem;
		|            OneScriptForms.AddToHashtable(M_ListViewSubItem, this);
		|        }
		|
		|        public ListViewSubItem(System.Windows.Forms.ListViewItem.ListViewSubItem p1)
		|        {
		|            M_ListViewSubItem = p1;
		|            OneScriptForms.AddToHashtable(M_ListViewSubItem, this);
		|        }
		|
		|        public osf.Color BackColor
		|        {
		|            get { return new Color(M_ListViewSubItem.BackColor); }
		|            set
		|            {
		|                M_ListViewSubItem.BackColor = value.M_Color;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Font Font
		|        {
		|            get { return new Font(M_ListViewSubItem.Font); }
		|            set { M_ListViewSubItem.Font = value.M_Font; }
		|        }
		|
		|        public osf.Color ForeColor
		|        {
		|            get { return new Color(M_ListViewSubItem.ForeColor); }
		|            set { M_ListViewSubItem.ForeColor = value.M_Color; }
		|        }
		|
		|        public object Tag
		|        {
		|            get { return M_ListViewSubItem.Tag; }
		|            set
		|            {
		|                M_ListViewSubItem.Tag = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string Text
		|        {
		|            get { return M_ListViewSubItem.Text; }
		|            set
		|            {
		|                M_ListViewSubItem.Text = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListViewSelectedItemCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListViewSelectedItemCollection : CollectionBase
		|    {
		|        public ClListViewSelectedItemCollection dll_obj;
		|        public System.Windows.Forms.ListView.SelectedListViewItemCollection M_SelectedListViewItemCollection;
		|
		|        public ListViewSelectedItemCollection(System.Windows.Forms.ListView.SelectedListViewItemCollection p1)
		|        {
		|            M_SelectedListViewItemCollection = p1;
		|            base.List = M_SelectedListViewItemCollection;
		|        }
		|
		|        public bool Contains(ListViewItem item)
		|        {
		|            return M_SelectedListViewItemCollection.Contains((System.Windows.Forms.ListViewItem)item.M_ListViewItem);
		|        }
		|
		|        public new osf.ListViewItem this[int index]
		|        {
		|            get { return ((ListViewItemEx)M_SelectedListViewItemCollection[index]).M_Object; }
		|        }
		|
		|        public override object Current
		|        {
		|            get { return (object)((ListViewItemEx)Enumerator.Current).M_Object; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListViewItemCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListViewItemCollection : CollectionBase
		|    {
		|        public ClListViewItemCollection dll_obj;
		|        public System.Windows.Forms.ListView.ListViewItemCollection M_ListViewItemCollection;
		|
		|        public ListViewItemCollection()
		|        {
		|        }
		|
		|        public ListViewItemCollection(System.Windows.Forms.ListView.ListViewItemCollection p1)
		|        {
		|            M_ListViewItemCollection = p1;
		|            base.List = M_ListViewItemCollection;
		|        }
		|
		|        public new osf.ListViewItem Add(object item)
		|        {
		|            if (item is ListViewItem)
		|            {
		|                M_ListViewItemCollection.Add((ListViewItemEx)((ListViewItem)item).M_ListViewItem);
		|                System.Windows.Forms.Application.DoEvents();
		|                return (ListViewItem)item;
		|            }
		|            ListViewItem ListViewItem1 = new ListViewItem("""", -1);
		|            ListViewItem1.Text = Convert.ToString(item);
		|            M_ListViewItemCollection.Add((ListViewItemEx)ListViewItem1.M_ListViewItem);
		|            System.Windows.Forms.Application.DoEvents();
		|            return (ListViewItem)ListViewItem1;
		|        }
		|
		|        public osf.ListViewItem Insert(int index, ListViewItem item)
		|        {
		|            M_ListViewItemCollection.Insert(index, (ListViewItemEx)item.M_ListViewItem);
		|            return item;
		|        }
		|
		|        public new osf.ListViewItem this[int index]
		|        {
		|            get { return ((ListViewItemEx)M_ListViewItemCollection[index]).M_Object; }
		|        }
		|
		|        public void Remove(ListViewItem item)
		|        {
		|            M_ListViewItemCollection.Remove((System.Windows.Forms.ListViewItem)item.M_ListViewItem);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public override object Current
		|        {
		|            get { return ((dynamic)Enumerator.Current).M_ListViewItem; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListViewItem" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListViewItemEx : System.Windows.Forms.ListViewItem
		|    {
		|        public osf.ListViewItem M_Object;
		|    }//endClass
		|
		|    public class ListViewItem
		|    {
		|        public ClListViewItem dll_obj;
		|        public ListViewItemEx M_ListViewItem;
		|
		|        public ListViewItem(string text = """", int imageIndex = -1)
		|        {
		|            M_ListViewItem = new ListViewItemEx();
		|            M_ListViewItem.M_Object = this;
		|            M_ListViewItem.Text = text;
		|            M_ListViewItem.ImageIndex = imageIndex;
		|        }
		|
		|        public ListViewItem(osf.ListViewItem p1)
		|        {
		|            M_ListViewItem = p1.M_ListViewItem;
		|            M_ListViewItem.M_Object = this;
		|        }
		|
		|        public ListViewItem(System.Windows.Forms.ListViewItem p1)
		|        {
		|            M_ListViewItem = (ListViewItemEx)p1;
		|            M_ListViewItem.M_Object = this;
		|        }
		|
		|        public osf.Color BackColor
		|        {
		|            get { return new Color(M_ListViewItem.BackColor); }
		|            set
		|            {
		|                M_ListViewItem.BackColor = value.M_Color;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void BeginEdit()
		|        {
		|            M_ListViewItem.BeginEdit();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public osf.Rectangle Bounds
		|        {
		|            get { return new Rectangle(M_ListViewItem.Bounds); }
		|        }
		|
		|        public bool Checked
		|        {
		|            get { return M_ListViewItem.Checked; }
		|            set
		|            {
		|                M_ListViewItem.Checked = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void EnsureVisible()
		|        {
		|            M_ListViewItem.EnsureVisible();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public bool Focused
		|        {
		|            get { return M_ListViewItem.Focused; }
		|            set
		|            {
		|                M_ListViewItem.Focused = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Font Font
		|        {
		|            get { return new Font(M_ListViewItem.Font); }
		|            set
		|            {
		|                M_ListViewItem.Font = value.M_Font;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Color ForeColor
		|        {
		|            get { return new Color(M_ListViewItem.ForeColor); }
		|            set
		|            {
		|                M_ListViewItem.ForeColor = value.M_Color;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int ImageIndex
		|        {
		|            get { return M_ListViewItem.ImageIndex; }
		|            set
		|            {
		|                M_ListViewItem.ImageIndex = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.ImageList ImageList
		|        {
		|            get { return new ImageList(M_ListViewItem.ImageList); }
		|        }
		|
		|        public int Index
		|        {
		|            get { return M_ListViewItem.Index; }
		|        }
		|
		|        public void Remove()
		|        {
		|            M_ListViewItem.Remove();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public bool Selected
		|        {
		|            get { return M_ListViewItem.Selected; }
		|            set
		|            {
		|                M_ListViewItem.Selected = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.ListViewSubItemCollection SubItems
		|        {
		|            get { return new ListViewSubItemCollection(M_ListViewItem.SubItems); }
		|        }
		|
		|        public object Tag
		|        {
		|            get { return M_ListViewItem.Tag; }
		|            set
		|            {
		|                M_ListViewItem.Tag = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string Text
		|        {
		|            get { return M_ListViewItem.Text; }
		|            set
		|            {
		|                M_ListViewItem.Text = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool UseItemStyleForSubItems
		|        {
		|            get { return M_ListViewItem.UseItemStyleForSubItems; }
		|            set
		|            {
		|                M_ListViewItem.UseItemStyleForSubItems = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListViewColumnHeaderCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListViewColumnHeaderCollection : CollectionBase
		|    {
		|        public ClListViewColumnHeaderCollection dll_obj;
		|        public System.Windows.Forms.ListView.ColumnHeaderCollection M_ColumnHeaderCollection;
		|
		|        public ListViewColumnHeaderCollection()
		|        {
		|        }
		|
		|        public ListViewColumnHeaderCollection(System.Windows.Forms.ListView.ColumnHeaderCollection p1)
		|        {
		|            M_ColumnHeaderCollection = p1;
		|            base.List = M_ColumnHeaderCollection;
		|        }
		|
		|        public new osf.ColumnHeader Add(object column = null)
		|        {
		|            if (column is ColumnHeader)
		|            {
		|                M_ColumnHeaderCollection.Add((ColumnHeaderEx)((ColumnHeader)column).M_ColumnHeader);
		|                System.Windows.Forms.Application.DoEvents();
		|                return (ColumnHeader)column;
		|            }
		|            ColumnHeader ColumnHeader1 = new ColumnHeader();
		|            if (column is string)
		|            {
		|                ColumnHeader1.Text = Convert.ToString(column);
		|            }
		|            M_ColumnHeaderCollection.Add((ColumnHeaderEx)ColumnHeader1.M_ColumnHeader);
		|            System.Windows.Forms.Application.DoEvents();
		|            return ColumnHeader1;
		|        }
		|
		|        public osf.ColumnHeader Insert(int index, ColumnHeader p1)
		|        {
		|            M_ColumnHeaderCollection.Insert(index, p1.M_ColumnHeader);
		|            return p1;
		|        }
		|
		|        public new osf.ColumnHeader this[int index]
		|        {
		|            get { return (ColumnHeader)((ColumnHeaderEx)M_ColumnHeaderCollection[index]).M_Object; }
		|        }
		|
		|        public void Remove(ColumnHeader column)
		|        {
		|            M_ColumnHeaderCollection.Remove((System.Windows.Forms.ColumnHeader)column.M_ColumnHeader);
		|        }
		|
		|        public override object Current
		|        {
		|            get { return (object)(ColumnHeader)((ColumnHeaderEx)Enumerator.Current).M_Object; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListViewCheckedItemCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListViewCheckedItemCollection : CollectionBase
		|    {
		|        public ClListViewCheckedItemCollection dll_obj;
		|        public System.Windows.Forms.ListView.CheckedListViewItemCollection M_ListViewCheckedListViewItemCollection;
		|
		|        public ListViewCheckedItemCollection()
		|        {
		|        }
		|
		|        public ListViewCheckedItemCollection(System.Windows.Forms.ListView.CheckedListViewItemCollection p1)
		|        {
		|            M_ListViewCheckedListViewItemCollection = p1;
		|            base.List = M_ListViewCheckedListViewItemCollection;
		|        }
		|
		|        public new osf.ListViewItem this[int index]
		|        {
		|            get { return ((ListViewItemEx)M_ListViewCheckedListViewItemCollection[index]).M_Object; }
		|        }
		|
		|        public override object Current
		|        {
		|            get
		|            {
		|                return (object)((ListViewItemEx)Enumerator.Current).M_Object;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListView" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListViewEx : System.Windows.Forms.ListView
		|    {
		|        public osf.ListView M_Object;
		|    }//endClass
		|
		|    public class ListView : Control
		|    {
		|        public ClListView dll_obj;
		|        public osf.ColumnHeader SortedColumn;
		|        public int SortOrder;
		|        public bool AllowSorting;
		|        public string AfterLabelEdit;
		|        public string BeforeLabelEdit;
		|        public string SelectedIndexChanged;
		|        public string ColumnClick;
		|        public string ItemCheck;
		|        public string ItemActivate;
		|        public ListViewEx M_ListView;
		|
		|        public ListView()
		|        {
		|            M_ListView = new ListViewEx();
		|            M_ListView.M_Object = this;
		|            base.M_Control = M_ListView;
		|            M_ListView.AfterLabelEdit += M_ListView_AfterLabelEdit;
		|            M_ListView.ColumnClick += M_ListView_ColumnClick;
		|            M_ListView.SelectedIndexChanged += M_ListView_SelectedIndexChanged;
		|            M_ListView.ItemCheck += M_ListView_ItemCheck;
		|            M_ListView.ItemActivate += M_ListView_ItemActivate;
		|            M_ListView.BeforeLabelEdit += M_ListView_BeforeLabelEdit;
		|            SortedColumn = null;
		|            AllowSorting = true;
		|            Sorting = (int)System.Windows.Forms.SortOrder.None;
		|            AfterLabelEdit = """";
		|            BeforeLabelEdit = """";
		|            SelectedIndexChanged = """";
		|            ColumnClick = """";
		|            ItemCheck = """";
		|            ItemActivate = """";
		|        }
		|
		|        public ListView(osf.ListView p1)
		|        {
		|            M_ListView = p1.M_ListView;
		|            M_ListView.M_Object = this;
		|            base.M_Control = M_ListView;
		|            M_ListView.AfterLabelEdit += M_ListView_AfterLabelEdit;
		|            M_ListView.ColumnClick += M_ListView_ColumnClick;
		|            M_ListView.SelectedIndexChanged += M_ListView_SelectedIndexChanged;
		|            M_ListView.ItemCheck += M_ListView_ItemCheck;
		|            M_ListView.ItemActivate += M_ListView_ItemActivate;
		|            M_ListView.BeforeLabelEdit += M_ListView_BeforeLabelEdit;
		|            SortedColumn = null;
		|            AllowSorting = true;
		|            Sorting = (int)System.Windows.Forms.SortOrder.None;
		|            AfterLabelEdit = """";
		|            BeforeLabelEdit = """";
		|            SelectedIndexChanged = """";
		|            ColumnClick = """";
		|            ItemCheck = """";
		|            ItemActivate = """";
		|        }
		|
		|        public ListView(System.Windows.Forms.ListView p1)
		|        {
		|            M_ListView = (ListViewEx)p1;
		|            M_ListView.M_Object = this;
		|            base.M_Control = M_ListView;
		|            M_ListView.AfterLabelEdit += M_ListView_AfterLabelEdit;
		|            M_ListView.ColumnClick += M_ListView_ColumnClick;
		|            M_ListView.SelectedIndexChanged += M_ListView_SelectedIndexChanged;
		|            M_ListView.ItemCheck += M_ListView_ItemCheck;
		|            M_ListView.ItemActivate += M_ListView_ItemActivate;
		|            M_ListView.BeforeLabelEdit += M_ListView_BeforeLabelEdit;
		|            SortedColumn = null;
		|            AllowSorting = true;
		|            Sorting = (int)System.Windows.Forms.SortOrder.None;
		|            AfterLabelEdit = """";
		|            BeforeLabelEdit = """";
		|            SelectedIndexChanged = """";
		|            ColumnClick = """";
		|            ItemCheck = """";
		|            ItemActivate = """";
		|        }
		|
		|        public void M_ListView_BeforeLabelEdit(object sender, System.Windows.Forms.LabelEditEventArgs e)
		|        {
		|            if (BeforeLabelEdit.Length > 0)
		|            {
		|                LabelEditEventArgs LabelEditEventArgs1 = new LabelEditEventArgs();
		|                LabelEditEventArgs1.EventString = BeforeLabelEdit;
		|                LabelEditEventArgs1.Sender = this;
		|                LabelEditEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.BeforeLabelEdit);
		|                LabelEditEventArgs1.CancelEdit = e.CancelEdit;
		|                LabelEditEventArgs1.Item = e.Item;
		|                LabelEditEventArgs1.Label = e.Label;
		|                ClLabelEditEventArgs ClLabelEditEventArgs1 = new ClLabelEditEventArgs(LabelEditEventArgs1);
		|                OneScriptForms.Event = ClLabelEditEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.BeforeLabelEdit);
		|                e.CancelEdit = LabelEditEventArgs1.CancelEdit;
		|            }
		|        }
		|
		|        private void M_ListView_ItemActivate(object sender, System.EventArgs e)
		|        {
		|            if (ItemActivate.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = ItemActivate;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.ItemActivate);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.ItemActivate);
		|            }
		|        }
		|
		|        public void M_ListView_ItemCheck(object sender, System.Windows.Forms.ItemCheckEventArgs e)
		|        {
		|            if (ItemCheck.Length > 0)
		|            {
		|                ItemCheckEventArgs ItemCheckEventArgs1 = new ItemCheckEventArgs();
		|                ItemCheckEventArgs1.EventString = ItemCheck;
		|                ItemCheckEventArgs1.Sender = this;
		|                ItemCheckEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.ItemCheck);
		|                ItemCheckEventArgs1.CurrentValue = (int)e.CurrentValue;
		|                ItemCheckEventArgs1.Index = e.Index;
		|                ItemCheckEventArgs1.NewValue = (int)e.NewValue;
		|                ClItemCheckEventArgs ClItemCheckEventArgs1 = new ClItemCheckEventArgs(ItemCheckEventArgs1);
		|                OneScriptForms.Event = ClItemCheckEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.ItemCheck);
		|            }
		|        }
		|
		|        private void M_ListView_SelectedIndexChanged(object sender, System.EventArgs e)
		|        {
		|            if (SelectedIndexChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = SelectedIndexChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.SelectedIndexChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.SelectedIndexChanged);
		|            }
		|        }
		|
		|        private void M_ListView_ColumnClick(object sender, System.Windows.Forms.ColumnClickEventArgs e)
		|        {
		|            if (ColumnClick.Length > 0)
		|            {
		|                ColumnClickEventArgs ColumnClickEventArgs1 = new ColumnClickEventArgs();
		|                ColumnClickEventArgs1.EventString = ColumnClick;
		|                ColumnClickEventArgs1.Sender = this;
		|                ColumnClickEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.ColumnClick);
		|                ColumnClickEventArgs1.Column = e.Column;
		|                ClColumnClickEventArgs ClColumnClickEventArgs1 = new ClColumnClickEventArgs(ColumnClickEventArgs1);
		|                OneScriptForms.Event = ClColumnClickEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.ColumnClick);
		|            }
		|            if (!AllowSorting)
		|            {
		|                return;
		|            }
		|            if (SortedColumn == null)
		|            {
		|                SortedColumn = Columns[e.Column];
		|            }
		|            else if (SortedColumn.Index != e.Column)
		|            {
		|                SortedColumn = Columns[e.Column];
		|            }
		|            if (Sorting == (int)System.Windows.Forms.SortOrder.None)
		|            {
		|                Sorting = (int)System.Windows.Forms.SortOrder.Ascending;
		|            }
		|            else if (Sorting == (int)System.Windows.Forms.SortOrder.Ascending)
		|            {
		|                Sorting = (int)System.Windows.Forms.SortOrder.Descending;
		|            }
		|            else
		|            {
		|                Sorting = (int)System.Windows.Forms.SortOrder.Ascending;
		|            }
		|            M_ListView.ListViewItemSorter = new ListViewItemSorter(Sorting, this);
		|            M_ListView.ListViewItemSorter = null;
		|        }
		|
		|        public void M_ListView_AfterLabelEdit(object sender, System.Windows.Forms.LabelEditEventArgs e)
		|        {
		|            if (AfterLabelEdit.Length > 0)
		|            {
		|                LabelEditEventArgs LabelEditEventArgs1 = new LabelEditEventArgs();
		|                LabelEditEventArgs1.EventString = AfterLabelEdit;
		|                LabelEditEventArgs1.Sender = this;
		|                LabelEditEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.AfterLabelEdit);
		|                LabelEditEventArgs1.CancelEdit = e.CancelEdit;
		|                LabelEditEventArgs1.Label = e.Label;
		|                LabelEditEventArgs1.Item = e.Item;
		|                ClLabelEditEventArgs ClLabelEditEventArgs1 = new ClLabelEditEventArgs(LabelEditEventArgs1);
		|                OneScriptForms.Event = ClLabelEditEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.AfterLabelEdit);
		|                e.CancelEdit = LabelEditEventArgs1.CancelEdit;
		|            }
		|        }
		|
		|        public int Activation
		|        {
		|            get { return (int)M_ListView.Activation; }
		|            set { M_ListView.Activation = (System.Windows.Forms.ItemActivation)value; }
		|        }
		|
		|        public int Alignment
		|        {
		|            get { return (int)M_ListView.Alignment; }
		|            set { M_ListView.Alignment = (System.Windows.Forms.ListViewAlignment)value; }
		|        }
		|
		|        public bool AllowColumnReorder
		|        {
		|            get { return M_ListView.AllowColumnReorder; }
		|            set { M_ListView.AllowColumnReorder = value; }
		|        }
		|
		|        public bool AutoArrange
		|        {
		|            get { return M_ListView.AutoArrange; }
		|            set { M_ListView.AutoArrange = value; }
		|        }
		|
		|        public override void BeginUpdate()
		|        {
		|            M_ListView.BeginUpdate();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public int BorderStyle
		|        {
		|            get { return (int)M_ListView.BorderStyle; }
		|            set { M_ListView.BorderStyle = (System.Windows.Forms.BorderStyle)value; }
		|        }
		|
		|        public bool CheckBoxes
		|        {
		|            get { return M_ListView.CheckBoxes; }
		|            set { M_ListView.CheckBoxes = value; }
		|        }
		|
		|        public osf.ListViewCheckedItemCollection CheckedItems
		|        {
		|            get { return new ListViewCheckedItemCollection(M_ListView.CheckedItems); }
		|        }
		|
		|        public osf.ListViewColumnHeaderCollection Columns
		|        {
		|            get { return new ListViewColumnHeaderCollection(M_ListView.Columns); }
		|        }
		|
		|        public override void EndUpdate()
		|        {
		|            M_ListView.EndUpdate();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void EnsureVisible(int index)
		|        {
		|            M_ListView.EnsureVisible(index);
		|        }
		|
		|        public osf.ListViewItem FocusedItem
		|        {
		|            get
		|            {
		|                if (M_ListView.FocusedItem != null)
		|                {
		|                    return ((ListViewItemEx)M_ListView.FocusedItem).M_Object;
		|                }
		|                return null;
		|            }
		|        }
		|
		|        public bool FullRowSelect
		|        {
		|            get { return M_ListView.FullRowSelect; }
		|            set { M_ListView.FullRowSelect = value; }
		|        }
		|
		|        public osf.ListViewItem GetItemAt(int x, int y)
		|        {
		|            System.Windows.Forms.ListViewItem item = M_ListView.GetItemAt(x, y);
		|            if (item != null)
		|            {
		|                return ((ListViewItemEx)item).M_Object;
		|            }
		|            return null;
		|        }
		|
		|        public bool GridLines
		|        {
		|            get { return M_ListView.GridLines; }
		|            set { M_ListView.GridLines = value; }
		|        }
		|
		|        public int HeaderStyle
		|        {
		|            get { return (int)M_ListView.HeaderStyle; }
		|            set { M_ListView.HeaderStyle = (System.Windows.Forms.ColumnHeaderStyle)value; }
		|        }
		|
		|        public bool HideSelection
		|        {
		|            get { return M_ListView.HideSelection; }
		|            set { M_ListView.HideSelection = value; }
		|        }
		|
		|        public bool HoverSelection
		|        {
		|            get { return M_ListView.HoverSelection; }
		|            set { M_ListView.HoverSelection = value; }
		|        }
		|
		|        public osf.ListViewItemCollection Items
		|        {
		|            get { return new ListViewItemCollection(M_ListView.Items); }
		|        }
		|
		|        public bool LabelEdit
		|        {
		|            get { return M_ListView.LabelEdit; }
		|            set { M_ListView.LabelEdit = value; }
		|        }
		|
		|        public bool LabelWrap
		|        {
		|            get { return M_ListView.LabelWrap; }
		|            set { M_ListView.LabelWrap = value; }
		|        }
		|
		|        public osf.ImageList LargeImageList
		|        {
		|            get { return new ImageList(M_ListView.LargeImageList); }
		|            set { M_ListView.LargeImageList = value.M_ImageList; }
		|        }
		|
		|        public bool MultiSelect
		|        {
		|            get { return M_ListView.MultiSelect; }
		|            set { M_ListView.MultiSelect = value; }
		|        }
		|
		|        public bool Scrollable
		|        {
		|            get { return M_ListView.Scrollable; }
		|            set { M_ListView.Scrollable = value; }
		|        }
		|
		|        public osf.ListViewSelectedItemCollection SelectedItems
		|        {
		|            get { return new ListViewSelectedItemCollection(M_ListView.SelectedItems); }
		|        }
		|
		|        public object SelectedIndices
		|        {
		|            get { return (object)""""; }
		|        }
		|
		|        public osf.ImageList SmallImageList
		|        {
		|            get
		|            {
		|                ImageList ImageList1 = new ImageList(M_ListView.SmallImageList);
		|                System.Windows.Forms.Application.DoEvents();
		|                return ImageList1;
		|            }
		|            set
		|            {
		|                M_ListView.SmallImageList = value.M_ImageList;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void Sort(ColumnHeader column, int order)
		|        {
		|            SortedColumn = column;
		|            SortOrder = order;
		|            M_ListView.ListViewItemSorter = new ListViewItemSorter(SortOrder, this);
		|            M_ListView.ListViewItemSorter = (IComparer)null;
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public int Sorting
		|        {
		|            get { return (int)M_ListView.Sorting; }
		|            set { M_ListView.Sorting = (System.Windows.Forms.SortOrder)value; }
		|        }
		|
		|        public int View
		|        {
		|            get { return (int)M_ListView.View; }
		|            set { M_ListView.View = (System.Windows.Forms.View)value; }
		|        }
		|    }//endClass
		|
		|    public class ListViewItemSorter : IComparer
		|    {
		|        private int col;
		|        private int sortOrder;
		|        public osf.ListView owner;
		|
		|        public ListViewItemSorter(int Sorting, osf.ListView p1)
		|        {
		|            sortOrder = Sorting;
		|            owner = p1;
		|            col = owner.SortedColumn.Index;
		|        }
		|
		|        public int Compare(object x, object y)
		|        {
		|            ListViewItemEx Item1 = (ListViewItemEx)x;
		|            ListViewItemEx Item2 = (ListViewItemEx)y;
		|            int sortType = owner.Columns[col].SortType;
		|            int num = 0;
		|            if (sortType == 3)//Boolean
		|            {
		|                object Boolean1 = null;
		|                object Boolean2 = null;
		|                try
		|                {
		|                    Boolean1 = (System.Boolean)Boolean.Parse(Convert.ToString(Item1.SubItems[col].Text));
		|                }
		|                catch { }
		|                try
		|                {
		|                    Boolean2 = (System.Boolean)Boolean.Parse(Convert.ToString(Item2.SubItems[col].Text));
		|                }
		|                catch { }
		|                if (Boolean1 == null && Boolean2 == null)
		|                {
		|                    num = 0;
		|                }
		|                else if (Boolean1 != null && Boolean2 == null)
		|                {
		|                    num = 1;
		|                }
		|                else if (Boolean1 == null && Boolean2 != null)
		|                {
		|                    num = -1;
		|                }
		|                else
		|                {
		|                    num = ((System.Boolean)Boolean1).CompareTo((System.Boolean)Boolean2);
		|                }
		|            }
		|            if (sortType == 2)//DateTime
		|            {
		|                object DateTime1 = null;
		|                object DateTime2 = null;
		|                try
		|                {
		|                    DateTime1 = (System.DateTime)DateTime.Parse(Convert.ToString(Item1.SubItems[col].Text));
		|                }
		|                catch { }
		|                try
		|                {
		|                    DateTime2 = (System.DateTime)DateTime.Parse(Convert.ToString(Item2.SubItems[col].Text));
		|                }
		|                catch { }
		|                if (DateTime1 == null && DateTime2 == null)
		|                {
		|                    num = 0;
		|                }
		|                else if (DateTime1 != null && DateTime2 == null)
		|                {
		|                    num = 1;
		|                }
		|                else if(DateTime1 == null && DateTime2 != null)
		|                {
		|                    num = -1;
		|                }
		|                else
		|                {
		|                    num = System.DateTime.Compare((System.DateTime)DateTime1, (System.DateTime)DateTime2);
		|                }
		|            }
		|            else if (sortType == 1)//Number
		|            {
		|                object Number1 = null;
		|                object Number2 = null;
		|                try
		|                {
		|                    Number1 = (System.Decimal)decimal.Parse(Convert.ToString(Item1.SubItems[col].Text));
		|                }
		|                catch { }
		|                try
		|                {
		|                    Number2 = (System.Decimal)decimal.Parse(Convert.ToString(Item2.SubItems[col].Text));
		|                }
		|                catch { }
		|                if (Number1 == null && Number2 == null)
		|                {
		|                    num = 0;
		|                }
		|                else if (Number1 != null && Number2 == null)
		|                {
		|                    num = 1;
		|                }
		|                else if (Number1 == null && Number2 != null)
		|                {
		|                    num = -1;
		|                }
		|                else
		|                {
		|                    num = System.Decimal.Compare((System.Decimal)Number1, (System.Decimal)Number2);
		|                }
		|            }
		|            else //(sortType == 0)// text
		|            {
		|                string str1 = null;
		|                string str2 = null;
		|                try
		|                {
		|                    str1 = Convert.ToString(Item1.SubItems[col].Text);
		|                }
		|                catch { return num; }
		|                try
		|                {
		|                    str2 = Convert.ToString(Item2.SubItems[col].Text);
		|                }
		|                catch { return num; }
		|                if (str1 == null && str2 == null)
		|                {
		|                    num = 0;
		|                }
		|                else if (str1 != null && str2 == null)
		|                {
		|                    num = 1;
		|                }
		|                else if (str1 == null && str2 != null)
		|                {
		|                    num = -1;
		|                }
		|                else
		|                {
		|                    num = String.Compare(str1, str2, true);
		|                }
		|            }
		|            if (sortOrder == (int)System.Windows.Forms.SortOrder.Ascending)
		|            {
		|                return num;
		|            }
		|            if (sortOrder == (int)System.Windows.Forms.SortOrder.Descending)
		|            {
		|                return checked(-num);
		|            }
		|            return num;
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataRowView" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataRowView
		|    {
		|        public ClDataRowView dll_obj;
		|        public System.Data.DataRowView M_DataRowView;
		|
		|        public DataRowView()
		|        {
		|        }
		|
		|        public DataRowView(osf.DataRowView p1)
		|        {
		|            M_DataRowView = p1.M_DataRowView;
		|            OneScriptForms.AddToHashtable(M_DataRowView, this);
		|        }
		|
		|        public DataRowView(System.Data.DataRowView p1)
		|        {
		|            M_DataRowView = p1;
		|            OneScriptForms.AddToHashtable(M_DataRowView, this);
		|        }
		|
		|        public void Delete()
		|        {
		|            M_DataRowView.Delete();
		|        }
		|
		|        public void EndEdit()
		|        {
		|            M_DataRowView.EndEdit();
		|        }
		|
		|        public object get_Item(object p1)
		|        {
		|            if (p1 is string)
		|            {
		|                return M_DataRowView[(string)p1];
		|            }
		|            return M_DataRowView[(int)p1];
		|        }
		|
		|        public osf.DataRow Row
		|        {
		|            get { return new DataRow(M_DataRowView.Row); }
		|        }
		|
		|        public void SetItem(object index, object item)
		|        {
		|            if (index is string)
		|            {
		|                M_DataRowView[(string)index] = item;
		|            }
		|            else
		|            {
		|                M_DataRowView[(int)index] = item;
		|            }
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListBoxSelectedIndexCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListBoxSelectedIndexCollection : CollectionBase
		|    {
		|        public ClListBoxSelectedIndexCollection dll_obj;
		|        public System.Windows.Forms.ListBox.SelectedIndexCollection M_ListBoxSelectedIndexCollection;
		|
		|        public ListBoxSelectedIndexCollection()
		|        {
		|        }
		|
		|        public ListBoxSelectedIndexCollection(System.Windows.Forms.ListBox.SelectedIndexCollection p1)
		|        {
		|            M_ListBoxSelectedIndexCollection = p1;
		|            base.List = M_ListBoxSelectedIndexCollection;
		|        }
		|
		|        public override void Clear()
		|        {
		|        }
		|
		|        public override bool Contains(object value)
		|        {
		|            return M_ListBoxSelectedIndexCollection.Contains(Convert.ToInt32(value));
		|        }
		|
		|        public override int IndexOf(object value)
		|        {
		|            return M_ListBoxSelectedIndexCollection.IndexOf(Convert.ToInt32(value));
		|        }
		|
		|        public new int this[int index]
		|        {
		|            get { return M_ListBoxSelectedIndexCollection[index]; }
		|        }
		|
		|        public new void Insert(int index, object item)
		|        {
		|        }
		|
		|        public override object Current
		|        {
		|            get { return Enumerator.Current; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListBoxSelectedObjectCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListBoxSelectedObjectCollection : CollectionBase
		|    {
		|        public ClListBoxSelectedObjectCollection dll_obj;
		|        public System.Windows.Forms.ListBox.SelectedObjectCollection M_ListBoxSelectedObjectCollection;
		|
		|        public ListBoxSelectedObjectCollection(System.Windows.Forms.ListBox.SelectedObjectCollection p1)
		|        {
		|            M_ListBoxSelectedObjectCollection = p1;
		|            base.List = M_ListBoxSelectedObjectCollection;
		|        }
		|
		|        public override void Clear()
		|        {
		|        }
		|
		|        public override bool Contains(object value)
		|        {
		|            return M_ListBoxSelectedObjectCollection.Contains(value);
		|        }
		|
		|        public override int IndexOf(object value)
		|        {
		|            return M_ListBoxSelectedObjectCollection.IndexOf(value);
		|        }
		|
		|        public new object this[int index]
		|        {
		|            get { return M_ListBoxSelectedObjectCollection[index]; }
		|            set { M_ListBoxSelectedObjectCollection[index] = value; }
		|        }
		|
		|        public new void Insert(int index, object item)
		|        {
		|        }
		|
		|        public override object Current
		|        {
		|            get { return Enumerator.Current; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListBoxObjectCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListBoxObjectCollection : CollectionBase
		|    {
		|        public ClListBoxObjectCollection dll_obj;
		|        public System.Windows.Forms.ListBox.ObjectCollection M_ListBoxObjectCollection;
		|
		|        public ListBoxObjectCollection()
		|        {
		|        }
		|
		|        public ListBoxObjectCollection(System.Windows.Forms.ListBox.ObjectCollection p1)
		|        {
		|            M_ListBoxObjectCollection = p1;
		|            base.List = M_ListBoxObjectCollection;
		|        }
		|
		|        public new object Add(object item)
		|        {
		|            M_ListBoxObjectCollection.Add(item);
		|            System.Windows.Forms.Application.DoEvents();
		|            return item;
		|        }
		|
		|        public new object Insert(int index, object item)
		|        {
		|            M_ListBoxObjectCollection.Insert(index, item);
		|            System.Windows.Forms.Application.DoEvents();
		|            return item;
		|        }
		|
		|        public new object this[int index]
		|        {
		|            get { return M_ListBoxObjectCollection[index]; }
		|        }
		|
		|        public new void Remove(object item)
		|        {
		|            M_ListBoxObjectCollection.Remove(item);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public override object Current
		|        {
		|            get { return Enumerator.Current; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListItem" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListItem
		|    {
		|        public ClListItem dll_obj;
		|
		|        private object M_Value;
		|        private string M_Text;
		|        private System.Drawing.Color M_ForeColor;
		|
		|        public ListItem(string text = null, object value = null)
		|        {
		|            M_ForeColor = new System.Drawing.Color();
		|            M_Text = text;
		|            M_Value = value;
		|            OneScriptForms.AddToHashtable(this, this);
		|        }
		|		
		|        public ListItem(osf.ListItem p1)
		|        {
		|            M_ForeColor = p1.M_ForeColor;
		|            M_Text = p1.M_Text;
		|            M_Value = p1.M_Value;
		|            OneScriptForms.AddToHashtable(this, this);
		|        }
		|
		|        public osf.Color ForeColor
		|        {
		|            get { return new Color(M_ForeColor); }
		|            set
		|            {
		|                M_ForeColor = value.M_Color;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public object Value
		|        {
		|            get
		|            {
		|                if (M_Value != null)
		|                {
		|                    return M_Value;
		|                }
		|                if (M_Text != null)
		|                {
		|                    return M_Text;
		|                }
		|                return """";
		|            }
		|            set
		|            {
		|                M_Value = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string Text
		|        {
		|            get
		|            {
		|                if (M_Text != null)
		|                {
		|                    return M_Text;
		|                }
		|                if (M_Value != null)
		|                {
		|                    return Convert.ToString(M_Value);
		|                }
		|                return """";
		|            }
		|            set
		|            {
		|                M_Text = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public override string ToString()
		|        {
		|            return Text;
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListBox" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListBoxEx : System.Windows.Forms.ListBox
		|    {
		|        public osf.ListBox M_Object;
		|    }//endClass
		|
		|    public class ListBox : ListControl
		|    {
		|        public ClListBox dll_obj;
		|        public string M_SelectedIndexChanged;
		|        public ListBoxEx M_ListBox;
		|        public osf.Color M_SelectedBackColor;
		|        public osf.Color M_SelectedForeColor;
		|
		|        public ListBox()
		|        {
		|            M_ListBox = new ListBoxEx();
		|            M_ListBox.M_Object = this;
		|            base.M_ListControl = M_ListBox;
		|            M_ListBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
		|            M_ListBox.SelectedIndexChanged += M_ListBox_SelectedIndexChanged;
		|            M_ListBox.DrawItem += M_ListBox_DrawItem;
		|            M_ListBox.MeasureItem += M_ListBox_MeasureItem;
		|            M_ListBox.FontChanged += M_ListBox_FontChanged;
		|            M_ListBox.ItemHeight = FontHeight;
		|            M_SelectedForeColor = new Color(SystemColors.HighlightText);
		|            M_SelectedBackColor = new Color(SystemColors.Highlight);
		|            M_SelectedIndexChanged = """";
		|        }
		|
		|        public ListBox(osf.ListBox p1)
		|        {
		|            M_ListBox = p1.M_ListBox;
		|            M_ListBox.M_Object = this;
		|            base.M_ListControl = M_ListBox;
		|            M_ListBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
		|            M_ListBox.SelectedIndexChanged += M_ListBox_SelectedIndexChanged;
		|            M_ListBox.DrawItem += M_ListBox_DrawItem;
		|            M_ListBox.MeasureItem += M_ListBox_MeasureItem;
		|            M_ListBox.FontChanged += M_ListBox_FontChanged;
		|            M_ListBox.ItemHeight = FontHeight;
		|            M_SelectedForeColor = new Color(SystemColors.HighlightText);
		|            M_SelectedBackColor = new Color(SystemColors.Highlight);
		|            M_SelectedIndexChanged = """";
		|        }
		|
		|        public ListBox(System.Windows.Forms.ListBox p1)
		|        {
		|            M_ListBox = (ListBoxEx)p1;
		|            M_ListBox.M_Object = this;
		|            base.M_ListControl = M_ListBox;
		|            M_ListBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
		|            M_ListBox.SelectedIndexChanged += M_ListBox_SelectedIndexChanged;
		|            M_ListBox.DrawItem += M_ListBox_DrawItem;
		|            M_ListBox.MeasureItem += M_ListBox_MeasureItem;
		|            M_ListBox.FontChanged += M_ListBox_FontChanged;
		|            M_ListBox.ItemHeight = FontHeight;
		|            M_SelectedForeColor = new Color(SystemColors.HighlightText);
		|            M_SelectedBackColor = new Color(SystemColors.Highlight);
		|            M_SelectedIndexChanged = """";
		|        }
		|		
		|        private void M_ListBox_SelectedIndexChanged(object sender, System.EventArgs e)
		|        {
		|            if (M_SelectedIndexChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = M_SelectedIndexChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.SelectedIndexChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.SelectedIndexChanged);
		|            }
		|        }
		|
		|        public void M_ListBox_FontChanged(object sender, System.EventArgs e)
		|        {
		|            M_ListBox.ItemHeight = ((osf.Control)M_ListBox.M_Object).FontHeight;
		|        }
		|
		|        public void M_ListBox_MeasureItem(object sender, MeasureItemEventArgs e)
		|        {
		|            e.ItemHeight = ((osf.Control)M_ListBox.M_Object).FontHeight;
		|        }
		|
		|        public void M_ListBox_DrawItem(object sender, DrawItemEventArgs e)
		|        {
		|            if (e.Index == -1)
		|            {
		|                return;
		|            }
		|            e.DrawBackground();
		|            e.DrawFocusRectangle();
		|            dynamic item = M_ListBox.Items[e.Index];
		|            System.Type type = item.GetType();
		|            System.Drawing.Color color1 = M_ListBox.ForeColor;
		|            PropertyInfo propertyForeColor = type.GetProperty(""ForeColor"");
		|            Color colorForeColor = null;
		|            if (propertyForeColor != null)
		|            {
		|                try
		|                {
		|                    colorForeColor = (Color)propertyForeColor.GetValue(Items[e.Index], (object[])null);
		|                }
		|                catch
		|                {
		|                    colorForeColor = ((ClColor)propertyForeColor.GetValue(Items[e.Index], (object[])null)).Base_obj;
		|                }
		|            }
		|
		|            if ((e.State & System.Windows.Forms.DrawItemState.Disabled) == System.Windows.Forms.DrawItemState.Disabled)
		|            {
		|                try
		|                {
		|                    if (!colorForeColor.IsEmpty)
		|                    {
		|                        color1 = colorForeColor.M_Color;
		|                    }
		|                }
		|                catch
		|                {
		|                    color1 = System.Drawing.SystemColors.GrayText;
		|                }
		|            }
		|            else if ((e.State & System.Windows.Forms.DrawItemState.Selected) == System.Windows.Forms.DrawItemState.Selected)
		|            {
		|                color1 = System.Drawing.SystemColors.HighlightText;
		|            }
		|            else
		|            {
		|                try
		|                {
		|                    if (!colorForeColor.IsEmpty)
		|                    {
		|                        color1 = colorForeColor.M_Color;
		|                    }
		|                }
		|                catch
		|                {
		|                }
		|            }
		|            string s = item.ToString();
		|            System.Data.DataRowView drv;
		|            try
		|            {
		|                drv = (System.Data.DataRowView)item;
		|            }
		|            catch
		|            {
		|                drv = null;
		|            }
		|            if (drv != null)
		|            {
		|                s = drv[M_ListBox.DisplayMember].ToString();
		|            }
		|            else
		|            {
		|                PropertyInfo property1 = type.GetProperty(M_ListBox.DisplayMember);
		|                if (property1 != null)
		|                {
		|                    s = Convert.ToString(property1.GetValue(Items[e.Index], (object[])null));
		|                }
		|            }
		|            e.Graphics.DrawString(s, M_ListBox.Font, (System.Drawing.Brush)new System.Drawing.SolidBrush(color1), (float)e.Bounds.X, (float)e.Bounds.Y);
		|        }
		|
		|        public int BorderStyle
		|        {
		|            get { return (int)M_ListBox.BorderStyle; }
		|            set { M_ListBox.BorderStyle = (System.Windows.Forms.BorderStyle)value; }
		|        }
		|
		|        public int ColumnWidth
		|        {
		|            get { return M_ListBox.ColumnWidth; }
		|            set { M_ListBox.ColumnWidth = value; }
		|        }
		|
		|        public bool GetSelected(int index)
		|        {
		|            return M_ListBox.GetSelected(index);
		|        }
		|
		|        public int HorizontalExtent
		|        {
		|            get { return M_ListBox.HorizontalExtent; }
		|            set { M_ListBox.HorizontalExtent = value; }
		|        }
		|
		|        public bool HorizontalScrollbar
		|        {
		|            get { return M_ListBox.HorizontalScrollbar; }
		|            set
		|            {
		|                System.Drawing.Graphics g = M_ListBox.CreateGraphics();
		|                int hzSize = (int)g.MeasureString(M_ListBox.Items[M_ListBox.Items.Count - 1].ToString(), M_ListBox.Font).Width;
		|                M_ListBox.HorizontalExtent = hzSize + 10;
		|                M_ListBox.HorizontalScrollbar = value;
		|            }
		|        }
		|
		|        public bool IntegralHeight
		|        {
		|            get { return M_ListBox.IntegralHeight; }
		|            set { M_ListBox.IntegralHeight = value; }
		|        }
		|
		|        public int ItemHeight
		|        {
		|            get { return M_ListBox.ItemHeight; }
		|            set { M_ListBox.ItemHeight = value; }
		|        }
		|
		|        public osf.ListBoxObjectCollection Items
		|        {
		|            get { return new ListBoxObjectCollection(M_ListBox.Items); }
		|        }
		|
		|        public bool MultiColumn
		|        {
		|            get { return M_ListBox.MultiColumn; }
		|            set { M_ListBox.MultiColumn = value; }
		|        }
		|
		|        public bool ScrollAlwaysVisible
		|        {
		|            get { return M_ListBox.ScrollAlwaysVisible; }
		|            set { M_ListBox.ScrollAlwaysVisible = value; }
		|        }
		|
		|        public int SelectedIndex
		|        {
		|            get { return M_ListBox.SelectedIndex; }
		|            set { M_ListBox.SelectedIndex = value; }
		|        }
		|
		|        public string SelectedIndexChanged
		|        {
		|            get { return M_SelectedIndexChanged; }
		|            set { M_SelectedIndexChanged = value; }
		|        }
		|
		|        public osf.ListBoxSelectedIndexCollection SelectedIndices
		|        {
		|            get { return new ListBoxSelectedIndexCollection(M_ListBox.SelectedIndices); }
		|        }
		|
		|        public object SelectedItem
		|        {
		|            get { return M_ListBox.SelectedItem; }
		|            set
		|            {
		|                M_ListBox.SelectedItem = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.ListBoxSelectedObjectCollection SelectedItems
		|        {
		|            get { return new ListBoxSelectedObjectCollection(M_ListBox.SelectedItems); }
		|        }
		|
		|        public int SelectionMode
		|        {
		|            get { return (int)M_ListBox.SelectionMode; }
		|            set { M_ListBox.SelectionMode = (System.Windows.Forms.SelectionMode)value; }
		|        }
		|
		|        public void SetSelected(int index, bool value)
		|        {
		|            M_ListBox.SetSelected(index, value);
		|        }
		|
		|        public bool Sorted
		|        {
		|            get { return M_ListBox.Sorted; }
		|            set { M_ListBox.Sorted = value; }
		|        }
		|
		|        public int TopIndex
		|        {
		|            get { return M_ListBox.TopIndex; }
		|            set { M_ListBox.TopIndex = value; }
		|        }
		|
		|        public bool UseTabStops
		|        {
		|            get { return M_ListBox.UseTabStops; }
		|            set { M_ListBox.UseTabStops = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ListControl" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ListControl : Control
		|    {
		|        private System.Windows.Forms.ListControl m_ListControl;
		|
		|        public System.Windows.Forms.ListControl M_ListControl
		|        {
		|            get { return m_ListControl; }
		|            set
		|            {
		|                m_ListControl = value;
		|                base.M_Control = m_ListControl;
		|            }
		|        }
		|
		|        public ListControl()
		|        {
		|        }
		|
		|        public object DataSource
		|        {
		|            get
		|            {
		|                object obj;
		|                try
		|                {
		|                    obj = ((dynamic)M_ListControl.DataSource).M_Object;
		|                }
		|                catch
		|                {
		|                    obj = M_ListControl.DataSource;
		|                }
		|                return obj;
		|            }
		|            set
		|            {
		|                M_ListControl.DataSource = null;
		|                try
		|                {
		|                    System.Type Type1 = value.GetType();
		|                    string strType1 = Type1.ToString();
		|                    string str1 = strType1.Substring(strType1.LastIndexOf(""."") + 1);
		|                    M_ListControl.DataSource = Type1.GetField(""M_"" + str1).GetValue(value);
		|                }
		|                catch
		|                {
		|                    M_ListControl.DataSource = value;
		|                }
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string DisplayMember
		|        {
		|            get { return M_ListControl.DisplayMember; }
		|            set
		|            {
		|                M_ListControl.DisplayMember = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public object SelectedValue
		|        {
		|            get { return M_ListControl.SelectedValue; }
		|            set
		|            {
		|                M_ListControl.SelectedValue = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string ValueMember
		|        {
		|            get { return M_ListControl.ValueMember; }
		|            set
		|            {
		|                M_ListControl.ValueMember = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ImageList" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ImageList
		|    {
		|        public ClImageList dll_obj;
		|        public System.Windows.Forms.ImageList M_ImageList;
		|
		|        public ImageList()
		|        {
		|            M_ImageList = new System.Windows.Forms.ImageList();
		|            OneScriptForms.AddToHashtable(M_ImageList, this);
		|        }
		|		
		|        public ImageList(osf.ImageList p1)
		|        {
		|            M_ImageList = p1.M_ImageList;
		|            OneScriptForms.AddToHashtable(M_ImageList, this);
		|        }
		|
		|        public ImageList(System.Windows.Forms.ImageList p1)
		|        {
		|            M_ImageList = p1;
		|            OneScriptForms.AddToHashtable(M_ImageList, this);
		|        }
		|
		|        public int ColorDepth
		|        {
		|            get { return (int)M_ImageList.ColorDepth; }
		|            set { M_ImageList.ColorDepth = (System.Windows.Forms.ColorDepth)value; }
		|        }
		|
		|        public osf.ImageCollection Images
		|        {
		|            get { return new ImageCollection(M_ImageList.Images); }
		|        }
		|
		|        public osf.Size ImageSize
		|        {
		|            get { return new Size(M_ImageList.ImageSize); }
		|            set { M_ImageList.ImageSize = value.M_Size; }
		|        }
		|
		|        public osf.Color TransparentColor
		|        {
		|            get { return new Color(M_ImageList.TransparentColor); }
		|            set { M_ImageList.TransparentColor = value.M_Color; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "StreamReader" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class StreamReader
		|    {
		|        public ClStreamReader dll_obj;
		|        public System.IO.StreamReader M_StreamReader;
		|
		|        public StreamReader(string p1)
		|        {
		|            M_StreamReader = new System.IO.StreamReader(p1);
		|        }
		|
		|        public StreamReader(osf.StreamReader p1)
		|        {
		|            M_StreamReader = p1.M_StreamReader;
		|        }
		|		
		|        public StreamReader(System.IO.StreamReader p1)
		|        {
		|            M_StreamReader = p1;
		|        }
		|
		|        public void Close()
		|        {
		|            M_StreamReader.Close();
		|        }
		|
		|        public int Peek()
		|        {
		|            return M_StreamReader.Peek();
		|        }
		|
		|        public string ReadLine()
		|        {
		|            return M_StreamReader.ReadLine();
		|        }
		|
		|        public string ReadToEnd()
		|        {
		|            return M_StreamReader.ReadToEnd();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ImageCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ImageCollection : CollectionBase
		|    {
		|        public ClImageCollection dll_obj;
		|        public System.Windows.Forms.ImageList.ImageCollection M_ImageCollection;
		|
		|        public ImageCollection()
		|        {
		|        }
		|
		|        public ImageCollection(System.Windows.Forms.ImageList.ImageCollection p1)
		|        {
		|            M_ImageCollection = p1;
		|            base.List = M_ImageCollection;
		|        }
		|
		|        public int Add(Image image, Color color = null)
		|        {
		|            if (color == null)
		|            {
		|                return M_ImageCollection.Add(image.M_Image, System.Drawing.Color.Empty);
		|            }
		|            return M_ImageCollection.Add(image.M_Image, color.M_Color);
		|        }
		|
		|        public int AddStrip(Image image)
		|        {
		|            return M_ImageCollection.AddStrip(image.M_Image);
		|        }
		|
		|        public new osf.Image this[int p1]
		|        {
		|            get { return (Image)new Bitmap((System.Drawing.Bitmap)M_ImageCollection[p1]); }
		|        }
		|
		|        public override object Current
		|        {
		|            get { return new Image((System.Drawing.Image)Enumerator.Current); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TabControl" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TabControlEx : System.Windows.Forms.TabControl
		|    {
		|        public osf.TabControl M_Object;
		|    }//endClass
		|
		|    public class TabControl : Control
		|    {
		|        public ClTabControl dll_obj;
		|        public string M_SelectedIndexChanged;
		|        public TabControlEx M_TabControl;
		|
		|        public TabControl()
		|        {
		|            M_TabControl = new TabControlEx();
		|            M_TabControl.M_Object = this;
		|            base.M_Control = M_TabControl;
		|            M_TabControl.SelectedIndexChanged += M_TabControl_SelectedIndexChanged;
		|            M_SelectedIndexChanged = """";
		|        }
		|
		|        public TabControl(osf.TabControl p1)
		|        {
		|            M_TabControl = p1.M_TabControl;
		|            M_TabControl.M_Object = this;
		|            base.M_Control = M_TabControl;
		|            M_TabControl.SelectedIndexChanged += M_TabControl_SelectedIndexChanged;
		|            M_SelectedIndexChanged = """";
		|        }
		|
		|        public TabControl(System.Windows.Forms.TabControl p1)
		|        {
		|            M_TabControl = (TabControlEx)p1;
		|            M_TabControl.M_Object = this;
		|            base.M_Control = M_TabControl;
		|            M_TabControl.SelectedIndexChanged += M_TabControl_SelectedIndexChanged;
		|            M_SelectedIndexChanged = """";
		|        }
		|
		|        private void M_TabControl_SelectedIndexChanged(object sender, System.EventArgs e)
		|        {
		|            if (M_SelectedIndexChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = M_SelectedIndexChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.SelectedIndexChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.SelectedIndexChanged);
		|            }
		|        }
		|
		|        public int Alignment
		|        {
		|            get { return (int)M_TabControl.Alignment; }
		|            set { M_TabControl.Alignment = (System.Windows.Forms.TabAlignment)value; }
		|        }
		|
		|        public int Appearance
		|        {
		|            get { return (int)M_TabControl.Appearance; }
		|            set { M_TabControl.Appearance = (System.Windows.Forms.TabAppearance)value; }
		|        }
		|
		|        public osf.ImageList ImageList
		|        {
		|            get { return new ImageList(M_TabControl.ImageList); }
		|            set { M_TabControl.ImageList = value.M_ImageList; }
		|        }
		|
		|        public osf.Size ItemSize
		|        {
		|            get { return new Size(M_TabControl.ItemSize); }
		|            set { M_TabControl.ItemSize = value.M_Size; }
		|        }
		|
		|        public bool Multiline
		|        {
		|            get { return M_TabControl.Multiline; }
		|            set { M_TabControl.Multiline = value; }
		|        }
		|
		|        public int SelectedIndex
		|        {
		|            get { return M_TabControl.SelectedIndex; }
		|            set { M_TabControl.SelectedIndex = value; }
		|        }
		|
		|        public string SelectedIndexChanged
		|        {
		|            get { return M_SelectedIndexChanged; }
		|            set { M_SelectedIndexChanged = value; }
		|        }
		|
		|        public osf.TabPage SelectedTab
		|        {
		|            get
		|            {
		|                if (M_TabControl.SelectedTab == null)
		|                {
		|                    return null;
		|                }
		|                return (osf.TabPage)((TabPageEx)M_TabControl.SelectedTab).M_Object;
		|            }
		|            set { M_TabControl.SelectedTab = (System.Windows.Forms.TabPage)value.M_TabPage; }
		|        }
		|
		|        public bool ShowToolTips
		|        {
		|            get { return M_TabControl.ShowToolTips; }
		|            set { M_TabControl.ShowToolTips = value; }
		|        }
		|
		|        public int SizeMode
		|        {
		|            get { return (int)M_TabControl.SizeMode; }
		|            set { M_TabControl.SizeMode = (System.Windows.Forms.TabSizeMode)value; }
		|        }
		|
		|        public osf.TabPageCollection TabPages
		|        {
		|            get { return new TabPageCollection(M_TabControl.TabPages); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TabPage" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TabPageEx : System.Windows.Forms.TabPage
		|    {
		|        public osf.TabPage M_Object;
		|    }//endClass
		|
		|    public class TabPage : Panel
		|    {
		|        public new ClTabPage dll_obj;
		|        public TabPageEx M_TabPage;
		|
		|        public TabPage(string p1 = null)
		|        {
		|            M_TabPage = new TabPageEx();
		|            M_TabPage.M_Object = this;
		|            base.M_ScrollableControl = M_TabPage;
		|            if (p1 != null)
		|            {
		|                M_TabPage.Text = p1;
		|            }
		|        }
		|		
		|        public TabPage(osf.TabPage p1)
		|        {
		|            M_TabPage = p1.M_TabPage;
		|            M_TabPage.M_Object = this;
		|            base.M_ScrollableControl = M_TabPage;
		|        }
		|
		|        public TabPage(System.Windows.Forms.TabPage p1)
		|        {
		|            M_TabPage = (TabPageEx)p1;
		|            M_TabPage.M_Object = this;
		|            base.M_ScrollableControl = M_TabPage;
		|        }
		|
		|        public int ImageIndex
		|        {
		|            get { return M_TabPage.ImageIndex; }
		|            set { M_TabPage.ImageIndex = value; }
		|        }
		|
		|        public string ToolTipText
		|        {
		|            get { return M_TabPage.ToolTipText; }
		|            set { M_TabPage.ToolTipText = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TabPageCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TabPageCollection : IEnumerable, IEnumerator
		|    {
		|        public ClTabPageCollection dll_obj;
		|        public System.Windows.Forms.TabControl.TabPageCollection M_TabPageCollection;
		|        private System.Collections.IEnumerator Enumerator;
		|
		|        public TabPageCollection(System.Windows.Forms.TabControl.TabPageCollection p1)
		|        {
		|            M_TabPageCollection = p1;
		|        }
		|
		|        public TabPage Add(TabPage page)
		|        {
		|            M_TabPageCollection.Add(page.M_TabPage);
		|            return page;
		|        }
		|
		|        public void Clear()
		|        {
		|            M_TabPageCollection.Clear();
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_TabPageCollection.Count; }
		|        }
		|
		|        public int IndexOf(TabPage page)
		|        {
		|            return M_TabPageCollection.IndexOf((System.Windows.Forms.TabPage)page.M_TabPage);
		|        }
		|
		|        public osf.TabPage Insert(int index, object page)
		|        {
		|            if (page is TabPage)
		|            {
		|                M_TabPageCollection.Insert(index, ((dynamic)page).M_TabPage);
		|                System.Windows.Forms.Application.DoEvents();
		|                return (TabPage)page;
		|            }
		|            if (!(page is string))
		|            {
		|                return null;
		|            }
		|            TabPage TabPage1 = new TabPage((string)null);
		|            TabPage1.Text = Convert.ToString(page);
		|            M_TabPageCollection.Insert(index, (System.Windows.Forms.TabPage)TabPage1.M_TabPage);
		|            return TabPage1;
		|        }
		|
		|        public osf.TabPage this[int index]
		|        {
		|            get { return (TabPage)((TabPageEx)M_TabPageCollection[index]).M_Object; }
		|        }
		|
		|        public void Remove(TabPage page)
		|        {
		|            M_TabPageCollection.Remove((System.Windows.Forms.TabPage)page.M_TabPage);
		|        }
		|
		|        public void RemoveAt(int index)
		|        {
		|            M_TabPageCollection.RemoveAt(index);
		|        }
		|
		|        public System.Collections.IEnumerator GetEnumerator()
		|        {
		|            Enumerator = M_TabPageCollection.GetEnumerator();
		|            return (IEnumerator)this;
		|        }
		|
		|        public object Current
		|        {
		|            get { return ((TabPageEx)Enumerator.Current).M_Object; }
		|        }
		|
		|        public bool MoveNext()
		|        {
		|            return Enumerator.MoveNext();
		|        }
		|
		|        public void Reset()
		|        {
		|            Enumerator.Reset();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Panel" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class PanelEx : System.Windows.Forms.Panel
		|    {
		|        public osf.Panel M_Object;
		|    }//endClass
		|
		|    public class Panel : ScrollableControl
		|    {
		|        public ClPanel dll_obj;
		|        public PanelEx M_Panel;
		|
		|        public Panel()
		|        {
		|            M_Panel = new PanelEx();
		|            M_Panel.M_Object = this;
		|            base.M_ScrollableControl = M_Panel;
		|        }
		|		
		|        public Panel(osf.Panel p1)
		|        {
		|            M_Panel = p1.M_Panel;
		|            M_Panel.M_Object = this;
		|            base.M_ScrollableControl = M_Panel;
		|        }
		|
		|        public Panel(System.Windows.Forms.Panel p1)
		|        {
		|            M_Panel = (PanelEx)p1;
		|            M_Panel.M_Object = this;
		|            base.M_ScrollableControl = M_Panel;
		|        }
		|
		|        public int BorderStyle
		|        {
		|            get { return (int)M_Panel.BorderStyle; }
		|            set { M_Panel.BorderStyle = (System.Windows.Forms.BorderStyle)value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "HScrollBar" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class HScrollBarEx : System.Windows.Forms.HScrollBar
		|    {
		|        public osf.HScrollBar M_Object;
		|    }//endClass
		|
		|    public class HScrollBar : ScrollBar
		|    {
		|        public ClHScrollBar dll_obj;
		|        public HScrollBarEx M_HScrollBar;
		|
		|        public HScrollBar()
		|        {
		|            M_HScrollBar = new HScrollBarEx();
		|            M_HScrollBar.M_Object = this;
		|            base.M_Control = M_HScrollBar;
		|            base.v_h_ScrollBar = M_HScrollBar;
		|            base.LargeChange = 1;
		|            M_HScrollBar.ValueChanged += base.M_ScrollBar_ValueChanged;
		|            M_HScrollBar.Scroll += base.M_ScrollBar_Scroll;
		|            ValueChanged = """";
		|            Scroll = """";
		|        }
		|
		|        public HScrollBar(osf.HScrollBar p1)
		|        {
		|            M_HScrollBar = p1.M_HScrollBar;
		|            M_HScrollBar.M_Object = this;
		|            base.M_Control = M_HScrollBar;
		|            base.v_h_ScrollBar = M_HScrollBar;
		|            base.LargeChange = 1;
		|            M_HScrollBar.ValueChanged += base.M_ScrollBar_ValueChanged;
		|            M_HScrollBar.Scroll += base.M_ScrollBar_Scroll;
		|            ValueChanged = """";
		|            Scroll = """";
		|        }
		|
		|        public HScrollBar(System.Windows.Forms.HScrollBar p1)
		|        {
		|            M_HScrollBar = (HScrollBarEx)p1;
		|            M_HScrollBar.M_Object = this;
		|            base.M_Control = M_HScrollBar;
		|            base.v_h_ScrollBar = M_HScrollBar;
		|            base.LargeChange = 1;
		|            M_HScrollBar.ValueChanged += base.M_ScrollBar_ValueChanged;
		|            M_HScrollBar.Scroll += base.M_ScrollBar_Scroll;
		|            ValueChanged = """";
		|            Scroll = """";
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "VScrollBar" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class VScrollBarEx : System.Windows.Forms.VScrollBar
		|    {
		|        public osf.VScrollBar M_Object;
		|    }//endClass
		|
		|    public class VScrollBar : ScrollBar
		|    {
		|        public ClVScrollBar dll_obj;
		|        public VScrollBarEx M_VScrollBar;
		|
		|        public VScrollBar()
		|        {
		|            M_VScrollBar = new VScrollBarEx();
		|            M_VScrollBar.M_Object = this;
		|            base.M_Control = M_VScrollBar;
		|            base.v_h_ScrollBar = M_VScrollBar;
		|            base.LargeChange = 1;
		|            M_VScrollBar.ValueChanged += base.M_ScrollBar_ValueChanged;
		|            M_VScrollBar.Scroll += base.M_ScrollBar_Scroll;
		|            ValueChanged = """";
		|            Scroll = """";
		|        }
		|
		|        public VScrollBar(osf.VScrollBar p1)
		|        {
		|            M_VScrollBar = p1.M_VScrollBar;
		|            M_VScrollBar.M_Object = this;
		|            base.M_Control = M_VScrollBar;
		|            base.v_h_ScrollBar = M_VScrollBar;
		|            base.LargeChange = 1;
		|            M_VScrollBar.ValueChanged += base.M_ScrollBar_ValueChanged;
		|            M_VScrollBar.Scroll += base.M_ScrollBar_Scroll;
		|            ValueChanged = """";
		|            Scroll = """";
		|        }
		|
		|        public VScrollBar(System.Windows.Forms.VScrollBar p1)
		|        {
		|            M_VScrollBar = (VScrollBarEx)p1;
		|            M_VScrollBar.M_Object = this;
		|            base.M_Control = M_VScrollBar;
		|            base.v_h_ScrollBar = M_VScrollBar;
		|            base.LargeChange = 1;
		|            M_VScrollBar.ValueChanged += base.M_ScrollBar_ValueChanged;
		|            M_VScrollBar.Scroll += base.M_ScrollBar_Scroll;
		|            ValueChanged = """";
		|            Scroll = """";
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ScrollBar" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ScrollBar : Control
		|    {
		|        public string ValueChanged;
		|        public string Scroll;
		|        public dynamic v_h_ScrollBar;
		|
		|        public System.Windows.Forms.ScrollBar M_ScrollBar
		|        {
		|            get { return v_h_ScrollBar; }
		|            set
		|            {
		|                v_h_ScrollBar = value;
		|                base.M_Control = v_h_ScrollBar;
		|            }
		|        }
		|
		|        public ScrollBar()
		|        {
		|        }
		|
		|        public void M_ScrollBar_ValueChanged(object sender, System.EventArgs e)
		|        {
		|            if (ValueChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = ValueChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.ValueChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.ValueChanged);
		|            }
		|        }
		|
		|        public void M_ScrollBar_Scroll(object sender, System.Windows.Forms.ScrollEventArgs e)
		|        {
		|            if (Scroll.Length > 0)
		|            {
		|                ScrollEventArgs ScrollEventArgs1 = new ScrollEventArgs();
		|                ScrollEventArgs1.EventString = Scroll;
		|                ScrollEventArgs1.Sender = this;
		|                ScrollEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Scroll);
		|                ScrollEventArgs1.OldValue = e.OldValue;
		|                ScrollEventArgs1.NewValue = e.NewValue;
		|                ScrollEventArgs1.ScrollOrientation = (int)e.ScrollOrientation;
		|                ScrollEventArgs1.EventType = (int)e.Type;
		|                ClScrollEventArgs ClScrollEventArgs1 = new ClScrollEventArgs(ScrollEventArgs1);
		|                OneScriptForms.Event = ClScrollEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Scroll);
		|            }
		|        }
		|
		|        public int LargeChange
		|        {
		|            get { return M_ScrollBar.LargeChange; }
		|            set
		|            {
		|                M_ScrollBar.LargeChange = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int Maximum
		|        {
		|            get { return M_ScrollBar.Maximum; }
		|            set
		|            {
		|                M_ScrollBar.Maximum = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int Minimum
		|        {
		|            get { return M_ScrollBar.Minimum; }
		|            set
		|            {
		|                M_ScrollBar.Minimum = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int SmallChange
		|        {
		|            get { return M_ScrollBar.SmallChange; }
		|            set
		|            {
		|                M_ScrollBar.SmallChange = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int Value
		|        {
		|            get { return M_ScrollBar.Value; }
		|            set
		|            {
		|                M_ScrollBar.Value = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Environment" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Environment
		|    {
		|        public ClEnvironment dll_obj;
		|
		|        public string CommandLine
		|        {
		|            get { return System.Environment.CommandLine; }
		|        }
		|
		|        public osf.Version Version
		|        {
		|            get { return new Version(Assembly.GetExecutingAssembly().GetName().Version); }
		|        }
		|		
		|        public string NewLine
		|        {
		|            get { return System.Environment.NewLine; }
		|        }
		|		
		|        public string GetFolderPath(int p1)
		|        {
		|            return System.Environment.GetFolderPath((System.Environment.SpecialFolder)p1);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "MenuItemCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class MenuItemCollection : CollectionBase
		|    {
		|        public ClMenuItemCollection dll_obj;
		|        public System.Windows.Forms.Menu.MenuItemCollection M_MenuItemCollection;
		|
		|        public MenuItemCollection()
		|        {
		|        }
		|
		|        public MenuItemCollection(System.Windows.Forms.Menu.MenuItemCollection p1)
		|        {
		|            M_MenuItemCollection = p1;
		|            base.List = M_MenuItemCollection;
		|        }
		|
		|        public osf.MenuItem Add(MenuItem item)
		|        {
		|            MenuItem menuItem;
		|            if (item is MenuItem)
		|            {
		|                menuItem = item;
		|            }
		|            else
		|            {
		|                menuItem = new MenuItem();
		|            }
		|            M_MenuItemCollection.Add(menuItem.M_MenuItem);
		|            System.Windows.Forms.Application.DoEvents();
		|            return menuItem;
		|        }
		|
		|        public bool Contains(osf.MenuItem item)
		|        {
		|            return M_MenuItemCollection.Contains((System.Windows.Forms.MenuItem)item.M_MenuItem);
		|        }
		|
		|        public int IndexOf(osf.MenuItem item)
		|        {
		|            return M_MenuItemCollection.IndexOf((System.Windows.Forms.MenuItem)item.M_MenuItem);
		|        }
		|
		|        public object Remove(osf.MenuItem item)
		|        {
		|            M_MenuItemCollection.Remove((System.Windows.Forms.MenuItem)item.M_MenuItem);
		|            return null;
		|        }
		|
		|        public new osf.MenuItem this[int p1]
		|        {
		|            get { return (MenuItem)((MenuItemEx)M_MenuItemCollection[p1]).M_Object; }
		|        }
		|
		|        public override object Current
		|        {
		|            get
		|            {
		|                return ((MenuItemEx)Enumerator.Current).M_Object;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "MenuItem" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class MenuItemEx : System.Windows.Forms.MenuItem
		|    {
		|        public osf.MenuItem M_Object;
		|    }//endClass
		|
		|    public class MenuItem : Menu
		|    {
		|        public new ClMenuItem dll_obj;
		|        public string Name;
		|        public string Click;
		|        public bool M_VisibleSaveState;
		|        public MenuItemEx M_MenuItem;
		|
		|        public MenuItem(string text = null, string click = """", System.Windows.Forms.Shortcut shortcut = System.Windows.Forms.Shortcut.None)
		|        {
		|            M_MenuItem = new MenuItemEx();
		|            M_MenuItem.M_Object = this;
		|            base.M_Menu = M_MenuItem;
		|            M_MenuItem.Click += M_MenuItem_Click;
		|            Name = """";
		|            Click = click;
		|            M_VisibleSaveState = false;
		|            M_MenuItem.Text = text;
		|            M_MenuItem.Shortcut = shortcut;
		|        }
		|
		|        public MenuItem(osf.MenuItem p1)
		|        {
		|            M_MenuItem = p1.M_MenuItem;
		|            M_MenuItem.M_Object = this;
		|            base.M_Menu = M_MenuItem;
		|            M_MenuItem.Click += M_MenuItem_Click;
		|            Name = """";
		|            Click = """";
		|            M_VisibleSaveState = false;
		|        }
		|
		|        public MenuItem(System.Windows.Forms.MenuItem p1)
		|        {
		|            M_MenuItem = (MenuItemEx)p1;
		|            M_MenuItem.M_Object = this;
		|            base.M_Menu = M_MenuItem;
		|            M_MenuItem.Click += M_MenuItem_Click;
		|            Name = """";
		|            Click = """";
		|            M_VisibleSaveState = false;
		|        }
		|
		|        public osf.MenuItem FromString(string p1)
		|        {
		|            MenuItem MenuItem1 = new MenuItem((string)null, (string)null, System.Windows.Forms.Shortcut.None);
		|            MenuItem1.Text = p1;
		|            return MenuItem1;
		|        }
		|
		|        public bool Checked
		|        {
		|            get { return M_MenuItem.Checked; }
		|            set { M_MenuItem.Checked = value; }
		|        }
		|
		|        public bool Enabled
		|        {
		|            get { return M_MenuItem.Enabled; }
		|            set { M_MenuItem.Enabled = value; }
		|        }
		|
		|        public int Index
		|        {
		|            get { return M_MenuItem.Index; }
		|            set { M_MenuItem.Index = value; }
		|        }
		|
		|        public bool MdiList
		|        {
		|            get { return M_MenuItem.MdiList; }
		|            set { M_MenuItem.MdiList = value; }
		|        }
		|
		|        public int MergeOrder
		|        {
		|            get { return M_MenuItem.MergeOrder; }
		|            set { M_MenuItem.MergeOrder = value; }
		|        }
		|
		|        public int MergeType
		|        {
		|            get { return (int)M_MenuItem.MergeType; }
		|            set { M_MenuItem.MergeType = (System.Windows.Forms.MenuMerge)value; }
		|        }
		|
		|        public osf.Menu Parent
		|        {
		|            get
		|            {
		|                dynamic p1 = M_MenuItem.Parent;
		|                if (M_MenuItem.Parent is System.Windows.Forms.MainMenu)
		|                {
		|                    return (Menu)((MainMenuEx)p1).M_Object;
		|                }
		|                if (M_MenuItem.Parent is System.Windows.Forms.ContextMenu)
		|                {
		|                    return (Menu)((ContextMenuEx)p1).M_Object;
		|                }
		|                if (M_MenuItem.Parent is MenuItemEx)
		|                {
		|                    return (Menu)((MenuItemEx)p1).M_Object;
		|                }
		|                return null;
		|            }
		|        }
		|
		|        public bool RadioCheck
		|        {
		|            get { return M_MenuItem.RadioCheck; }
		|            set { M_MenuItem.RadioCheck = value; }
		|        }
		|
		|        public int Shortcut
		|        {
		|            get { return (int)M_MenuItem.Shortcut; }
		|            set { M_MenuItem.Shortcut = (System.Windows.Forms.Shortcut)value; }
		|        }
		|
		|        public string Text
		|        {
		|            get { return M_MenuItem.Text; }
		|            set { M_MenuItem.Text = value; }
		|        }
		|
		|        public bool Visible
		|        {
		|            get { return M_MenuItem.Visible; }
		|            set
		|            {
		|                M_MenuItem.Visible = value;
		|                M_VisibleSaveState = value;
		|            }
		|        }
		|
		|        public void M_MenuItem_Click(object sender, System.EventArgs e)
		|        {
		|            if (Click.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Click;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Click);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Click);
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ContextMenu" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ContextMenuEx : System.Windows.Forms.ContextMenu
		|    {
		|        public object M_Object;
		|    }//endClass
		|		
		|    public class ContextMenu : Menu
		|    {
		|        public new ClContextMenu dll_obj;
		|        public ContextMenuEx M_ContextMenu;
		|
		|        public ContextMenu()
		|        {
		|            M_ContextMenu = new ContextMenuEx();
		|            M_ContextMenu.M_Object = this;
		|            base.M_Menu = M_ContextMenu;
		|        }
		|
		|        public ContextMenu(osf.ContextMenu p1)
		|        {
		|            M_ContextMenu = p1.M_ContextMenu;
		|            M_ContextMenu.M_Object = this;
		|            base.M_Menu = M_ContextMenu;
		|        }
		|
		|        public ContextMenu(System.Windows.Forms.ContextMenu p1)
		|        {
		|            M_ContextMenu = (ContextMenuEx)p1;
		|            M_ContextMenu.M_Object = this;
		|            base.M_Menu = M_ContextMenu;
		|        }
		|
		|        public void Show(System.Windows.Forms.Control p1, System.Drawing.Point p2)
		|        {
		|            M_ContextMenu.Show(p1, p2);
		|        }
		|
		|        public osf.Control SourceControl
		|        {
		|            get { return (osf.Control)((dynamic)M_ContextMenu.SourceControl).M_Object; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "MainMenu" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class MainMenuEx : System.Windows.Forms.MainMenu
		|    {
		|        public osf.MainMenu M_Object;
		|    }//endClass
		|
		|    public class MainMenu : Menu
		|    {
		|        public new ClMainMenu dll_obj;
		|        public MainMenuEx M_MainMenu;
		|
		|        public MainMenu()
		|        {
		|            M_MainMenu = new MainMenuEx();
		|            M_MainMenu.M_Object = this;
		|            base.M_Menu = M_MainMenu;
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public MainMenu(osf.MainMenu p1)
		|        {
		|            M_MainMenu = p1.M_MainMenu;
		|            M_MainMenu.M_Object = this;
		|            base.M_Menu = M_MainMenu;
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public MainMenu(System.Windows.Forms.MainMenu MainMenu)
		|        {
		|            M_MainMenu = (MainMenuEx)MainMenu;
		|            M_MainMenu.M_Object = this;
		|            base.M_Menu = M_MainMenu;
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public osf.Form GetForm()
		|        {
		|            return (osf.Form)((FormEx)M_MainMenu.GetForm()).M_Object;
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Menu" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Menu
		|    {
		|        public ClMenu dll_obj;
		|        public System.Windows.Forms.Menu M_Menu;
		|
		|        public MainMenu GetMainMenu()
		|        {
		|            try
		|            {
		|                return ((MainMenuEx)M_Menu.GetMainMenu()).M_Object;
		|            }
		|            catch
		|            {
		|                return null;
		|            }
		|        }
		|
		|        public osf.MenuItem get_MenuItem(int index)
		|        {
		|            return (MenuItem)((MenuItemEx)M_Menu.MenuItems[index]).M_Object;
		|        }
		|
		|        public osf.MenuItemCollection MenuItems
		|        {
		|            get { return new MenuItemCollection(M_Menu.MenuItems); }
		|        }
		|		
		|        public osf.MenuItem MenuItems2(int p1)
		|        {
		|            return MenuItems[p1];
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ArrayList" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ArrayListEx : System.Collections.ArrayList
		|    {
		|        public osf.ArrayList M_Object;
		|    }//endClass
		|
		|    public class ArrayList : IEnumerable, IEnumerator
		|    {
		|        public ClArrayList dll_obj;
		|        public ArrayListEx M_ArrayList;
		|        public System.Collections.IEnumerator Enumerator;
		|
		|        public ArrayList()
		|        {
		|            M_ArrayList = new ArrayListEx();
		|            M_ArrayList.M_Object = this;
		|        }
		|
		|        public ArrayList(osf.ArrayList p1)
		|        {
		|            M_ArrayList = p1.M_ArrayList;
		|            M_ArrayList.M_Object = this;
		|        }
		|
		|        public ArrayList(System.Collections.ArrayList p1)
		|        {
		|            M_ArrayList = (ArrayListEx)p1;
		|            M_ArrayList.M_Object = this;
		|        }
		|
		|        public object Add(object value)
		|        {
		|            M_ArrayList.Add(value);
		|            System.Windows.Forms.Application.DoEvents();
		|            return value;
		|        }
		|
		|        public void Clear()
		|        {
		|            M_ArrayList.Clear();
		|        }
		|
		|        public virtual int Count
		|        {
		|            get { return M_ArrayList.Count; }
		|        }
		|
		|        public int IndexOf(object value)
		|        {
		|            return M_ArrayList.IndexOf(value);
		|        }
		|
		|        public object Insert(int index, object value)
		|        {
		|            M_ArrayList.Insert(index, value);
		|            return value;
		|        }
		|
		|        public object this[int index]
		|        {
		|            get { return M_ArrayList[index]; }
		|            set { M_ArrayList[index] = value; }
		|        }
		|
		|        public void Remove(object obj)
		|        {
		|            M_ArrayList.Remove(obj);
		|        }
		|
		|        public virtual void RemoveAt(int index)
		|        {
		|            M_ArrayList.RemoveAt(index);
		|        }
		|		
		|        public void Reverse()
		|        {
		|            M_ArrayList.Reverse();
		|        }
		|		
		|        public void Sort(int p1, int p2)
		|        {
		|            System.Collections.IComparer myComparer = new ArrayListItemSorter(p1, p2);
		|            M_ArrayList.Sort(myComparer);
		|        }
		|		
		|        public bool Contains(object obj)
		|        {
		|            return M_ArrayList.Contains(obj);
		|        }
		|
		|        public System.Collections.IEnumerator GetEnumerator()
		|        {
		|            Enumerator = M_ArrayList.GetEnumerator();
		|            return (System.Collections.IEnumerator)this;
		|        }
		|
		|        public object Current
		|        {
		|            get { return Enumerator.Current; }
		|        }
		|
		|        public bool MoveNext()
		|        {
		|            return Enumerator.MoveNext();
		|        }
		|
		|        public void Reset()
		|        {
		|            Enumerator.Reset();
		|        }
		|    }//endClass
		|		
		|    public class ArrayListItemSorter : System.Collections.IComparer
		|    {
		|        private int sortType;
		|        private int sortOrder;
		|        private dynamic x2;
		|        private dynamic y2;
		|
		|        public ArrayListItemSorter(int p1, int p2)
		|        {
		|            sortType = p1;
		|            sortOrder = p2;
		|        }
		|
		|        public int Compare(object x, object y)
		|        {
		|            x2 = OneScriptForms.DefineTypeIValue(x);
		|            y2 = OneScriptForms.DefineTypeIValue(y);
		|            int num = 0;
		|            if (sortType == 3)//Boolean
		|            {
		|                if ((x2.GetType() != typeof(System.Boolean)) && (y2.GetType() != typeof(System.Boolean)))
		|                {
		|                    num = 0;
		|                }
		|                else if ((x2.GetType() != typeof(System.Boolean)) && (y2.GetType() == typeof(System.Boolean)))
		|                {
		|                    num = 1;
		|                }
		|                else if ((x2.GetType() == typeof(System.Boolean)) && (y2.GetType() != typeof(System.Boolean)))
		|                {
		|                    num = -1;
		|                }
		|                else
		|                {
		|                    num = ((System.Boolean)x2).CompareTo((System.Boolean)y2);
		|                    if (sortOrder == 0)
		|                    {
		|                        num = 0;
		|                    }
		|                    else if (sortOrder == 1)
		|                    {
		|                        
		|                    }
		|                    else if (sortOrder == 2)
		|                    {
		|                        num = -num;
		|                    }
		|                }
		|            }
		|            if (sortType == 2)//DateTime
		|            {
		|                if ((x2.GetType() != typeof(System.DateTime)) && (y2.GetType() != typeof(System.DateTime)))
		|                {
		|                    num = 0;
		|                }
		|                else if ((x2.GetType() != typeof(System.DateTime)) && (y2.GetType() == typeof(System.DateTime)))
		|                {
		|                    num = 1;
		|                }
		|                else if ((x2.GetType() == typeof(System.DateTime)) && (y2.GetType() != typeof(System.DateTime)))
		|                {
		|                    num = -1;
		|                }
		|                else
		|                {
		|                    num = ((System.DateTime)x2).CompareTo((System.DateTime)y2);
		|                    if (sortOrder == 0)
		|                    {
		|                        num = 0;
		|                    }
		|                    else if (sortOrder == 1)
		|                    {
		|
		|                    }
		|                    else if (sortOrder == 2)
		|                    {
		|                        num = -num;
		|                    }
		|                }
		|            }
		|            else if (sortType == 1)//Number
		|            {
		|                if ((x2.GetType() != typeof(System.Decimal)) && (y2.GetType() != typeof(System.Decimal)))
		|                {
		|                    num = 0;
		|                }
		|                else if ((x2.GetType() != typeof(System.Decimal)) && (y2.GetType() == typeof(System.Decimal)))
		|                {
		|                    num = 1;
		|                }
		|                else if ((x2.GetType() == typeof(System.Decimal)) && (y2.GetType() != typeof(System.Decimal)))
		|                {
		|                    num = -1;
		|                }
		|                else
		|                {
		|                    num = ((System.Decimal)x2).CompareTo((System.Decimal)y2);
		|                    if (sortOrder == 0)
		|                    {
		|                        num = 0;
		|                    }
		|                    else if (sortOrder == 1)
		|                    {
		|
		|                    }
		|                    else if (sortOrder == 2)
		|                    {
		|                        num = -num;
		|                    }
		|                }
		|            }
		|            else if (sortType == 0)// text
		|            {
		|                if ((x2.GetType() != typeof(System.String)) && (y2.GetType() != typeof(System.String)))
		|                {
		|                    num = 0;
		|                }
		|                else if ((x2.GetType() != typeof(System.String)) && (y2.GetType() == typeof(System.String)))
		|                {
		|                    num = 1;
		|                }
		|                else if ((x2.GetType() == typeof(System.String)) && (y2.GetType() != typeof(System.String)))
		|                {
		|                    num = -1;
		|                }
		|                else
		|                {
		|                    num = ((System.String)x2).CompareTo((System.String)y2);
		|                    if (sortOrder == 0)
		|                    {
		|                        num = 0;
		|                    }
		|                    else if (sortOrder == 1)
		|                    {
		|
		|                    }
		|                    else if (sortOrder == 2)
		|                    {
		|                        num = -num;
		|                    }
		|                }
		|            }
		|            return num;
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "PictureBox" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class PictureBoxEx : System.Windows.Forms.PictureBox
		|    {
		|        public osf.PictureBox M_Object;
		|    }//endClass
		|
		|    public class PictureBox : Control
		|    {
		|        public ClPictureBox dll_obj;
		|        public PictureBoxEx M_PictureBox;
		|        private osf.Bitmap image;
		|
		|        public PictureBox()
		|        {
		|            M_PictureBox = new PictureBoxEx();
		|            M_PictureBox.M_Object = this;
		|            base.M_Control = M_PictureBox;
		|        }
		|
		|        public PictureBox(osf.PictureBox p1)
		|        {
		|            M_PictureBox = p1.M_PictureBox;
		|            M_PictureBox.M_Object = this;
		|            base.M_Control = M_PictureBox;
		|        }
		|
		|        public PictureBox(System.Windows.Forms.PictureBox p1)
		|        {
		|            M_PictureBox = (PictureBoxEx)p1;
		|            M_PictureBox.M_Object = this;
		|            base.M_Control = M_PictureBox;
		|        }
		|
		|        public int BorderStyle
		|        {
		|            get { return (int)M_PictureBox.BorderStyle; }
		|            set
		|            {
		|                M_PictureBox.BorderStyle = (System.Windows.Forms.BorderStyle)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Bitmap Image
		|        {
		|            get { return image; }
		|            set
		|            {
		|                image = value;
		|                M_PictureBox.Image = value.M_Image;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int SizeMode
		|        {
		|            get { return (int)M_PictureBox.SizeMode; }
		|            set
		|            {
		|                M_PictureBox.SizeMode = (System.Windows.Forms.PictureBoxSizeMode)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int BackgroundImageLayout
		|        {
		|            get { return (int)M_PictureBox.BackgroundImageLayout; }
		|            set
		|            {
		|                M_PictureBox.BackgroundImageLayout = (System.Windows.Forms.ImageLayout)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Bitmap" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Bitmap : Image
		|    {
		|        public ClBitmap dll_obj;
		|        public System.Drawing.Bitmap M_Bitmap;
		|
		|        public Bitmap(System.Drawing.Image p1)
		|        {
		|            M_Bitmap = new System.Drawing.Bitmap(p1);
		|            base.M_Image = M_Bitmap;
		|            OneScriptForms.AddToHashtable(M_Bitmap, this);
		|        }
		|
		|        public Bitmap(Image p1)
		|        {
		|            M_Bitmap = new System.Drawing.Bitmap(p1.M_Image);
		|            base.M_Image = M_Bitmap;
		|            OneScriptForms.AddToHashtable(M_Bitmap, this);
		|        }
		|
		|        public Bitmap(Image p1, Size p2)
		|        {
		|            M_Bitmap = new System.Drawing.Bitmap(p1.M_Image, p2.M_Size);
		|            base.M_Image = M_Bitmap;
		|            OneScriptForms.AddToHashtable(M_Bitmap, this);
		|        }
		|
		|        public Bitmap(Size p1)
		|        {
		|            M_Bitmap = new System.Drawing.Bitmap(p1.Width, p1.Height);
		|            base.M_Image = M_Bitmap;
		|            OneScriptForms.AddToHashtable(M_Bitmap, this);
		|        }
		|
		|        public Bitmap(Stream p1)
		|        {
		|            M_Bitmap = new System.Drawing.Bitmap(p1.M_Stream);
		|            base.M_Image = M_Bitmap;
		|            OneScriptForms.AddToHashtable(M_Bitmap, this);
		|        }
		|
		|        public Bitmap(string p1)
		|        {
		|            try
		|            {
		|                M_Bitmap = new System.Drawing.Bitmap((System.IO.Stream)new System.IO.MemoryStream(Convert.FromBase64String(p1)));
		|                base.M_Image = M_Bitmap;
		|            }
		|            catch
		|            {
		|                M_Bitmap = new System.Drawing.Bitmap(p1);
		|                base.M_Image = M_Bitmap;
		|            }
		|            OneScriptForms.AddToHashtable(M_Bitmap, this);
		|        }
		|
		|        public Bitmap(osf.Bitmap p1)
		|        {
		|            M_Bitmap = p1.M_Bitmap;
		|            base.M_Image = M_Bitmap;
		|        }
		|
		|        public Bitmap(System.Drawing.Bitmap p1)
		|        {
		|            M_Bitmap = p1;
		|            base.M_Image = M_Bitmap;
		|        }
		|
		|        public osf.Bitmap Clone(float x, float y, float width, float height)
		|        {
		|            return new Bitmap(M_Bitmap.Clone(
		|                new System.Drawing.Rectangle(
		|                    Convert.ToInt32(x),
		|                    Convert.ToInt32(y),
		|                    Convert.ToInt32(width),
		|                    Convert.ToInt32(height)
		|                    ), 
		|                System.Drawing.Imaging.PixelFormat.Undefined)
		|                );
		|        }
		|
		|        public osf.Bitmap FromBase64String(string str)
		|        {
		|            return new Bitmap(new System.Drawing.Bitmap((System.IO.Stream)new System.IO.MemoryStream(Convert.FromBase64String(str))));
		|        }
		|
		|        public osf.Bitmap FromSize(System.Drawing.Size size)
		|        {
		|            return new Bitmap(new System.Drawing.Bitmap(size.Width, size.Height));
		|        }
		|
		|        public void MakeTransparent(Color p1)
		|        {
		|            M_Bitmap.MakeTransparent(p1.M_Color);
		|        }
		|
		|        public string ToBase64String(ImageFormat format = null)
		|        {
		|            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
		|            if (format != null)
		|            {
		|                M_Bitmap.Save((System.IO.Stream)memoryStream, format.M_ImageFormat);
		|            }
		|            else
		|            {
		|                try
		|                {
		|                    M_Bitmap.Save((System.IO.Stream)memoryStream, M_Bitmap.RawFormat);
		|                }
		|                catch
		|                {
		|                    M_Bitmap.Save((System.IO.Stream)memoryStream, System.Drawing.Imaging.ImageFormat.Bmp);
		|                }
		|            }
		|            string base64String = Convert.ToBase64String(memoryStream.ToArray());
		|            memoryStream.Close();
		|            return base64String;
		|        }
		|		
		|        public void SetPixel(int x, int y, osf.Color color)
		|        {
		|            M_Bitmap.SetPixel(x, y, color.M_Color);
		|        }
		|		
		|        public osf.BitmapData LockBits()
		|        {
		|            osf.Rectangle Rectangle1 = new Rectangle(0, 0, M_Bitmap.Width, M_Bitmap.Height);
		|            System.Drawing.Imaging.ImageLockMode ImageLockMode1 = System.Drawing.Imaging.ImageLockMode.ReadWrite;
		|            System.Drawing.Imaging.PixelFormat PixelFormat1 = M_Bitmap.PixelFormat;
		|            osf.BitmapData BitmapData1 = new BitmapData(M_Bitmap.LockBits(Rectangle1.M_Rectangle, ImageLockMode1, PixelFormat1));
		|            return BitmapData1;
		|        }
		|
		|        public void UnlockBits(osf.BitmapData p1)
		|        {
		|            M_Bitmap.UnlockBits(p1.M_BitmapData);
		|        }
		|		
		|        public void SetBytes(osf.BitmapData p1, osf.ArrayList p2)
		|        {
		|            int num = p2.M_ArrayList.Count;
		|            byte[] Bytes1 = new byte[num];
		|            for (int i = 0; i < num; i++)
		|            {
		|                Bytes1[i] = System.Convert.ToByte(p2.M_ArrayList[i].ToString());
		|            }
		|            System.Runtime.InteropServices.Marshal.Copy(Bytes1, 0, p1.M_BitmapData.Scan0, num);
		|        }
		|
		|        public osf.ArrayList GetBytes(osf.BitmapData p1)
		|        {
		|            int num = Math.Abs(p1.M_BitmapData.Stride) * M_Bitmap.Height;
		|            byte[] Bytes1 = new byte[num];
		|            System.Runtime.InteropServices.Marshal.Copy(p1.M_BitmapData.Scan0, Bytes1, 0, num);
		|            ArrayList ArrayList1 = new ArrayList();
		|            for (int i = 0; i < num; i++)
		|            {
		|                ArrayList1.Add(System.Convert.ToInt32(Bytes1[i]));
		|            }
		|            return ArrayList1;
		|        }
		|		
		|        public osf.Color GetPixel(int p1, int p2)
		|        {
		|            return new Color(M_Bitmap.GetPixel(p1, p2));
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Icon" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Icon
		|    {
		|        public ClIcon dll_obj;
		|        public System.Drawing.Icon M_Icon;
		|
		|        public Icon(string p1)
		|        {
		|            M_Icon = null;
		|            try
		|            {
		|                System.Drawing.Bitmap Bitmap = new System.Drawing.Bitmap((System.IO.Stream)new System.IO.MemoryStream(Convert.FromBase64String(p1)));
		|                IntPtr Hicon = Bitmap.GetHicon();
		|                System.Drawing.Icon Icon1 = System.Drawing.Icon.FromHandle(Hicon);
		|                M_Icon = Icon1;
		|            }
		|            catch
		|            {
		|            }
		|            try
		|            {
		|                M_Icon = new System.Drawing.Icon((System.IO.Stream)new System.IO.MemoryStream(Convert.FromBase64String(p1)));
		|            }
		|            catch
		|            {
		|            }
		|            if (M_Icon == null)
		|            {
		|                M_Icon = new System.Drawing.Icon(p1);
		|            }
		|            OneScriptForms.AddToHashtable(M_Icon, this);
		|        }
		|
		|        public Icon(string p1, int p2)
		|        {
		|            M_Icon = ExtractIconClass.GetIconFromExeDll(p2, p1);
		|            OneScriptForms.AddToHashtable(M_Icon, this);
		|        }
		|
		|        public Icon(Bitmap bitmap)
		|        {
		|            M_Icon = System.Drawing.Icon.FromHandle(((System.Drawing.Bitmap)bitmap.M_Bitmap).GetHicon());
		|            OneScriptForms.AddToHashtable(M_Icon, this);
		|        }
		|		
		|        public Icon(osf.Icon p1)
		|        {
		|            M_Icon = p1.M_Icon;
		|            OneScriptForms.AddToHashtable(M_Icon, this);
		|        }
		|
		|        public Icon(System.Drawing.Icon p1)
		|        {
		|            M_Icon = p1;
		|            OneScriptForms.AddToHashtable(M_Icon, this);
		|        }
		|
		|        public osf.Bitmap ToBitmap()
		|        {
		|            return new Bitmap(M_Icon.ToBitmap());
		|        }
		|
		|        public int Height
		|        {
		|            get { return M_Icon.Height; }
		|        }
		|
		|        public osf.Size Size
		|        {
		|            get { return new Size(M_Icon.Size); }
		|        }
		|
		|        public int Width
		|        {
		|            get { return M_Icon.Width; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Type" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Type
		|    {
		|        public System.Type M_Type;
		|
		|        public Type(string p1)
		|        {
		|            M_Type = System.Type.GetType(p1, false, true);
		|        }
		|
		|        public Type(System.Type p1)
		|        {
		|            M_Type = p1;
		|        }
		|
		|        public bool IsClass
		|        {
		|            get { return M_Type.IsClass; }
		|        }
		|
		|        public bool IsInstanceOfType(osf.Type p1)
		|        {
		|            return M_Type.IsInstanceOfType(p1.M_Type);
		|        }
		|
		|        public bool IsSubclassOf(osf.Type p1)
		|        {
		|            return M_Type.IsSubclassOf(p1.M_Type);
		|        }
		|
		|        public string Name
		|        {
		|            get { return M_Type.Name; }
		|        }
		|
		|        public override string ToString()
		|        {
		|            return M_Type.ToString();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Pen" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Pen
		|    {
		|        public ClPen dll_obj;
		|        public System.Drawing.Pen M_Pen;
		|
		|        public Pen(System.Drawing.Color color, float width = 1f)
		|        {
		|            M_Pen = new System.Drawing.Pen(color, width);
		|            OneScriptForms.AddToHashtable(M_Pen, this);
		|        }
		|
		|        public Pen(osf.Pen p1)
		|        {
		|            M_Pen = p1.M_Pen;
		|            OneScriptForms.AddToHashtable(M_Pen, this);
		|        }
		|
		|        public Pen(System.Drawing.Pen p1)
		|        {
		|            M_Pen = p1;
		|            OneScriptForms.AddToHashtable(M_Pen, this);
		|        }
		|
		|        public void Dispose()
		|        {
		|            M_Pen.Dispose();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "SolidBrush" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class SolidBrush : Brush
		|    {
		|        public ClSolidBrush dll_obj;
		|        public System.Drawing.SolidBrush M_SolidBrush;
		|
		|        public SolidBrush(System.Drawing.Color p1)
		|        {
		|            M_SolidBrush = new System.Drawing.SolidBrush(p1);
		|            base.M_Brush = M_SolidBrush;
		|            OneScriptForms.AddToHashtable(M_SolidBrush, this);
		|        }
		|		
		|        public SolidBrush(osf.SolidBrush p1)
		|        {
		|            M_SolidBrush = p1.M_SolidBrush;
		|            base.M_Brush = M_SolidBrush;
		|            OneScriptForms.AddToHashtable(M_SolidBrush, this);
		|        }
		|
		|        public SolidBrush(System.Drawing.SolidBrush p1)
		|        {
		|            M_SolidBrush = p1;
		|            base.M_Brush = M_SolidBrush;
		|            OneScriptForms.AddToHashtable(M_SolidBrush, this);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Brush" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Brush : System.Drawing.Brush
		|    {
		|        public object M_Brush;
		|
		|        public override object Clone()
		|        {
		|            return (System.Drawing.Brush)Clone();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Graphics" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Graphics
		|    {
		|        public ClGraphics dll_obj;
		|        public System.Drawing.Graphics M_Graphics;
		|		
		|        public Graphics(osf.Graphics p1)
		|        {
		|            M_Graphics = p1.M_Graphics;
		|            OneScriptForms.AddToHashtable(M_Graphics, this);
		|        }
		|
		|        public Graphics(System.Drawing.Graphics p1)
		|        {
		|            M_Graphics = p1;
		|            OneScriptForms.AddToHashtable(M_Graphics, this);
		|        }
		|
		|        public void Clear(Color p1)
		|        {
		|            M_Graphics.Clear(p1.M_Color);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void DrawEllipse(osf.Pen pen, float x, float y, float width, float height)
		|        {
		|            M_Graphics.DrawEllipse(pen.M_Pen, x, y, width, height);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void DrawImage(osf.Image image, float dx, float dy, float dw, float dh, float sx = 0.0f, float sy = 0.0f, float sw = -1f, float sh = -1f)
		|        {
		|            System.Drawing.Rectangle Rectangle1 = new System.Drawing.Rectangle();
		|            Rectangle1.X = (int)System.Math.Round((double)dx);
		|            Rectangle1.Y = (int)System.Math.Round((double)dy);
		|            Rectangle1.Width = (int)System.Math.Round((double)dw);
		|            Rectangle1.Height = (int)System.Math.Round((double)dh);
		|            if ((double)sw == -1.0)
		|            {
		|                sw = (float)image.Width;
		|            }
		|            if ((double)sh == -1.0)
		|            {
		|                sh = (float)image.Height;
		|            }
		|            M_Graphics.DrawImage(image.M_Image, Rectangle1, sx, sy, sw, sh, System.Drawing.GraphicsUnit.Pixel);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void DrawLine(osf.Pen pen, float x1, float y1, float x2, float y2)
		|        {
		|            M_Graphics.DrawLine(pen.M_Pen, x1, y1, x2, y2);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void DrawString(string str, osf.Font font, osf.Brush brush, float x, float y)
		|        {
		|            M_Graphics.DrawString(str, font.M_Font, (System.Drawing.Brush)brush.M_Brush, x, y);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void DrawRectangle(osf.Pen pen, float x, float y, float width, float height)
		|        {
		|            M_Graphics.DrawRectangle(pen.M_Pen, x, y, width, height);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void FillRectangle(osf.Brush brush, float x, float y, float width, float height)
		|        {
		|            M_Graphics.FillRectangle((System.Drawing.Brush)brush.M_Brush, x, y, width, height);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public osf.Graphics FromImage(osf.Image p1)
		|        {
		|            Graphics Graphics1 = new Graphics(System.Drawing.Graphics.FromImage(p1.M_Image));
		|            System.Windows.Forms.Application.DoEvents();
		|            return Graphics1;
		|        }
		|		
		|        public void Dispose()
		|        {
		|            M_Graphics.Dispose();
		|        }
		|		
		|        public float DpiX
		|        {
		|            get { return M_Graphics.DpiX; }
		|        }
		|
		|        public float DpiY
		|        {
		|            get { return M_Graphics.DpiY; }
		|        }
		|		
		|        public void CopyFromScreen(int p1, int p2, int p3, int p4, Size p5)
		|        {
		|            M_Graphics.CopyFromScreen(p1, p2, p3, p4, p5.M_Size);
		|        }
		|		
		|        public void ScaleTransform(float p1, float p2)
		|        {
		|            M_Graphics.ScaleTransform(p1, p2);
		|        }
		|		
		|        public void TranslateTransform(float p1, float p2)
		|        {
		|            M_Graphics.TranslateTransform(p1, p2);
		|        }
		|		
		|        public void RotateTransform(float p1)
		|        {
		|            M_Graphics.RotateTransform(p1);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Collection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Collection : System.Collections.IEnumerable
		|    {
		|        public ClCollection dll_obj;
		|        public Microsoft.VisualBasic.Collection M_Collection;
		|
		|        public Collection()
		|        {
		|            M_Collection = new Microsoft.VisualBasic.Collection();
		|            OneScriptForms.AddToHashtable(M_Collection, this);
		|        }
		|
		|        public Collection(osf.Collection p1)
		|        {
		|            M_Collection = p1.M_Collection;
		|        }
		|
		|        public Collection(Microsoft.VisualBasic.Collection p1)
		|        {
		|            M_Collection = p1;
		|        }
		|
		|        public void Add(object item, string key = null)
		|        {
		|            M_Collection.Add(item, key);
		|        }
		|
		|        public int Count
		|        {
		|            get { return M_Collection.Count; }
		|        }
		|
		|        public object this[object index]
		|        {
		|            get
		|            {
		|                if (index is int)
		|                {
		|                    return M_Collection[checked(Convert.ToInt32(index) + 1)];
		|                }
		|                if (index is string)
		|                {
		|                    return M_Collection[Convert.ToString(index)];
		|                }
		|                return M_Collection[index];
		|            }
		|        }
		|
		|        public void Remove(object index)
		|        {
		|            if (index is int)
		|            {
		|                M_Collection.Remove(checked(Convert.ToInt32(index) + 1));
		|            }
		|            else if (index is string)
		|            {
		|                M_Collection.Remove(checked(Convert.ToString(index)));
		|            }
		|        }
		|
		|        public System.Collections.IEnumerator GetEnumerator()
		|        {
		|            return M_Collection.GetEnumerator();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "FormClosingEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class FormClosingEventArgs : CancelEventArgs
		|    {
		|        public new ClFormClosingEventArgs dll_obj;
		|        public int CloseReason;
		|
		|        public FormClosingEventArgs(System.Windows.Forms.CloseReason p1, bool p2)
		|        {
		|            CloseReason = (int)p1;
		|            Cancel = p2;
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Sound" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Sound
		|    {
		|        public ClSound dll_obj;
		|
		|        [DllImport(""winmm.dll"", CharSet = CharSet.Auto, SetLastError = true)] public static extern int PlaySound([MarshalAs(UnmanagedType.VBByRefStr)] ref string name, int hmod, int flags);
		|
		|        public void Play(string filename)
		|        {
		|            try
		|            {
		|                Sound.PlaySound(ref filename, 0, 131073);
		|            }
		|            catch
		|            {
		|            }
		|        }
		|
		|        public void PlaySystem(string name)
		|        {
		|            Sound.PlaySound(ref name, 0, 65539);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ItemCheckEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ItemCheckEventArgs : EventArgs
		|    {
		|        public new ClItemCheckEventArgs dll_obj;
		|        public int CurrentValue = (int)System.Windows.Forms.CheckState.Unchecked;
		|        public int Index = -1;
		|        public int NewValue = (int)System.Windows.Forms.CheckState.Unchecked;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "KeyEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class KeyEventArgs : EventArgs
		|    {
		|        public new ClKeyEventArgs dll_obj;
		|        public bool Alt = false;
		|        public bool Control = false;
		|        public int KeyCode = (int)System.Windows.Forms.Keys.None;
		|        public int Modifiers = (int)System.Windows.Forms.Keys.None;
		|        public bool Shift = false;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "KeyPressEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class KeyPressEventArgs : EventArgs
		|    {
		|        public new ClKeyPressEventArgs dll_obj;
		|        public string KeyChar;
		|
		|        public KeyPressEventArgs()
		|        {
		|            KeyChar = Convert.ToString(char.MinValue);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "LabelEditEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class LabelEditEventArgs : EventArgs
		|    {
		|        public new ClLabelEditEventArgs dll_obj;
		|        public bool CancelEdit = false;
		|        public int Item = -1;
		|        public string Label = """";
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "RenamedEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class RenamedEventArgs : FileSystemEventArgs
		|    {
		|        public new ClRenamedEventArgs dll_obj;
		|        public string OldFullPath = """";
		|        public string OldName = """";
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewCellEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewCellEventArgs : EventArgs
		|    {
		|        public new ClDataGridViewCellEventArgs dll_obj;
		|        public int ColumnIndex;
		|        public int RowIndex;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewCellMouseEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewCellMouseEventArgs : MouseEventArgs
		|    {
		|        public new ClDataGridViewCellMouseEventArgs dll_obj;
		|        public int ColumnIndex;
		|        public int RowIndex;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DataGridViewCellCancelEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DataGridViewCellCancelEventArgs : CancelEventArgs
		|    {
		|        public new ClDataGridViewCellCancelEventArgs dll_obj;
		|        public int ColumnIndex;
		|        public int RowIndex;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "LinkClickedEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class LinkClickedEventArgs : EventArgs
		|    {
		|        public new ClLinkClickedEventArgs dll_obj;
		|        public string LinkText = """";
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ScrollEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ScrollEventArgs : EventArgs
		|    {
		|        public new ClScrollEventArgs dll_obj;
		|        public int NewValue;
		|        public int OldValue;
		|        public int ScrollOrientation;
		|        public int EventType;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "SelectedGridItemChangedEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class SelectedGridItemChangedEventArgs : EventArgs
		|    {
		|        public new ClSelectedGridItemChangedEventArgs dll_obj;
		|        public string OldLabel;
		|        public object OldValue;
		|        public string NewLabel;
		|        public object NewValue;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ControlEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ControlEventArgs : EventArgs
		|    {
		|        public new ClControlEventArgs dll_obj;
		|        public dynamic Control = null;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "PaintEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class PaintEventArgs : EventArgs
		|    {
		|        public new ClPaintEventArgs dll_obj;
		|        public osf.Graphics Graphics = null;
		|        public osf.Rectangle ClipRectangle = null;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "NodeLabelEditEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class NodeLabelEditEventArgs : EventArgs
		|    {
		|        public new ClNodeLabelEditEventArgs dll_obj;
		|        public bool CancelEdit;
		|        public string Label;
		|        public string Label_old;
		|        public osf.TreeNode Node;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TreeViewEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TreeViewEventArgs : EventArgs
		|    {
		|        public new ClTreeViewEventArgs dll_obj;
		|        public int Action = (int)System.Windows.Forms.TreeViewAction.Unknown;
		|        public osf.TreeNode Node = null;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "TreeViewCancelEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class TreeViewCancelEventArgs : CancelEventArgs
		|    {
		|        public new ClTreeViewCancelEventArgs dll_obj;
		|        public int Action = (int)System.Windows.Forms.TreeViewAction.Unknown;
		|        public osf.TreeNode Node = null;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "PropertyValueChangedEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class PropertyValueChangedEventArgs : EventArgs
		|    {
		|        public new ClPropertyValueChangedEventArgs dll_obj;
		|        public object oldValue = null;
		|        public osf.GridItem ChangedItem = null;
		|
		|        public object OldValue
		|        {
		|            get { return oldValue; }
		|            set { oldValue = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ToolBarButtonClickEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ToolBarButtonClickEventArgs : EventArgs
		|    {
		|        public new ClToolBarButtonClickEventArgs dll_obj;
		|        public osf.ToolBarButton Button = null;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "LinkLabelLinkClickedEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class LinkLabelLinkClickedEventArgs : EventArgs
		|    {
		|        public new ClLinkLabelLinkClickedEventArgs dll_obj;
		|        public int Button;
		|        public osf.Link Link;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ColumnClickEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ColumnClickEventArgs : EventArgs
		|    {
		|        public new ClColumnClickEventArgs dll_obj;
		|        public int Column = -1;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "FileSystemEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class FileSystemEventArgs : EventArgs
		|    {
		|        public new ClFileSystemEventArgs dll_obj;
		|        public int ChangeType = 0;
		|        public string FullPath = null;
		|        public string Name = null;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "CancelEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class CancelEventArgs : EventArgs
		|    {
		|        public new ClCancelEventArgs dll_obj;
		|        public bool Cancel = false;
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ControlCollection" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ControlCollection : CollectionBase
		|    {
		|        public System.Windows.Forms.Control.ControlCollection M_ControlCollection;
		|        public ClControlCollection dll_obj;
		|
		|        public ControlCollection()
		|        {
		|        }
		|
		|        public ControlCollection(System.Windows.Forms.Control.ControlCollection p1)
		|        {
		|            M_ControlCollection = p1;
		|            base.List = M_ControlCollection;
		|        }
		|
		|        public osf.Control Add(Control p1)
		|        {
		|            M_ControlCollection.Add(p1.M_Control);
		|            return (osf.Control)p1;
		|        }
		|
		|        public osf.Button AddButton(string text = null, int left = 0, int top = 0, int width = 0, int height = 0)
		|        {
		|            Button Button1 = new Button();
		|            Button1.Text = text;
		|            Button1.Left = left;
		|            Button1.Top = top;
		|            Button1.Width = width;
		|            Button1.Height = height;
		|            M_ControlCollection.Add((System.Windows.Forms.Control)Button1.M_Button);
		|            System.Windows.Forms.Application.DoEvents();
		|            return Button1;
		|        }
		|
		|        public new osf.Control this[int p1]
		|        {
		|            get
		|            {
		|                if (M_ControlCollection[p1] != null)
		|                {
		|                    return (osf.Control)((dynamic)M_ControlCollection[p1]).M_Object;
		|                }
		|                return null;
		|            }
		|        }
		|
		|        public bool Contains(Control p1)
		|        {
		|            return M_ControlCollection.Contains(p1.M_Control);
		|        }
		|
		|        public void Remove(Control p1)
		|        {
		|            M_ControlCollection.Remove(p1.M_Control);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void SetChildIndex(Control p1, int p2)
		|        {
		|            M_ControlCollection.SetChildIndex(p1.M_Control, p2);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public override object Current
		|        {
		|            get
		|            {
		|                object objectValue = Enumerator.Current;
		|                if (objectValue != null)
		|                {
		|                    return new Control(((dynamic)objectValue).M_Control);
		|                }
		|                return null;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "CollectionBase" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class CollectionBase : System.Collections.IList, System.Collections.IEnumerator, System.Collections.IEnumerable
		|    {
		|        public System.Collections.IList List;
		|        public System.Collections.IEnumerator Enumerator;
		|        public object current;
		|
		|
		|        public virtual int Add(object value)
		|        {
		|            return List.Add(value);
		|        }
		|
		|        public virtual void Clear()
		|        {
		|            List.Clear();
		|        }
		|
		|        public virtual void CopyTo(Array array, int index)
		|        {
		|            List.CopyTo(array, index);
		|        }
		|
		|        public virtual bool Contains(object value)
		|        {
		|            return List.Contains(value);
		|        }
		|
		|        public virtual int Count
		|        {
		|            get { return List.Count; }
		|        }
		|
		|        public virtual int IndexOf(object value)
		|        {
		|            return List.IndexOf(value);
		|        }
		|
		|        public virtual void Insert(int index, object value)
		|        {
		|            List.Insert(index, value);
		|        }
		|
		|        public virtual bool IsFixedSize
		|        {
		|            get { return List.IsFixedSize; }
		|        }
		|
		|        public virtual bool IsReadOnly
		|        {
		|            get { return List.IsReadOnly; }
		|        }
		|
		|        public virtual bool IsSynchronized
		|        {
		|            get { return List.IsSynchronized; }
		|        }
		|
		|        public virtual void Remove(object value)
		|        {
		|            List.Remove(value);
		|        }
		|
		|        public void RemoveAt(int Index)
		|        {
		|            List.RemoveAt(Index);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public virtual object SyncRoot
		|        {
		|            get { return List.SyncRoot; }
		|        }
		|
		|        public virtual object this[int index]
		|        {
		|            get { return List[index]; }
		|            set { List[index] = value; }
		|        }
		|
		|        public virtual System.Collections.IEnumerator GetEnumerator()
		|        {
		|            Enumerator = List.GetEnumerator();
		|            return (System.Collections.IEnumerator)this;
		|        }
		|
		|        public virtual object Current
		|        {
		|            get { return current; }
		|        }
		|
		|        public virtual bool MoveNext()
		|        {
		|            return Enumerator.MoveNext();
		|        }
		|
		|        public virtual void Reset()
		|        {
		|            Enumerator.Reset();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "DockPaddingEdges" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class DockPaddingEdges
		|    {
		|        public ClDockPaddingEdges dll_obj;
		|        public System.Windows.Forms.ScrollableControl.DockPaddingEdges M_DockPaddingEdges;
		|		
		|        public DockPaddingEdges(osf.DockPaddingEdges p1)
		|        {
		|            M_DockPaddingEdges = p1.M_DockPaddingEdges;
		|            OneScriptForms.AddToHashtable(M_DockPaddingEdges, this);
		|        }
		|
		|        public DockPaddingEdges(System.Windows.Forms.ScrollableControl.DockPaddingEdges p1)
		|        {
		|            M_DockPaddingEdges = p1;
		|            OneScriptForms.AddToHashtable(M_DockPaddingEdges, this);
		|        }
		|
		|        public int All
		|        {
		|            get { return M_DockPaddingEdges.All; }
		|            set { M_DockPaddingEdges.All = value; }
		|        }
		|
		|        public int Bottom
		|        {
		|            get { return M_DockPaddingEdges.Bottom; }
		|            set { M_DockPaddingEdges.Bottom = value; }
		|        }
		|
		|        public int Left
		|        {
		|            get { return M_DockPaddingEdges.Left; }
		|            set { M_DockPaddingEdges.Left = value; }
		|        }
		|
		|        public int Right
		|        {
		|            get { return M_DockPaddingEdges.Right; }
		|            set { M_DockPaddingEdges.Right = value; }
		|        }
		|
		|        public int Top
		|        {
		|            get { return M_DockPaddingEdges.Top; }
		|            set { M_DockPaddingEdges.Top = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "MouseEventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class MouseEventArgs : EventArgs
		|    {
		|        public new ClMouseEventArgs dll_obj;
		|        private int button = -1;
		|        public int X = -1;
		|        public int Y = -1;
		|        public int Clicks = -1;
		|
		|        public int Button
		|        {
		|            get { return (int)button; }
		|            set { button = (int)value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Stream" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Stream
		|    {
		|        public ClStream dll_obj;
		|        public System.IO.Stream M_Stream;
		|
		|        public Stream()
		|        {
		|            M_Stream = (System.IO.Stream)new System.IO.MemoryStream();
		|        }
		|		
		|        public Stream(osf.Stream p1)
		|        {
		|            M_Stream = p1.M_Stream;
		|        }
		|
		|        public Stream(System.IO.Stream p1)
		|        {
		|            M_Stream = p1;
		|        }
		|
		|        public virtual bool CanRead
		|        {
		|            get { return M_Stream.CanRead; }
		|        }
		|
		|        public virtual bool CanSeek
		|        {
		|            get { return M_Stream.CanSeek; }
		|        }
		|
		|        public virtual bool CanWrite
		|        {
		|            get { return M_Stream.CanWrite; }
		|        }
		|
		|        public virtual int Length
		|        {
		|            get { return checked((int)M_Stream.Length); }
		|        }
		|
		|        public virtual void Close()
		|        {
		|            M_Stream.Close();
		|        }
		|
		|        public virtual void Flush()
		|        {
		|            M_Stream.Flush();
		|        }
		|
		|        public virtual int Position
		|        {
		|            get { return checked((int)M_Stream.Position); }
		|            set { M_Stream.Position = (long)value; }
		|        }
		|
		|        public virtual int ReadByte()
		|        {
		|            return M_Stream.ReadByte();
		|        }
		|
		|        public virtual int Seek(int offset, int origin)
		|        {
		|            return checked((int)M_Stream.Seek((long)offset, (System.IO.SeekOrigin)origin));
		|        }
		|
		|        public virtual void SetLength(int value)
		|        {
		|            M_Stream.SetLength((long)value);
		|        }
		|
		|        public virtual void Write(object[] buffer, int offset, int count)
		|        {
		|            byte[] Bytes1 = new byte[checked(count)];
		|            for (int i = 0; i < count; i++)
		|            {
		|                Bytes1[i] = Convert.ToByte(buffer[checked(i + offset)]);
		|            }
		|            M_Stream.Write(Bytes1, 0, count);
		|        }
		|
		|        public virtual void WriteByte(byte value)
		|        {
		|            M_Stream.WriteByte(value);
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ImageFormat" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ImageFormat
		|    {
		|        public ClImageFormat dll_obj;
		|        public System.Drawing.Imaging.ImageFormat M_ImageFormat;
		|
		|        public ImageFormat()
		|        {
		|            M_ImageFormat = new System.Drawing.Imaging.ImageFormat(System.Guid.Empty);
		|        }
		|
		|        public ImageFormat(osf.ImageFormat p1)
		|        {
		|            M_ImageFormat = p1.M_ImageFormat;
		|        }
		|		
		|        public ImageFormat(System.Drawing.Imaging.ImageFormat p1)
		|        {
		|            M_ImageFormat = p1;
		|        }
		|
		|        public osf.ImageFormat Bmp
		|        {
		|            get { return new ImageFormat(System.Drawing.Imaging.ImageFormat.Bmp); }
		|        }
		|
		|        public osf.ImageFormat Gif
		|        {
		|            get { return new ImageFormat(System.Drawing.Imaging.ImageFormat.Gif); }
		|        }
		|
		|        public osf.ImageFormat Icon
		|        {
		|            get { return new ImageFormat(System.Drawing.Imaging.ImageFormat.Icon); }
		|        }
		|
		|        public osf.ImageFormat Jpeg
		|        {
		|            get { return new ImageFormat(System.Drawing.Imaging.ImageFormat.Jpeg); }
		|        }
		|
		|        public osf.ImageFormat Png
		|        {
		|            get { return new ImageFormat(System.Drawing.Imaging.ImageFormat.Png); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Image" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Image
		|    {
		|        public System.Drawing.Image M_Image;
		|		
		|        public Image()
		|        {
		|        }
		|		
		|        public Image(Stream stream)
		|        {
		|            M_Image = System.Drawing.Image.FromStream((System.IO.Stream)stream.M_Stream);
		|        }
		|
		|        public Image(osf.Image p1)
		|        {
		|            M_Image = p1.M_Image;
		|        }
		|		
		|        public Image(System.Drawing.Image p1)
		|        {
		|            M_Image = p1;
		|        }
		|
		|        public int Height
		|        {
		|            get { return M_Image.Height; }
		|        }
		|
		|        public osf.ImageFormat  RawFormat
		|        {
		|            get { return new ImageFormat(M_Image.RawFormat); }
		|        }
		|
		|        public void Save(string p1, ImageFormat p2 = null)
		|        {
		|            if (p2 == null)
		|            {
		|                M_Image.Save(p1);
		|            }
		|            else
		|            {
		|                M_Image.Save(p1, p2.M_ImageFormat);
		|            }
		|        }
		|
		|        public void Save(Stream p1, ImageFormat p2)
		|        {
		|            M_Image.Save(p1.M_Stream, p2.M_ImageFormat);
		|        }
		|
		|        public osf.Size Size
		|        {
		|            get { return new Size(M_Image.Size); }
		|        }
		|
		|        public int Width
		|        {
		|            get { return M_Image.Width; }
		|        }
		|		
		|        public void Dispose()
		|        {
		|            M_Image.Dispose();
		|        }
		|
		|        public object Clone()
		|        {
		|            return M_Image.Clone();
		|        }
		|		
		|        public int PixelFormat
		|        {
		|            get { return (int)M_Image.PixelFormat; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Cursor" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Cursor
		|    {
		|        public ClCursor dll_obj;
		|        public System.Windows.Forms.Cursor M_Cursor;
		|
		|        public Cursor()
		|        {
		|            M_Cursor = System.Windows.Forms.Cursor.Current;
		|            OneScriptForms.AddToHashtable(M_Cursor, this);
		|        }
		|
		|        public Cursor(osf.Cursor p1)
		|        {
		|            M_Cursor = p1.M_Cursor;
		|            OneScriptForms.AddToHashtable(M_Cursor, this);
		|        }
		|
		|        public Cursor(System.Windows.Forms.Cursor p1)
		|        {
		|            M_Cursor = p1;
		|            OneScriptForms.AddToHashtable(M_Cursor, this);
		|        }
		|
		|        public osf.Cursor Current
		|        {
		|            get { return new Cursor(System.Windows.Forms.Cursor.Current); }
		|            set { System.Windows.Forms.Cursor.Current = value.M_Cursor; }
		|        }
		|
		|        public osf.Point Position
		|        {
		|            get { return new Point(System.Windows.Forms.Cursor.Position); }
		|            set { System.Windows.Forms.Cursor.Position = value.M_Point; }
		|        }
		|
		|        public osf.Size Size
		|        {
		|            get { return new Size(M_Cursor.Size); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Rectangle" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Rectangle
		|    {
		|        public ClRectangle dll_obj;
		|        public System.Drawing.Rectangle M_Rectangle;
		|
		|        public Rectangle(int x = 0, int y = 0, int width = 0, int height = 0)
		|        {
		|            M_Rectangle = new System.Drawing.Rectangle();
		|            X = x;
		|            Y = y;
		|            Width = width;
		|            Height = height;
		|        }
		|
		|        public Rectangle(osf.Rectangle p1)
		|        {
		|            M_Rectangle = p1.M_Rectangle;
		|            X = p1.X;
		|            Y = p1.Y;
		|            Width = p1.Width;
		|            Height = p1.Height;
		|        }
		|		
		|        public Rectangle(System.Drawing.Rectangle p1)
		|        {
		|            M_Rectangle = p1;
		|            X = p1.X;
		|            Y = p1.Y;
		|            Width = p1.Width;
		|            Height = p1.Height;
		|        }
		|
		|        public int Bottom
		|        {
		|            get { return M_Rectangle.Bottom; }
		|        }
		|
		|        public osf.Rectangle FromSize(Size Size)
		|        {
		|            return new Rectangle(new System.Drawing.Rectangle(0, 0, Size.Width, Size.Height));
		|        }
		|
		|        public int Height
		|        {
		|            get { return M_Rectangle.Height; }
		|            set { M_Rectangle.Height = value; }
		|        }
		|
		|        public osf.Point Location
		|        {
		|            get { return new Point(M_Rectangle.Location); }
		|            set { M_Rectangle.Location = value.M_Point; }
		|        }
		|
		|        public int Left
		|        {
		|            get { return M_Rectangle.Left; }
		|        }
		|
		|        public int Right
		|        {
		|            get { return M_Rectangle.Right; }
		|        }
		|
		|        public osf.Size Size
		|        {
		|            get { return new Size(M_Rectangle.Size); }
		|            set { M_Rectangle.Size = value.M_Size; }
		|        }
		|
		|        public int Top
		|        {
		|            get { return M_Rectangle.Top; }
		|        }
		|
		|        public int Width
		|        {
		|            get { return M_Rectangle.Width; }
		|            set { M_Rectangle.Width = value; }
		|        }
		|
		|        public int X
		|        {
		|            get { return M_Rectangle.X; }
		|            set { M_Rectangle.X = value; }
		|        }
		|
		|        public int Y
		|        {
		|            get { return M_Rectangle.Y; }
		|            set { M_Rectangle.Y = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Version" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Version
		|    {
		|        public ClVersion dll_obj;
		|        public System.Version M_Version;
		|		
		|        public Version(System.Version p1)
		|        {
		|            M_Version = p1;
		|        }
		|
		|        public new string ToString()
		|        {
		|            return M_Version.ToString();
		|        }
		|
		|        public int Build
		|        {
		|            get { return M_Version.Build; }
		|        }
		|
		|        public int Major
		|        {
		|            get { return M_Version.Major; }
		|        }
		|
		|        public int Minor
		|        {
		|            get { return M_Version.Minor; }
		|        }
		|
		|        public int Revision
		|        {
		|            get { return M_Version.Revision; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Font" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Font
		|    {
		|        public ClFont dll_obj;
		|        public System.Drawing.Font M_Font;
		|
		|        public Font(string name = null, float size = 0.0f, System.Drawing.FontStyle style = System.Drawing.FontStyle.Regular)
		|        {
		|            M_Font = new System.Drawing.Font(name, size, style);
		|            OneScriptForms.AddToHashtable(M_Font, this);
		|        }
		|
		|        public Font(osf.Font p1)
		|        {
		|            M_Font = p1.M_Font;
		|            OneScriptForms.AddToHashtable(M_Font, this);
		|        }
		|
		|        public Font(System.Drawing.Font p1)
		|        {
		|            M_Font = p1;
		|            OneScriptForms.AddToHashtable(M_Font, this);
		|        }
		|
		|        public int Height
		|        {
		|            get { return M_Font.Height; }
		|        }
		|
		|        public string Name
		|        {
		|            get { return M_Font.Name; }
		|        }
		|
		|        public float Size
		|        {
		|            get { return M_Font.Size; }
		|        }
		|
		|        public int Style
		|        {
		|            get { return (int)M_Font.Style; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "EventArgs" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class EventArgs
		|    {
		|        public ClEventArgs dll_obj;
		|        public string EventString = """";
		|        public dynamic Sender;
		|        public dynamic Parameter;
		|
		|        public EventArgs()
		|        {
		|            Sender = null;
		|            Parameter = null;
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Size" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Size
		|    {
		|        public ClSize dll_obj;
		|        public System.Drawing.Size M_Size;
		|
		|        public Size(int width = 0, int height = 0)
		|        {
		|            M_Size = new System.Drawing.Size(width, height);
		|        }
		|
		|        public Size(osf.Size p1)
		|        {
		|            M_Size = p1.M_Size;
		|        }
		|		
		|        public Size(System.Drawing.Size p1)
		|        {
		|            M_Size = p1;
		|        }
		|
		|        public int Height
		|        {
		|            get { return M_Size.Height; }
		|            set { M_Size.Height = value; }
		|        }
		|
		|        public int Width
		|        {
		|            get { return M_Size.Width; }
		|            set { M_Size.Width = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Point" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Point
		|    {
		|        public ClPoint dll_obj;
		|        public System.Drawing.Point M_Point;
		|
		|        public Point(int x = 0, int y = 0)
		|        {
		|            M_Point = new System.Drawing.Point(x, y);
		|        }
		|		
		|        public Point(osf.Point p1)
		|        {
		|            M_Point = p1.M_Point;
		|        }
		|
		|        public Point(System.Drawing.Point p1)
		|        {
		|            M_Point = p1;
		|        }
		|
		|        public int X
		|        {
		|            get { return M_Point.X; }
		|            set { M_Point.X = value; }
		|        }
		|
		|        public int Y
		|        {
		|            get { return M_Point.Y; }
		|            set { M_Point.Y = value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Color" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Color
		|    {
		|        public ClColor dll_obj;
		|        public System.Drawing.Color M_Color;
		|
		|        public Color()
		|        {
		|            M_Color = System.Drawing.Color.Empty;
		|        }
		|
		|        public Color(osf.Color p1)
		|        {
		|            M_Color = p1.M_Color;
		|        }
		|
		|        public Color(System.Drawing.Color p1)
		|        {
		|            M_Color = p1;
		|        }
		|
		|        //Свойства============================================================
		|        public int A
		|        {
		|            get { return M_Color.A; }
		|        }
		|
		|        public osf.Color ActiveBorder
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""ActiveBorder"")); }
		|        }
		|
		|        public osf.Color ActiveCaption
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""ActiveCaption"")); }
		|        }
		|
		|        public osf.Color ActiveCaptionText
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""ActiveCaptionText"")); }
		|        }
		|
		|        public osf.Color AliceBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""AliceBlue"")); }
		|        }
		|
		|        public osf.Color AntiqueWhite
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""AntiqueWhite"")); }
		|        }
		|
		|        public osf.Color AppWorkspace
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""AppWorkspace"")); }
		|        }
		|
		|        public osf.Color Aqua
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Aqua"")); }
		|        }
		|
		|        public osf.Color Aquamarine
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Aquamarine"")); }
		|        }
		|
		|        public osf.Color Azure
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Azure"")); }
		|        }
		|
		|        public int B
		|        {
		|            get { return Convert.ToInt32(M_Color.B); }
		|        }
		|
		|        public osf.Color Beige
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Beige"")); }
		|        }
		|
		|        public osf.Color Bisque
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Bisque"")); }
		|        }
		|
		|        public osf.Color Black
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Black"")); }
		|        }
		|
		|        public osf.Color BlanchedAlmond
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""BlanchedAlmond"")); }
		|        }
		|
		|        public osf.Color Blue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Blue"")); }
		|        }
		|
		|        public osf.Color BlueViolet
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""BlueViolet"")); }
		|        }
		|
		|        public osf.Color Brown
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Brown"")); }
		|        }
		|
		|        public osf.Color BurlyWood
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""BurlyWood"")); }
		|        }
		|
		|        public osf.Color CadetBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""CadetBlue"")); }
		|        }
		|
		|        public osf.Color Chartreuse
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Chartreuse"")); }
		|        }
		|
		|        public osf.Color Chocolate
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Chocolate"")); }
		|        }
		|
		|        public osf.Color Control
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Control"")); }
		|        }
		|
		|        public osf.Color ControlDark
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""ControlDark"")); }
		|        }
		|
		|        public osf.Color ControlDarkDark
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""ControlDarkDark"")); }
		|        }
		|
		|        public osf.Color ControlLight
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""ControlLight"")); }
		|        }
		|
		|        public osf.Color ControlLightLight
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""ControlLightLight"")); }
		|        }
		|
		|        public osf.Color ControlText
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""ControlText"")); }
		|        }
		|
		|        public osf.Color Coral
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Coral"")); }
		|        }
		|
		|        public osf.Color CornflowerBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""CornflowerBlue"")); }
		|        }
		|
		|        public osf.Color Cornsilk
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Cornsilk"")); }
		|        }
		|
		|        public osf.Color Crimson
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Crimson"")); }
		|        }
		|
		|        public osf.Color Cyan
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Cyan"")); }
		|        }
		|
		|        public osf.Color DarkBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkBlue"")); }
		|        }
		|
		|        public osf.Color DarkCyan
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkCyan"")); }
		|        }
		|
		|        public osf.Color DarkGoldenrod
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkGoldenrod"")); }
		|        }
		|
		|        public osf.Color DarkGray
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkGray"")); }
		|        }
		|
		|        public osf.Color DarkGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkGreen"")); }
		|        }
		|
		|        public osf.Color DarkKhaki
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkKhaki"")); }
		|        }
		|
		|        public osf.Color DarkMagenta
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkMagenta"")); }
		|        }
		|
		|        public osf.Color DarkOliveGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkOliveGreen"")); }
		|        }
		|
		|        public osf.Color DarkOrange
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkOrange"")); }
		|        }
		|
		|        public osf.Color DarkOrchid
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkOrchid"")); }
		|        }
		|
		|        public osf.Color DarkRed
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkRed"")); }
		|        }
		|
		|        public osf.Color DarkSalmon
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkSalmon"")); }
		|        }
		|
		|        public osf.Color DarkSeaGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkSeaGreen"")); }
		|        }
		|
		|        public osf.Color DarkSlateBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkSlateBlue"")); }
		|        }
		|
		|        public osf.Color DarkSlateGray
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkSlateGray"")); }
		|        }
		|
		|        public osf.Color DarkTurquoise
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkTurquoise"")); }
		|        }
		|
		|        public osf.Color DarkViolet
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DarkViolet"")); }
		|        }
		|
		|        public osf.Color DeepPink
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DeepPink"")); }
		|        }
		|
		|        public osf.Color DeepSkyBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DeepSkyBlue"")); }
		|        }
		|
		|        public osf.Color Desktop
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Desktop"")); }
		|        }
		|
		|        public osf.Color DimGray
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DimGray"")); }
		|        }
		|
		|        public osf.Color DodgerBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""DodgerBlue"")); }
		|        }
		|
		|        public osf.Color Firebrick
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Firebrick"")); }
		|        }
		|
		|        public osf.Color FloralWhite
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""FloralWhite"")); }
		|        }
		|
		|        public osf.Color ForestGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""ForestGreen"")); }
		|        }
		|
		|        public osf.Color Fuchsia
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Fuchsia"")); }
		|        }
		|
		|        public int G
		|        {
		|            get { return Convert.ToInt32(M_Color.G); }
		|        }
		|
		|        public osf.Color Gainsboro
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Gainsboro"")); }
		|        }
		|
		|        public osf.Color GhostWhite
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""GhostWhite"")); }
		|        }
		|
		|        public osf.Color Gold
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Gold"")); }
		|        }
		|
		|        public osf.Color Goldenrod
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Goldenrod"")); }
		|        }
		|
		|        public osf.Color Gray
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Gray"")); }
		|        }
		|
		|        public osf.Color GrayText
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""GrayText"")); }
		|        }
		|
		|        public osf.Color Green
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Green"")); }
		|        }
		|
		|        public osf.Color GreenYellow
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""GreenYellow"")); }
		|        }
		|
		|        public osf.Color Highlight
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Highlight"")); }
		|        }
		|
		|        public osf.Color HighlightText
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""HighlightText"")); }
		|        }
		|
		|        public osf.Color Honeydew
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Honeydew"")); }
		|        }
		|
		|        public osf.Color HotPink
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""HotPink"")); }
		|        }
		|
		|        public osf.Color HotTrack
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""HotTrack"")); }
		|        }
		|
		|        public osf.Color InactiveBorder
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""InactiveBorder"")); }
		|        }
		|
		|        public osf.Color InactiveCaption
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""InactiveCaption"")); }
		|        }
		|
		|        public osf.Color InactiveCaptionText
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""InactiveCaptionText"")); }
		|        }
		|
		|        public osf.Color IndianRed
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""IndianRed"")); }
		|        }
		|
		|        public osf.Color Indigo
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Indigo"")); }
		|        }
		|
		|        public osf.Color Info
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Info"")); }
		|        }
		|
		|        public osf.Color InfoText
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""InfoText"")); }
		|        }
		|
		|        public bool IsEmpty
		|        {
		|            get { return M_Color.IsEmpty; }
		|        }
		|
		|        public osf.Color Ivory
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Ivory"")); }
		|        }
		|
		|        public osf.Color Khaki
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Khaki"")); }
		|        }
		|
		|        public osf.Color Lavender
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Lavender"")); }
		|        }
		|
		|        public osf.Color LavenderBlush
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LavenderBlush"")); }
		|        }
		|
		|        public osf.Color LawnGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LawnGreen"")); }
		|        }
		|
		|        public osf.Color LemonChiffon
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LemonChiffon"")); }
		|        }
		|
		|        public osf.Color LightBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightBlue"")); }
		|        }
		|
		|        public osf.Color LightCoral
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightCoral"")); }
		|        }
		|
		|        public osf.Color LightCyan
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightCyan"")); }
		|        }
		|
		|        public osf.Color LightGoldenrodYellow
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightGoldenrodYellow"")); }
		|        }
		|
		|        public osf.Color LightGray
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightGray"")); }
		|        }
		|
		|        public osf.Color LightGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightGreen"")); }
		|        }
		|
		|        public osf.Color LightPink
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightPink"")); }
		|        }
		|
		|        public osf.Color LightSalmon
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightSalmon"")); }
		|        }
		|
		|        public osf.Color LightSeaGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightSeaGreen"")); }
		|        }
		|
		|        public osf.Color LightSkyBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightSkyBlue"")); }
		|        }
		|
		|        public osf.Color LightSlateGray
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightSlateGray"")); }
		|        }
		|
		|        public osf.Color LightSteelBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightSteelBlue"")); }
		|        }
		|
		|        public osf.Color LightYellow
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LightYellow"")); }
		|        }
		|
		|        public osf.Color Lime
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Lime"")); }
		|        }
		|
		|        public osf.Color LimeGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""LimeGreen"")); }
		|        }
		|
		|        public osf.Color Linen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Linen"")); }
		|        }
		|
		|        public osf.Color Magenta
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Magenta"")); }
		|        }
		|
		|        public osf.Color Maroon
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Maroon"")); }
		|        }
		|
		|        public osf.Color MediumAquamarine
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MediumAquamarine"")); }
		|        }
		|
		|        public osf.Color MediumBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MediumBlue"")); }
		|        }
		|
		|        public osf.Color MediumOrchid
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MediumOrchid"")); }
		|        }
		|
		|        public osf.Color MediumPurple
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MediumPurple"")); }
		|        }
		|
		|        public osf.Color MediumSeaGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MediumSeaGreen"")); }
		|        }
		|
		|        public osf.Color MediumSlateBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MediumSlateBlue"")); }
		|        }
		|
		|        public osf.Color MediumSpringGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MediumSpringGreen"")); }
		|        }
		|
		|        public osf.Color MediumTurquoise
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MediumTurquoise"")); }
		|        }
		|
		|        public osf.Color MediumVioletRed
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MediumVioletRed"")); }
		|        }
		|
		|        public osf.Color Menu
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Menu"")); }
		|        }
		|
		|        public osf.Color MenuText
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MenuText"")); }
		|        }
		|
		|        public osf.Color MidnightBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MidnightBlue"")); }
		|        }
		|
		|        public osf.Color MintCream
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MintCream"")); }
		|        }
		|
		|        public osf.Color MistyRose
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""MistyRose"")); }
		|        }
		|
		|        public osf.Color Moccasin
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Moccasin"")); }
		|        }
		|
		|        public string Name
		|        {
		|            get { return M_Color.Name; }
		|        }
		|
		|        public osf.Color NavajoWhite
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""NavajoWhite"")); }
		|        }
		|
		|        public osf.Color Navy
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Navy"")); }
		|        }
		|
		|        public osf.Color OldLace
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""OldLace"")); }
		|        }
		|
		|        public osf.Color Olive
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Olive"")); }
		|        }
		|
		|        public osf.Color OliveDrab
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""OliveDrab"")); }
		|        }
		|
		|        public osf.Color Orange
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Orange"")); }
		|        }
		|
		|        public osf.Color OrangeRed
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""OrangeRed"")); }
		|        }
		|
		|        public osf.Color Orchid
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Orchid"")); }
		|        }
		|
		|        public osf.Color PaleGoldenrod
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""PaleGoldenrod"")); }
		|        }
		|
		|        public osf.Color PaleGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""PaleGreen"")); }
		|        }
		|
		|        public osf.Color PaleTurquoise
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""PaleTurquoise"")); }
		|        }
		|
		|        public osf.Color PaleVioletRed
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""PaleVioletRed"")); }
		|        }
		|
		|        public osf.Color PapayaWhip
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""PapayaWhip"")); }
		|        }
		|
		|        public osf.Color PeachPuff
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""PeachPuff"")); }
		|        }
		|
		|        public osf.Color Peru
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Peru"")); }
		|        }
		|
		|        public osf.Color Pink
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Pink"")); }
		|        }
		|
		|        public osf.Color Plum
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Plum"")); }
		|        }
		|
		|        public osf.Color PowderBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""PowderBlue"")); }
		|        }
		|
		|        public osf.Color Purple
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Purple"")); }
		|        }
		|
		|        public int R
		|        {
		|            get { return Convert.ToInt32(M_Color.R); }
		|        }
		|
		|        public osf.Color Red
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Red"")); }
		|        }
		|
		|        public osf.Color RosyBrown
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""RosyBrown"")); }
		|        }
		|
		|        public osf.Color RoyalBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""RoyalBlue"")); }
		|        }
		|
		|        public osf.Color SaddleBrown
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""SaddleBrown"")); }
		|        }
		|
		|        public osf.Color Salmon
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Salmon"")); }
		|        }
		|
		|        public osf.Color SandyBrown
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""SandyBrown"")); }
		|        }
		|
		|        public osf.Color ScrollBar
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""ScrollBar"")); }
		|        }
		|
		|        public osf.Color SeaGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""SeaGreen"")); }
		|        }
		|
		|        public osf.Color SeaShell
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""SeaShell"")); }
		|        }
		|
		|        public osf.Color Sienna
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Sienna"")); }
		|        }
		|
		|        public osf.Color Silver
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Silver"")); }
		|        }
		|
		|        public osf.Color SkyBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""SkyBlue"")); }
		|        }
		|
		|        public osf.Color SlateBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""SlateBlue"")); }
		|        }
		|
		|        public osf.Color SlateGray
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""SlateGray"")); }
		|        }
		|
		|        public osf.Color Snow
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Snow"")); }
		|        }
		|
		|        public osf.Color SpringGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""SpringGreen"")); }
		|        }
		|
		|        public osf.Color SteelBlue
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""SteelBlue"")); }
		|        }
		|
		|        public osf.Color Tan
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Tan"")); }
		|        }
		|
		|        public osf.Color Teal
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Teal"")); }
		|        }
		|
		|        public osf.Color Thistle
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Thistle"")); }
		|        }
		|
		|        public osf.Color Tomato
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Tomato"")); }
		|        }
		|
		|        public osf.Color Transparent
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Transparent"")); }
		|        }
		|
		|        public osf.Color Turquoise
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Turquoise"")); }
		|        }
		|
		|        public osf.Color Violet
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Violet"")); }
		|        }
		|
		|        public osf.Color Wheat
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Wheat"")); }
		|        }
		|
		|        public osf.Color White
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""White"")); }
		|        }
		|
		|        public osf.Color WhiteSmoke
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""WhiteSmoke"")); }
		|        }
		|
		|        public osf.Color Window
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Window"")); }
		|        }
		|
		|        public osf.Color WindowFrame
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""WindowFrame"")); }
		|        }
		|
		|        public osf.Color WindowText
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""WindowText"")); }
		|        }
		|
		|        public osf.Color Yellow
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""Yellow"")); }
		|        }
		|
		|        public osf.Color YellowGreen
		|        {
		|            get { return new Color(System.Drawing.Color.FromName(""YellowGreen"")); }
		|        }
		|
		|        //Методы============================================================
		|        public osf.Color FromArgb(int a, int r, int g, int b)
		|        {
		|            return new Color(System.Drawing.Color.FromArgb(a, r, g, b));
		|        }
		|
		|        public osf.Color FromName(string p1)
		|        {
		|            return new Color(System.Drawing.Color.FromName(p1));
		|        }
		|
		|        public osf.Color FromRgb(int r, int g, int b)
		|        {
		|            return new Color(System.Drawing.Color.FromArgb(r, g, b));
		|        }
		|
		|        public int ToArgb()
		|        {
		|            return M_Color.ToArgb();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Button" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ButtonEx : System.Windows.Forms.Button
		|    {
		|        public osf.Button M_Object;
		|    }//endClass
		|
		|    public class Button : ButtonBase
		|    {
		|        public ClButton dll_obj;
		|        public ButtonEx M_Button;
		|
		|        public Button()
		|        {
		|            M_Button = new ButtonEx();
		|            M_Button.M_Object = this;
		|            base.M_ButtonBase = M_Button;
		|        }
		|
		|        public Button(osf.Button p1)
		|        {
		|            M_Button = p1.M_Button;
		|            M_Button.M_Object = this;
		|            base.M_ButtonBase = M_Button;
		|        }
		|
		|        public Button(System.Windows.Forms.Button p1)
		|        {
		|            M_Button = (ButtonEx)p1;
		|            M_Button.M_Object = this;
		|            base.M_ButtonBase = M_Button;
		|        }
		|
		|        public int DialogResult
		|        {
		|            get { return (int)M_Button.DialogResult; }
		|            set { M_Button.DialogResult = (System.Windows.Forms.DialogResult)value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ScrollableControl" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ScrollableControl : Control
		|    {
		|        private System.Windows.Forms.ScrollableControl m_ScrollableControl;
		|
		|        public System.Windows.Forms.ScrollableControl M_ScrollableControl
		|        {
		|            get { return m_ScrollableControl; }
		|            set
		|            {
		|                m_ScrollableControl = value;
		|                base.M_Control = m_ScrollableControl;
		|            }
		|        }
		|		
		|        public bool AutoScroll
		|        {
		|            get { return m_ScrollableControl.AutoScroll; }
		|            set { m_ScrollableControl.AutoScroll = value; }
		|        }
		|
		|        public osf.Size AutoScrollMargin
		|        {
		|            get { return new Size(m_ScrollableControl.AutoScrollMargin); }
		|            set { m_ScrollableControl.AutoScrollMargin = value.M_Size; }
		|        }
		|
		|        public osf.DockPaddingEdges DockPadding
		|        {
		|            get { return new DockPaddingEdges(m_ScrollableControl.DockPadding); }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Form" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class FormEx : System.Windows.Forms.Form
		|    {
		|        public osf.Form M_Object;
		|    }//endClass
		|
		|    public class Form : ContainerControl
		|    {
		|        public ClForm dll_obj;
		|        public FormEx M_Form;
		|        public string Closed;
		|        private string activated;
		|        private string deactivate;
		|        private string load;
		|        private string resize;
		|        private string mdiChildActivate;
		|
		|        [DllImport(""user32"", CharSet = CharSet.Ansi, SetLastError = true)] public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
		|        [DllImport(""User32"", EntryPoint = ""GetKeyState"", CharSet = CharSet.Ansi, SetLastError = true)] public static extern short UserGetKeyState(int nVirtKey);
		|
		|        public Form()
		|        {
		|            M_Form = new FormEx();
		|            M_Form.M_Object = this;
		|            base.M_ContainerControl = M_Form;
		|            M_Form.FormClosed += M_Form_FormClosed;
		|            Closed = """";
		|            M_Form.Load += M_Form_Load;
		|            Load = """";
		|            M_Form.Deactivate += M_Form_Deactivate;
		|            Deactivate = """";
		|            M_Form.Activated += M_Form_Activated;
		|            Activated = """";
		|            M_Form.FormClosing += M_Form_FormClosing;
		|            Closing = """";
		|        }
		|
		|        public Form(osf.Form p1)
		|        {
		|            M_Form = p1.M_Form;
		|            M_Form.M_Object = this;
		|            base.M_ContainerControl = M_Form;
		|            M_Form.FormClosed += M_Form_FormClosed;
		|            Closed = """";
		|            M_Form.Load += M_Form_Load;
		|            Load = """";
		|            M_Form.Deactivate += M_Form_Deactivate;
		|            Deactivate = """";
		|            M_Form.Activated += M_Form_Activated;
		|            Activated = """";
		|            M_Form.FormClosing += M_Form_FormClosing;
		|            Closing = """";
		|        }
		|
		|        public Form(System.Windows.Forms.Form p1)
		|        {
		|            M_Form = (FormEx)p1;
		|            M_Form.M_Object = this;
		|            base.M_ContainerControl = M_Form;
		|            M_Form.FormClosed += M_Form_FormClosed;
		|            Closed = """";
		|            M_Form.Load += M_Form_Load;
		|            Load = """";
		|            M_Form.Deactivate += M_Form_Deactivate;
		|            Deactivate = """";
		|            M_Form.Activated += M_Form_Activated;
		|            Activated = """";
		|            M_Form.FormClosing += M_Form_FormClosing;
		|            Closing = """";
		|        }
		|		
		|        public void M_Form_FormClosing(object sender, System.Windows.Forms.FormClosingEventArgs e)
		|        {
		|            if (Closing.Length > 0)
		|            {
		|                FormClosingEventArgs FormClosingEventArgs1 = new FormClosingEventArgs(e.CloseReason, e.Cancel);
		|                FormClosingEventArgs1.EventString = Closing;
		|                FormClosingEventArgs1.Sender = this;
		|                FormClosingEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.FormClosing);
		|                FormClosingEventArgs1.Cancel = e.Cancel;
		|                FormClosingEventArgs1.CloseReason = (int)e.CloseReason;
		|                ClFormClosingEventArgs ClFormClosingEventArgs1 = new ClFormClosingEventArgs(FormClosingEventArgs1);
		|                OneScriptForms.Event = ClFormClosingEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.FormClosing);
		|                e.Cancel = FormClosingEventArgs1.Cancel;
		|            }
		|        }
		|		
		|        private void M_Form_Activated(object sender, System.EventArgs e)
		|        {
		|            if (Activated.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Activated;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Activated);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Activated);
		|            }
		|        }
		|		
		|        private void M_Form_Deactivate(object sender, System.EventArgs e)
		|        {
		|            if (Deactivate.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Deactivate;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Deactivate);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Deactivate);
		|            }
		|        }
		|
		|        private void M_Form_Load(object sender, System.EventArgs e)
		|        {
		|            if (Load.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Load;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Load);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Load);
		|            }
		|        }
		|
		|        private void M_Form_FormClosed(object sender, FormClosedEventArgs e)
		|        {
		|            if (Closed.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Closed;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.FormClosed);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.FormClosed);
		|            }
		|
		|            if (OneScriptForms.useMainForm && sender == OneScriptForms.FirstForm.Base_obj.M_Form)
		|            {
		|                OneScriptForms.goOn = false;
		|            }
		|
		|            OneScriptForms.formsCollection.Remove(((dynamic)sender).M_Object.dll_obj);
		|            if (OneScriptForms.formsCollection.CountForm == 0)
		|            {
		|                OneScriptForms.goOn = false;
		|            }
		|        }
		|
		|        public osf.Form ActiveForm
		|        {
		|            get
		|            {
		|                if (System.Windows.Forms.Form.ActiveForm != null)
		|                {
		|                    return (osf.Form)((FormEx)System.Windows.Forms.Form.ActiveForm).M_Object;
		|                }
		|                return null;
		|            }
		|        }
		|
		|        public void Activate()
		|        {
		|            M_Form.Activate();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public osf.Control AcceptButton
		|        {
		|            get
		|            {
		|                if (M_Form.AcceptButton != null)
		|                {
		|                    return (osf.Control)((dynamic)M_Form.AcceptButton).M_Object;
		|                }
		|                return null;
		|            }
		|            set { M_Form.AcceptButton = (IButtonControl)value.M_Control; }
		|        }
		|
		|        public string Activated
		|        {
		|            get { return activated; }
		|            set { activated = value; }
		|        }
		|
		|        public osf.Form ActiveMdiChild
		|        {
		|            get
		|            {
		|                if (M_Form.ActiveMdiChild != null)
		|                {
		|                    return (osf.Form)((dynamic)M_Form.ActiveMdiChild).M_Object;
		|                }
		|                return null;
		|            }
		|        }
		|
		|        public osf.Size AutoScaleBaseSize
		|        {
		|            get { return new Size(M_Form.AutoScaleBaseSize); }
		|            set
		|            {
		|                M_Form.AutoScaleBaseSize = value.M_Size;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Control CancelButton
		|        {
		|            get
		|            {
		|                if (M_Form.CancelButton != null)
		|                {
		|                    return (osf.Control)((dynamic)M_Form.CancelButton).M_Object;
		|                }
		|                return null;
		|            }
		|            set
		|            {
		|                M_Form.CancelButton = (IButtonControl)value.M_Control;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void Close()
		|        {
		|            M_Form.Close();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public string Closing;
		|
		|        public bool ControlBox
		|        {
		|            get { return M_Form.ControlBox; }
		|            set
		|            {
		|                M_Form.ControlBox = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string Deactivate
		|        {
		|            get { return deactivate; }
		|            set
		|            {
		|                deactivate = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Point DesktopLocation
		|        {
		|            get { return new Point(M_Form.DesktopLocation.X, M_Form.DesktopLocation.Y); }
		|            set
		|            {
		|                M_Form.DesktopLocation = value.M_Point;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int DialogResult
		|        {
		|            get { return (int)M_Form.DialogResult; }
		|            set
		|            {
		|                M_Form.DialogResult = (System.Windows.Forms.DialogResult)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int FormBorderStyle
		|        {
		|            get { return (int)M_Form.FormBorderStyle; }
		|            set
		|            {
		|                M_Form.FormBorderStyle = (System.Windows.Forms.FormBorderStyle)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int GetKeyState(Keys Key)
		|        {
		|            return (int)UserGetKeyState((int)Key);
		|        }
		|
		|        public Icon Icon
		|        {
		|            get { return new Icon(M_Form.Icon); }
		|            set
		|            {
		|                M_Form.Icon = (System.Drawing.Icon)value.M_Icon;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool IsMdiChild
		|        {
		|            get { return M_Form.IsMdiChild; }
		|        }
		|
		|        public bool IsMdiContainer
		|        {
		|            get { return M_Form.IsMdiContainer; }
		|            set
		|            {
		|                M_Form.IsMdiContainer = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool KeyPreview
		|        {
		|            get { return M_Form.KeyPreview; }
		|            set
		|            {
		|                M_Form.KeyPreview = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public void LayoutMdi(MdiLayout value)
		|        {
		|            M_Form.LayoutMdi((System.Windows.Forms.MdiLayout)value);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public new int Left
		|        {
		|            get { return M_Form.Left; }
		|            set
		|            {
		|                M_Form.Left = value;
		|                M_Form.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string Load
		|        {
		|            get { return load; }
		|            set
		|            {
		|                load = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool MaximizeBox
		|        {
		|            get { return M_Form.MaximizeBox; }
		|            set
		|            {
		|                M_Form.MaximizeBox = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Size MaximumSize
		|        {
		|            get { return new Size(M_Form.MaximumSize); }
		|            set
		|            {
		|                M_Form.MaximumSize = value.M_Size;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string MdiChildActivate
		|        {
		|            get { return mdiChildActivate; }
		|            set
		|            {
		|                mdiChildActivate = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.MainMenu Menu
		|        {
		|            get { return ((MainMenuEx)M_Form.Menu).M_Object; }
		|            set
		|            {
		|                M_Form.Menu = (System.Windows.Forms.MainMenu)value.M_MainMenu;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool MinimizeBox
		|        {
		|            get { return M_Form.MinimizeBox; }
		|            set
		|            {
		|                M_Form.MinimizeBox = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Size MinimumSize
		|        {
		|            get { return new Size(M_Form.MinimumSize); }
		|            set
		|            {
		|                M_Form.MinimumSize = value.M_Size;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Form Owner
		|        {
		|            get
		|            {
		|                if (M_Form.Owner != null)
		|                {
		|                    return (osf.Form)((FormEx)M_Form.Owner).M_Object;
		|                }
		|                return null;
		|            }
		|            set
		|            {
		|                M_Form.Owner = (System.Windows.Forms.Form)value.M_Form;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public new object Parent
		|        {
		|            get
		|            {
		|                if (M_Form.Owner != null)
		|                {
		|                    return ((FormEx)M_Form.Owner).M_Object;
		|                }
		|                return null;
		|            }
		|            set
		|            {
		|                Form.SetParent(M_Form.Handle, ((Control)value).M_Control.Handle);
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public string Resize
		|        {
		|            get { return resize; }
		|            set
		|            {
		|                resize = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int ShowDialog()
		|        {
		|            return (int)(System.Windows.Forms.DialogResult)M_Form.ShowDialog();
		|        }
		|
		|        public bool ShowInTaskbar
		|        {
		|            get { return M_Form.ShowInTaskbar; }
		|            set
		|            {
		|                M_Form.ShowInTaskbar = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int StartPosition
		|        {
		|            get { return (int)M_Form.StartPosition; }
		|            set
		|            {
		|                M_Form.StartPosition = (System.Windows.Forms.FormStartPosition)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public new int Top
		|        {
		|            get { return M_Form.Top; }
		|            set
		|            {
		|                M_Form.Top = value;
		|                M_Form.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public bool TopMost
		|        {
		|            get { return M_Form.TopMost; }
		|            set
		|            {
		|                M_Form.TopMost = value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Color TransparencyKey
		|        {
		|            get { return new Color(M_Form.TransparencyKey); }
		|            set
		|            {
		|                M_Form.TransparencyKey = value.M_Color;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int WindowState
		|        {
		|            get { return (int)M_Form.WindowState; }
		|            set
		|            {
		|                M_Form.WindowState = (System.Windows.Forms.FormWindowState)value;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Control" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Control : Component
		|    {
		|        private System.Windows.Forms.Control m_Control;
		|		
		|        [DllImport(""user32"", EntryPoint = ""SendMessageA"", CharSet = CharSet.Auto, SetLastError = true)] public static extern bool SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);
		|		
		|        public System.Windows.Forms.Control M_Control
		|        {
		|            get { return m_Control; }
		|            set
		|            {
		|                m_Control = value;
		|                base.M_Component = m_Control;
		|                m_Control.DoubleClick += m_Control_DoubleClick;
		|                DoubleClick = """";
		|                m_Control.KeyUp += m_Control_KeyUp;
		|                KeyUp = """";
		|                m_Control.KeyDown += m_Control_KeyDown;
		|                KeyDown = """";
		|                m_Control.KeyPress += m_Control_KeyPress;
		|                KeyPress = """";
		|                m_Control.MouseEnter += m_Control_MouseEnter;
		|                MouseEnter = """";
		|                m_Control.MouseLeave += m_Control_MouseLeave;
		|                MouseLeave = """";
		|                m_Control.Click += m_Control_Click;
		|                Click = """";
		|                m_Control.LocationChanged += m_Control_LocationChanged;
		|                LocationChanged = """";
		|                m_Control.Enter += m_Control_Enter;
		|                Enter = """";
		|                m_Control.MouseHover += m_Control_MouseHover;
		|                MouseHover = """";
		|                m_Control.MouseDown += m_Control_MouseDown;
		|                MouseDown = """";
		|                m_Control.MouseUp += m_Control_MouseUp;
		|                MouseUp = """";
		|                m_Control.Move += m_Control_Move;
		|                Move = """";
		|                m_Control.MouseMove += m_Control_MouseMove;
		|                MouseMove = """";
		|                m_Control.Paint += m_Control_Paint;
		|                Paint = """";
		|                m_Control.LostFocus += m_Control_LostFocus;
		|                LostFocus = """";
		|                m_Control.Leave += m_Control_Leave;
		|                Leave = """";
		|                m_Control.SizeChanged += m_Control_SizeChanged;
		|                SizeChanged = """";
		|                m_Control.TextChanged += m_Control_TextChanged;
		|                TextChanged = """";
		|                m_Control.ControlAdded += m_Control_ControlAdded;
		|                ControlAdded = """";
		|                m_Control.ControlRemoved += m_Control_ControlRemoved;
		|                ControlRemoved = """";
		|            }//endset
		|        }
		|		
		|        public Control(System.Windows.Forms.Control control = null)
		|        {
		|        }
		|        
		|        private void m_Control_DoubleClick(object sender, System.EventArgs e)
		|        {
		|            if (DoubleClick.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = DoubleClick;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.DoubleClick);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.DoubleClick);
		|            }
		|        }
		|        
		|        private void m_Control_KeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
		|        {
		|            if (KeyUp.Length > 0)
		|            {
		|                KeyEventArgs KeyEventArgs1 = new KeyEventArgs();
		|                KeyEventArgs1.EventString = KeyUp;
		|                KeyEventArgs1.Sender = this;
		|                KeyEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.KeyUp);
		|                KeyEventArgs1.Alt = e.Alt;
		|                KeyEventArgs1.Control = e.Control;
		|                KeyEventArgs1.KeyCode = (int)e.KeyCode;
		|                KeyEventArgs1.Modifiers = (int)e.Modifiers;
		|                KeyEventArgs1.Shift = e.Shift;
		|                ClKeyEventArgs ClKeyEventArgs1 = new ClKeyEventArgs(KeyEventArgs1);
		|                OneScriptForms.Event = ClKeyEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.KeyUp);
		|            }
		|        }
		|        
		|        private void m_Control_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
		|        {
		|            if (KeyDown.Length > 0)
		|            {
		|                KeyEventArgs KeyEventArgs1 = new KeyEventArgs();
		|                KeyEventArgs1.EventString = KeyDown;
		|                KeyEventArgs1.Sender = this;
		|                KeyEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.KeyDown);
		|                KeyEventArgs1.Alt = e.Alt;
		|                KeyEventArgs1.Control = e.Control;
		|                KeyEventArgs1.KeyCode = (int)e.KeyCode;
		|                KeyEventArgs1.Modifiers = (int)e.Modifiers;
		|                KeyEventArgs1.Shift = e.Shift;
		|                ClKeyEventArgs ClKeyEventArgs1 = new ClKeyEventArgs(KeyEventArgs1);
		|                OneScriptForms.Event = ClKeyEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.KeyDown);
		|            }
		|        }
		|        
		|        private void m_Control_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
		|        {
		|            if (KeyPress.Length > 0)
		|            {
		|                KeyPressEventArgs KeyPressEventArgs1 = new KeyPressEventArgs();
		|                KeyPressEventArgs1.EventString = KeyPress;
		|                KeyPressEventArgs1.Sender = this;
		|                KeyPressEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.KeyPress);
		|                KeyPressEventArgs1.KeyChar = Convert.ToString(e.KeyChar);
		|                ClKeyPressEventArgs ClKeyPressEventArgs1 = new ClKeyPressEventArgs(KeyPressEventArgs1);
		|                OneScriptForms.Event = ClKeyPressEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.KeyPress);
		|            }
		|        }
		|        
		|        private void m_Control_MouseEnter(object sender, System.EventArgs e)
		|        {
		|            if (MouseEnter.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = MouseEnter;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.MouseEnter);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.MouseEnter);
		|            }
		|        }
		|        
		|        private void m_Control_MouseLeave(object sender, System.EventArgs e)
		|        {
		|            if (MouseLeave.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = MouseLeave;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.MouseLeave);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.MouseLeave);
		|            }
		|        }
		|        
		|        private void m_Control_Click(object sender, System.EventArgs e)
		|        {
		|            if (Click.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Click;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Click);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Click);
		|            }
		|        }
		|        
		|        private void m_Control_LocationChanged(object sender, System.EventArgs e)
		|        {
		|            if (LocationChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = LocationChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.LocationChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.LocationChanged);
		|            }
		|        }
		|        
		|        private void m_Control_Enter(object sender, System.EventArgs e)
		|        {
		|            if (Enter.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Enter;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Enter);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Enter);
		|            }
		|        }
		|        
		|        private void m_Control_MouseHover(object sender, System.EventArgs e)
		|        {
		|            if (MouseHover.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = MouseHover;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.MouseHover);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.MouseHover);
		|            }
		|        }
		|        
		|        private void m_Control_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
		|        {
		|            if (MouseDown.Length > 0)
		|            {
		|                MouseEventArgs MouseEventArgs1 = new MouseEventArgs();
		|                MouseEventArgs1.EventString = MouseDown;
		|                MouseEventArgs1.Sender = this;
		|                MouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.MouseDown);
		|                MouseEventArgs1.Clicks = e.Clicks;
		|                MouseEventArgs1.Button = (int)e.Button;
		|                MouseEventArgs1.X = e.X;
		|                MouseEventArgs1.Y = e.Y;
		|                ClMouseEventArgs ClMouseEventArgs1 = new ClMouseEventArgs(MouseEventArgs1);
		|                OneScriptForms.Event = ClMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.MouseDown);
		|            }
		|        }
		|        
		|        private void m_Control_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
		|        {
		|            if (MouseUp.Length > 0)
		|            {
		|                MouseEventArgs MouseEventArgs1 = new MouseEventArgs();
		|                MouseEventArgs1.EventString = MouseUp;
		|                MouseEventArgs1.Sender = this;
		|                MouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.MouseUp);
		|                MouseEventArgs1.Clicks = e.Clicks;
		|                MouseEventArgs1.Button = (int)e.Button;
		|                MouseEventArgs1.X = e.X;
		|                MouseEventArgs1.Y = e.Y;
		|                ClMouseEventArgs ClMouseEventArgs1 = new ClMouseEventArgs(MouseEventArgs1);
		|                OneScriptForms.Event = ClMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.MouseUp);
		|            }
		|        }
		|        
		|        private void m_Control_Move(object sender, System.EventArgs e)
		|        {
		|            if (Move.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Move;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Move);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Move);
		|            }
		|        }
		|        
		|        private void m_Control_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
		|        {
		|            if (MouseMove.Length > 0)
		|            {
		|                MouseEventArgs MouseEventArgs1 = new MouseEventArgs();
		|                MouseEventArgs1.EventString = MouseMove;
		|                MouseEventArgs1.Sender = this;
		|                MouseEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.MouseMove);
		|                MouseEventArgs1.Clicks = e.Clicks;
		|                MouseEventArgs1.Button = (int)e.Button;
		|                MouseEventArgs1.X = e.X;
		|                MouseEventArgs1.Y = e.Y;
		|                ClMouseEventArgs ClMouseEventArgs1 = new ClMouseEventArgs(MouseEventArgs1);
		|                OneScriptForms.Event = ClMouseEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.MouseMove);
		|            }
		|        }
		|        
		|        private void m_Control_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
		|        {
		|            if (Paint.Length > 0)
		|            {
		|                PaintEventArgs PaintEventArgs1 = new PaintEventArgs();
		|                PaintEventArgs1.EventString = Paint;
		|                PaintEventArgs1.Sender = this;
		|                PaintEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Paint);
		|                PaintEventArgs1.Graphics = new Graphics(e.Graphics);
		|                PaintEventArgs1.ClipRectangle = new Rectangle(e.ClipRectangle);
		|                ClPaintEventArgs ClPaintEventArgs1 = new ClPaintEventArgs(PaintEventArgs1);
		|                OneScriptForms.Event = ClPaintEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Paint);
		|            }
		|        }
		|        
		|        private void m_Control_LostFocus(object sender, System.EventArgs e)
		|        {
		|            if (LostFocus.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = LostFocus;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.LostFocus);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.LostFocus);
		|            }
		|        }
		|        
		|        private void m_Control_Leave(object sender, System.EventArgs e)
		|        {
		|            if (Leave.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = Leave;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.Leave);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.Leave);
		|            }
		|        }
		|        
		|        private void m_Control_SizeChanged(object sender, System.EventArgs e)
		|        {
		|            if (SizeChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = SizeChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.SizeChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.SizeChanged);
		|            }
		|        }
		|        
		|        private void m_Control_TextChanged(object sender, System.EventArgs e)
		|        {
		|            if (TextChanged.Length > 0)
		|            {
		|                EventArgs EventArgs1 = new EventArgs();
		|                EventArgs1.EventString = TextChanged;
		|                EventArgs1.Sender = this;
		|                EventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.TextChanged);
		|                ClEventArgs ClEventArgs1 = new ClEventArgs(EventArgs1);
		|                OneScriptForms.Event = ClEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.TextChanged);
		|            }
		|        }
		|        
		|        private void m_Control_ControlAdded(object sender, System.Windows.Forms.ControlEventArgs e)
		|        {
		|            if (ControlAdded.Length > 0)
		|            {
		|                ControlEventArgs ControlEventArgs1 = new ControlEventArgs();
		|                ControlEventArgs1.EventString = ControlAdded;
		|                ControlEventArgs1.Sender = this;
		|                ControlEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.ControlAdded);
		|                ControlEventArgs1.Control = e.Control;
		|                ClControlEventArgs ClControlEventArgs1 = new ClControlEventArgs(ControlEventArgs1);
		|                OneScriptForms.Event = ClControlEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.ControlAdded);
		|            }
		|        }
		|        
		|        private void m_Control_ControlRemoved(object sender, System.Windows.Forms.ControlEventArgs e)
		|        {
		|            if (ControlRemoved.Length > 0)
		|            {
		|                ControlEventArgs ControlEventArgs1 = new ControlEventArgs();
		|                ControlEventArgs1.EventString = ControlRemoved;
		|                ControlEventArgs1.Sender = this;
		|                ControlEventArgs1.Parameter = OneScriptForms.GetEventParameter(((dynamic)sender).M_Object.dll_obj.ControlRemoved);
		|                ControlEventArgs1.Control = e.Control;
		|                ClControlEventArgs ClControlEventArgs1 = new ClControlEventArgs(ControlEventArgs1);
		|                OneScriptForms.Event = ClControlEventArgs1;
		|                OneScriptForms.ExecuteEvent(((dynamic)sender).M_Object.dll_obj.ControlRemoved);
		|            }
		|        }
		|
		|        //Свойства============================================================
		|        public string ProductVersion
		|        {
		|            get { return M_Control.ProductVersion; }
		|        }
		|
		|        public int Top
		|        {
		|            get { return M_Control.Top; }
		|            set { M_Control.Top = value; }
		|        }
		|
		|        public int Height
		|        {
		|            get { return M_Control.Height; }
		|            set { M_Control.Height = value; }
		|        }
		|
		|        public int FontHeight
		|        {
		|            get { return Convert.ToInt32(M_Control.Font.Height); }
		|        }
		|
		|        public osf.Rectangle Bounds
		|        {
		|            get { return new Rectangle(M_Control.Bounds); }
		|            set { M_Control.Bounds = value.M_Rectangle; }
		|        }
		|
		|        public string DoubleClick;
		|
		|        public bool Enabled
		|        {
		|            get { return M_Control.Enabled; }
		|            set { M_Control.Enabled = value; }
		|        }
		|
		|        public bool FontBold
		|        {
		|            get
		|            {
		|                if (M_Control.Font.Bold)
		|                {
		|                    return true;
		|                }
		|                else
		|                {
		|                    return false;
		|                }
		|            }
		|            set
		|            {
		|                System.Drawing.Font Font1 = M_Control.Font;
		|                if (!value)
		|                {
		|                    M_Control.Font = new System.Drawing.Font(Font1.Name, Font1.Size, Font1.Style & System.Drawing.FontStyle.Bold);
		|                }
		|                else
		|                {
		|                    M_Control.Font = new System.Drawing.Font(Font1.Name, Font1.Size, Font1.Style | System.Drawing.FontStyle.Bold);
		|                }
		|            }
		|        }
		|
		|        public bool Capture
		|        {
		|            get { return M_Control.Capture; }
		|            set { M_Control.Capture = value; }
		|        }
		|
		|        public string Name
		|        {
		|            get { return M_Control.Name; }
		|            set { M_Control.Name = value; }
		|        }
		|
		|        public string ProductName
		|        {
		|            get { return ((AssemblyTitleAttribute)Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false)[0]).Title.ToString(); }
		|        }
		|
		|        public string FontName
		|        {
		|            get { return M_Control.Font.Name; }
		|            set
		|            {
		|                System.Drawing.Font Font1 = M_Control.Font;
		|                M_Control.Font = new System.Drawing.Font(value, Font1.Size, Font1.Style);
		|            }
		|        }
		|
		|        public bool UseWaitCursor
		|        {
		|            get { return M_Control.UseWaitCursor; }
		|            set { M_Control.UseWaitCursor = value; }
		|        }
		|
		|        public string KeyUp;
		|
		|        public string KeyDown;
		|
		|        public string KeyPress;
		|
		|        public int ClientHeight
		|        {
		|            get { return M_Control.ClientSize.Height; }
		|            set { M_Control.ClientSize = new System.Drawing.Size(M_Control.ClientSize.Width, value); }
		|        }
		|
		|        public osf.Rectangle ClientRectangle
		|        {
		|            get { return new Rectangle(M_Control.ClientRectangle); }
		|        }
		|
		|        public osf.Size ClientSize
		|        {
		|            get { return new Size(M_Control.ClientSize); }
		|            set { M_Control.ClientSize = value.M_Size; }
		|        }
		|
		|        public int ClientWidth
		|        {
		|            get { return M_Control.ClientSize.Width; }
		|            set { M_Control.ClientSize = new System.Drawing.Size(value, M_Control.ClientSize.Height); }
		|        }
		|
		|        public int MouseButtons
		|        {
		|            get
		|            {
		|                try
		|                {
		|                    return (int)((dynamic)OneScriptForms.Event).Button;
		|                }
		|                catch
		|                {
		|                    return (int)System.Windows.Forms.Control.MouseButtons;
		|                }
		|            }
		|        }
		|
		|        public osf.ContextMenu ContextMenu
		|        {
		|            get
		|            {
		|                if (M_Control.ContextMenu != null)
		|                {
		|                    return (ContextMenu)((ContextMenuEx)M_Control.ContextMenu).M_Object;
		|                }
		|                else
		|                {
		|                    return null;
		|                }
		|            }
		|            set
		|            {
		|                M_Control.ContextMenu = value.M_ContextMenu;
		|                ((ContextMenuEx)M_Control.ContextMenu).M_Object = value;
		|            }
		|        }
		|
		|        public osf.Cursor Cursor
		|        {
		|            get { return new Cursor(M_Control.Cursor); }
		|            set { M_Control.Cursor = value.M_Cursor; }
		|        }
		|
		|        public int Left
		|        {
		|            get { return M_Control.Left; }
		|            set { M_Control.Left = value; }
		|        }
		|
		|        public object Tag
		|        {
		|            get { return M_Control.Tag; }
		|            set { M_Control.Tag = value; }
		|        }
		|
		|        public string MouseEnter;
		|
		|        public string MouseLeave;
		|
		|        public string Click;
		|
		|        public int Bottom
		|        {
		|            get { return M_Control.Bottom; }
		|        }
		|
		|        public osf.Color ForeColor
		|        {
		|            get { return new Color(M_Control.ForeColor); }
		|            set { M_Control.ForeColor = value.M_Color; }
		|        }
		|
		|        public bool Visible
		|        {
		|            get { return M_Control.Visible; }
		|            set { M_Control.Visible = value; }
		|        }
		|
		|        public osf.Point MousePosition
		|        {
		|            get { return new Point(System.Windows.Forms.Control.MousePosition.X, System.Windows.Forms.Control.MousePosition.Y); }
		|        }
		|
		|        public osf.Point Location
		|        {
		|            get { return new Point(M_Control.Location); }
		|            set { M_Control.Location = value.M_Point; }
		|        }
		|
		|        public string LocationChanged;
		|
		|        public int TabIndex
		|        {
		|            get { return M_Control.TabIndex; }
		|            set { M_Control.TabIndex = value; }
		|        }
		|
		|        public int Right
		|        {
		|            get { return M_Control.Right; }
		|        }
		|
		|        public string Enter;
		|
		|        public string MouseHover;
		|
		|        public string MouseDown;
		|
		|        public string MouseUp;
		|
		|        public string Move;
		|
		|        public string MouseMove;
		|
		|        public string Paint;
		|
		|        public string LostFocus;
		|
		|        public string Leave;
		|
		|        public osf.Size Size
		|        {
		|            get { return new Size(M_Control.Size); }
		|            set { M_Control.Size = value.M_Size; }
		|        }
		|
		|        public string SizeChanged;
		|
		|        public int FontSize
		|        {
		|            get { return Convert.ToInt32(M_Control.Font.Size); }
		|            set
		|            {
		|                System.Drawing.Font Font1 = M_Control.Font;
		|                M_Control.Font = new System.Drawing.Font(Font1.Name, Convert.ToSingle(value), Font1.Style);
		|            }
		|        }
		|
		|        public object Parent
		|        {
		|            get { return ((dynamic)M_Control.Parent).M_Object; }
		|            set { M_Control.Parent = ((dynamic)value).M_Control; }
		|        }
		|
		|        public int Dock
		|        {
		|            get { return (int)M_Control.Dock; }
		|            set { M_Control.Dock = (System.Windows.Forms.DockStyle)value; }
		|        }
		|
		|        public bool Focused
		|        {
		|            get { return M_Control.Focused; }
		|        }
		|
		|        public bool TabStop
		|        {
		|            get { return M_Control.TabStop; }
		|            set { M_Control.TabStop = value; }
		|        }
		|
		|        public string Text
		|        {
		|            get { return Convert.ToString(M_Control.Text); }
		|            set { M_Control.Text = value; }
		|        }
		|
		|        public string TextChanged;
		|
		|        public bool CanFocus
		|        {
		|            get { return M_Control.CanFocus; }
		|        }
		|
		|        public osf.Bitmap BackgroundImage
		|        {
		|            get
		|            {
		|                if (M_Control.BackgroundImage != null)
		|                {
		|                    return new Bitmap(M_Control.BackgroundImage);
		|                }
		|                else
		|                {
		|                    return null;
		|                }
		|            }
		|            set
		|            {
		|                M_Control.BackgroundImage = value.M_Image;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public osf.Color BackColor
		|        {
		|            get { return new Color(M_Control.BackColor); }
		|            set { M_Control.BackColor = value.M_Color; }
		|        }
		|
		|        public int Width
		|        {
		|            get { return M_Control.Width; }
		|            set { M_Control.Width = value; }
		|        }
		|
		|        public osf.Font Font
		|        {
		|            get { return new Font(M_Control.Font); }
		|            set { M_Control.Font = value.M_Font; }
		|        }
		|
		|        public osf.Control TopLevelControl
		|        {
		|            get
		|            {
		|                if (M_Control.TopLevelControl != null)
		|                {
		|                    return ((osf.Control)((dynamic)M_Control.TopLevelControl).M_Object);
		|                }
		|                return null;
		|            }
		|        }
		|
		|        public string ControlAdded;
		|
		|        public string ControlRemoved;
		|
		|        public osf.ControlCollection Controls
		|        {
		|            get { return new ControlCollection(M_Control.Controls); }
		|        }
		|
		|        public osf.Control Controls2(int p1)
		|        {
		|            return Controls[p1];
		|        }
		|
		|        public int Anchor
		|        {
		|            get { return (int)M_Control.Anchor; }
		|            set { M_Control.Anchor = (System.Windows.Forms.AnchorStyles)value; }
		|        }
		|		
		|        public bool DoubleBuffered
		|        {
		|            get
		|            {
		|                bool db = (bool)typeof(System.Windows.Forms.Control).InvokeMember(
		|                        ""DoubleBuffered"",
		|                        BindingFlags.GetProperty | BindingFlags.Instance | BindingFlags.NonPublic,
		|                        null,
		|                        M_Control,
		|                        null);
		|
		|                return db;
		|            }
		|            set
		|            {
		|                System.Type Type1 = typeof(System.Windows.Forms.Control);
		|
		|                Type1.InvokeMember(
		|                    ""DoubleBuffered"",
		|                    BindingFlags.SetProperty | BindingFlags.Instance | BindingFlags.NonPublic,
		|                    null,
		|                    M_Control,
		|                    new object[] { value });
		|            }
		|        }
		|
		|        //Методы============================================================
		|        public bool GetStyle(System.Windows.Forms.ControlStyles p1)
		|        {
		|            return (bool)typeof(System.Windows.Forms.Control).InvokeMember(
		|                ""GetStyle"",
		|                System.Reflection.BindingFlags.InvokeMethod | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance,
		|                null,
		|                M_Control,
		|                new object[] { p1 });
		|        }
		|
		|        public void SetStyle(System.Windows.Forms.ControlStyles p1, bool p2)
		|        {
		|            typeof(System.Windows.Forms.Control).InvokeMember(
		|                ""SetStyle"",
		|                System.Reflection.BindingFlags.InvokeMethod | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance,
		|                null,
		|                M_Control,
		|                new object[] { p1, p2 });
		|        }
		|
		|        public void UpdateStyles()
		|        {
		|            typeof(System.Windows.Forms.Control).InvokeMember(
		|                ""UpdateStyles"",
		|                System.Reflection.BindingFlags.InvokeMethod | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance,
		|                null,
		|                M_Control,
		|                null);
		|        }
		|		
		|        public void PlaceLeft(Control p1, int p2)
		|        {
		|            p1.M_Control.Location = new System.Drawing.Point(p1.M_Control.Left - Width - p2, p1.M_Control.Top);
		|        }
		|        public void PlaceRight(Control p1, int p2)
		|        {
		|            p1.M_Control.Location = new System.Drawing.Point(p1.M_Control.Right + p2, p1.M_Control.Top);
		|        }
		|        public void PlaceTop(Control p1, int p2)
		|        {
		|            p1.M_Control.Location = new System.Drawing.Point(p1.M_Control.Left, p1.M_Control.Top - Height - p2);
		|        }
		|        public void PlaceBottom(Control p1, int p2)
		|        {
		|            p1.M_Control.Location = new System.Drawing.Point(p1.M_Control.Left, p1.M_Control.Top + p1.M_Control.Height + p2);
		|        }
		|		
		|        public void Refresh()
		|        {
		|            M_Control.Refresh();
		|        }
		|
		|        public void Invalidate()
		|        {
		|            M_Control.Invalidate();
		|        }
		|
		|        public void ResumeLayout(bool p1 = false)
		|        {
		|            M_Control.ResumeLayout(p1);
		|        }
		|
		|        public void ResetBackgroundImage()
		|        {
		|            M_Control.BackgroundImage = null;
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void Select()
		|        {
		|            M_Control.Select();
		|        }
		|
		|        public void PerformLayout()
		|        {
		|            M_Control.PerformLayout();
		|        }
		|
		|        public osf.Control GetChildAtPoint(Point p1)
		|        {
		|            if (M_Control.GetChildAtPoint(p1.M_Point) != null)
		|            {
		|                return ((osf.Control)((dynamic)M_Control.GetChildAtPoint(p1.M_Point)).M_Object);
		|            }
		|            return null;
		|        }
		|
		|        public virtual void EndUpdate()
		|        {
		|            SendMessage(M_Control.Handle, 11, -1, 0);
		|            M_Control.Invalidate();
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|
		|        public void SendToBack()
		|        {
		|            M_Control.SendToBack();
		|        }
		|
		|        public void BringToFront()
		|        {
		|            M_Control.BringToFront();
		|        }
		|
		|        public osf.Form FindForm()
		|        {
		|            if ((FormEx)M_Control.FindForm() != null)
		|            {
		|                return (osf.Form)((FormEx)M_Control.FindForm()).M_Object;
		|            }
		|            return null;
		|        }
		|
		|        public dynamic FindControl(string p1)
		|        {
		|            foreach (dynamic item in M_Control.Controls)
		|            {
		|                if (item.Name == p1)
		|                {
		|                    return item;
		|                }
		|            }
		|            return null;
		|        }
		|
		|        public virtual void BeginUpdate()
		|        {
		|            SendMessage(M_Control.Handle, 11, 0, 0);
		|            System.Windows.Forms.Application.DoEvents();
		|        }
		|		
		|        public void Update()
		|        {
		|            M_Control.Update();
		|        }
		|
		|        public void Show()
		|        {
		|            M_Control.Show();
		|        }
		|
		|        public void SuspendLayout()
		|        {
		|            M_Control.SuspendLayout();
		|        }
		|
		|        public void Hide()
		|        {
		|            M_Control.Hide();
		|        }
		|
		|        public osf.Control GetNextControl(Control p1, bool p2)
		|        {
		|            return (osf.Control)((dynamic)M_Control.GetNextControl(p1.M_Control, p2)).M_Object;
		|        }
		|
		|        public osf.Graphics CreateGraphics()
		|        {
		|            return new Graphics(M_Control.CreateGraphics());
		|        }
		|		
		|        public void CreateControl()
		|        {
		|            M_Control.CreateControl();
		|        }
		|
		|        public osf.Point PointToClient(Point p1)
		|        {
		|            return new Point(M_Control.PointToClient(p1.M_Point));
		|        }
		|		
		|        public osf.Point PointToScreen(Point p1)
		|        {
		|            return new Point(M_Control.PointToScreen(p1.M_Point));
		|        }
		|
		|        public void SetBounds(int p1, int p2, int p3, int p4)
		|        {
		|            M_Control.SetBounds(p1, p2, p3, p4);
		|        }
		|
		|        public void Focus()
		|        {
		|            M_Control.Focus();
		|        }
		|
		|        public virtual void Center()
		|        {
		|            System.Windows.Forms.Control parent = M_Control.Parent;
		|            M_Control.Location = new System.Drawing.Point((int)System.Math.Round((parent.ClientSize.Width - M_Control.Width) / 2.0), (int)System.Math.Round((parent.ClientSize.Height - M_Control.Height) / 2.0));
		|        }
		|
		|        public osf.Control getControl(object p1)
		|        {
		|            System.Windows.Forms.Control.ControlCollection ControlCollection1 = M_Control.Controls;
		|            object[] array1 = new object[ControlCollection1.Count];
		|            ControlCollection1.CopyTo(array1, 0);
		|            try
		|            {
		|                return (osf.Control)((dynamic)ControlCollection1[(int)p1]).M_Object;
		|            }
		|            catch
		|            {
		|                return (osf.Control)((dynamic)array1.ElementAt((int)p1)).M_Object;
		|            }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ContainerControl" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ContainerControl : ScrollableControl
		|    {
		|        private System.Windows.Forms.ContainerControl m_ContainerControl;
		|
		|        public System.Windows.Forms.ContainerControl M_ContainerControl
		|        {
		|            get { return m_ContainerControl; }
		|            set
		|            {
		|                m_ContainerControl = value;
		|                base.M_ScrollableControl = m_ContainerControl;
		|            }
		|        }
		|
		|        public osf.Control ActiveControl
		|        {
		|            get { return ((dynamic)M_ContainerControl.ActiveControl).M_Object; }
		|            set { M_ContainerControl.ActiveControl = ((dynamic)value).M_Control; }
		|        }
		|
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "Component" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class Component : System.ComponentModel.Component
		|    {
		|        public System.ComponentModel.Component M_Component;
		|
		|        public Type Type
		|        {
		|            get { return new Type(GetType()); }
		|        }
		|
		|        //Методы============================================================
		|        public new void Dispose()
		|        {
		|            M_Component.Dispose();
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	ИначеЕсли ИмяФайлаCs = "ButtonBase" Тогда
		СтрВыгрузки = СтрВыгрузки + 
		"namespace osf
		|{
		|    public class ButtonBase : Control
		|    {
		|        private System.Windows.Forms.ButtonBase m_ButtonBase;
		|        private osf.Bitmap image;
		|		
		|        public System.Windows.Forms.ButtonBase M_ButtonBase
		|        {
		|            get { return m_ButtonBase; }
		|            set
		|            {
		|                m_ButtonBase = value;
		|                base.M_Control = m_ButtonBase;
		|            }
		|        }
		|
		|        public ButtonBase()
		|        {
		|        }
		|		
		|        public int FlatStyle
		|        {
		|            get { return (int)M_ButtonBase.FlatStyle; }
		|            set { M_ButtonBase.FlatStyle = (System.Windows.Forms.FlatStyle)value; }
		|        }
		|
		|        public osf.Bitmap Image
		|        {
		|            get { return image; }
		|            set
		|            {
		|                image = value;
		|                M_ButtonBase.Image = value.M_Image;
		|                System.Windows.Forms.Application.DoEvents();
		|            }
		|        }
		|
		|        public int ImageAlign
		|        {
		|            get { return (int)M_ButtonBase.ImageAlign; }
		|            set { M_ButtonBase.ImageAlign = (System.Drawing.ContentAlignment)value; }
		|        }
		|
		|        public int ImageIndex
		|        {
		|            get { return M_ButtonBase.ImageIndex; }
		|            set { M_ButtonBase.ImageIndex = value; }
		|        }
		|
		|        public osf.ImageList ImageList
		|        {
		|            get { return new ImageList(M_ButtonBase.ImageList); }
		|            set { M_ButtonBase.ImageList = value.M_ImageList; }
		|        }
		|
		|        public int TextAlign
		|        {
		|            get { return (int)M_ButtonBase.TextAlign; }
		|            set { M_ButtonBase.TextAlign = (System.Drawing.ContentAlignment)value; }
		|        }
		|    }//endClass
		|}//endnamespace
		|";
		ТекстДокХХХ = Новый ТекстовыйДокумент;
		ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
		ТекстДокХХХ.Записать(КаталогВыгрузки + "\" + ИмяФайлаCs + ".cs");
	КонецЕсли;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
КонецПроцедуры//СоздатьФайлCs

Процедура СортировкаКода()
	Таймер = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ВыбранныеФайлы = НайтиФайлы(КаталогВыгрузки, "*.cs", Ложь);
	Найдено1 = 0;
	Для А = 0 По ВыбранныеФайлы.ВГраница() Цикл
		СтрДирективы = "";
		Директивы = Новый СписокЗначений;
		Классы1Уровня = Новый СписокЗначений;
		Классы2Уровня = Новый СписокЗначений;
		Классы3Уровня = Новый СписокЗначений;
		
		Если ВыбранныеФайлы[А].Имя = "ExtractIconClass.cs" Тогда
			Продолжить;
		КонецЕсли;
		Если ВыбранныеФайлы[А].Имя = "FormsCollection.cs" Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если ВыбранныеФайлы[А].Имя = "DataGridViewGrouper.cs" Тогда
			Продолжить;
		КонецЕсли;
		Если ВыбранныеФайлы[А].Имя = "DataGridViewGrouperControl.cs" Тогда
			Продолжить;
		КонецЕсли;

		
		
		
		
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ВыбранныеФайлы[А].ПолноеИмя);
		
		Сообщить(" (" + Лев(Строка(((ТекущаяУниверсальнаяДатаВМиллисекундах() - Таймер)/1000)/60), 4) + " мин." + " " + (А + 1) + " из " + ВыбранныеФайлы.Количество() + ") " + ВыбранныеФайлы[А].ПолноеИмя);
		
		// Сообщить("=== " + ВыбранныеФайлы[А].Имя + " ========================================================================================");
		Стр = ТекстДок.ПолучитьТекст();
		М = СтрНайтиМежду(Стр, "using", "namespace", , );
		Если М.Количество() > 0 Тогда
			// Сообщить("=== " + ВыбранныеФайлы[А].Имя + " =========================================================================");
			СтрДирективы = М[0];
			СтрДирективы = СокрЛП(СтрДирективы);
			Директивы.Добавить("using " + СтрДирективы);
		КонецЕсли;
		
		Если Не (СтрДирективы = "") Тогда
			Стр = СтрЗаменить(Стр, СтрДирективы, "");
		КонецЕсли;
		
		//Классы3Уровня оставляем без изменения
		М = СтрНайтиМежду(Стр, "[ContextClass", "//endClass", , );
		Если М.Количество() > 0 Тогда
			Для А1 = 0 По М.ВГраница() Цикл
				СтрКлассы3Уровня = М[А1];
				СтрКлассы3Уровня = СокрЛП(СтрКлассы3Уровня);
				Классы3Уровня.Добавить("    [ContextClass " + СтрКлассы3Уровня);
			КонецЦикла;
			Стр = СтрЗаменить(Стр, СтрКлассы3Уровня, "");
		КонецЕсли;
		
		//Классы1Уровня оставляем без изменения
		М = СтрНайтиМежду(Стр, "public class", "//endClass", Ложь, );
		Если М.Количество() > 0 Тогда
			Для А1 = 0 По М.ВГраница() Цикл
				Если СтрНайти(М[А1], "Ex :") > 0 Тогда
					СтрКлассы1Уровня = М[А1];
					СтрКлассы1Уровня = СтрЗаменить(СтрКлассы1Уровня, "//endClass", "");
					СтрКлассы1Уровня = СокрЛП(СтрКлассы1Уровня);
					Классы1Уровня.Добавить("    " + СтрКлассы1Уровня);
					Стр = СтрЗаменить(Стр, СтрКлассы1Уровня, "");
				Иначе
					СтрКлассы2Уровня = М[А1];
					СтрКлассы2Уровня = СокрЛП(СтрКлассы2Уровня);
					Классы2Уровня.Добавить(СортировкаКласса2Уровня(СтрКлассы2Уровня));
					Стр = СтрЗаменить(Стр, СтрКлассы2Уровня, "");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Директивы.СортироватьПоЗначению();
		Стр = "";
		
		Для А1 = 0 По Директивы.Количество() - 1 Цикл
				Стр = Стр + Символы.ПС + Директивы.Получить(А1).Значение;
		КонецЦикла;
		Стр = Стр + Символы.ПС + Символы.ПС + "namespace osf" + Символы.ПС + "{";
		Для А1 = 0 По Классы1Уровня.Количество() - 1 Цикл
			Стр = Стр + Символы.ПС + Классы1Уровня.Получить(А1).Значение;
		КонецЦикла;
		Если Классы2Уровня.Количество() > 0 Тогда
			Для А1 = 0 По Классы2Уровня.Количество() - 1 Цикл
				Стр = Стр + Символы.ПС + Классы2Уровня.Получить(А1).Значение;
				Стр = Стр + Символы.ПС;
				Стр = Стр + Символы.ПС + "    }" + Символы.ПС;
			КонецЦикла;
		КонецЕсли;
		Для А1 = 0 По Классы3Уровня.Количество() - 1 Цикл
			Стр = Стр + Символы.ПС + Классы3Уровня.Получить(А1).Значение;
		КонецЦикла;
		Стр = Стр + Символы.ПС + "}";
		
		//удалим "//endMethods"
		СтрКонечная = "";
		Для А1 = 1 По СтрЧислоСтрок(Стр) - 1 Цикл
			Фрагмент1 = СокрЛП(СтрПолучитьСтроку(Стр, А1)) + СокрЛП(СтрПолучитьСтроку(Стр, А1 + 1));
			Если Не (Фрагмент1 = "//endMethods") Тогда
				СтрКонечная = СтрКонечная + Символы.ПС + СтрПолучитьСтроку(Стр, А1);
			КонецЕсли;
		КонецЦикла;
		СтрКонечная = СтрКонечная + Символы.ПС + СтрПолучитьСтроку(Стр, СтрЧислоСтрок(Стр));
		Стр = СтрКонечная;
		СтрКонечная = "";
		Для А1 = 1 По СтрЧислоСтрок(Стр) Цикл
			Если Не (СокрЛП(СтрПолучитьСтроку(Стр, А1)) = "//endMethods") Тогда
				СтрКонечная = СтрКонечная + Символы.ПС + СтрПолучитьСтроку(Стр, А1);
			КонецЕсли;
		КонецЦикла;
		
		//удалим "//endProperty"
		Стр = СтрКонечная;
		СтрКонечная = "";
		Для А1 = 1 По СтрЧислоСтрок(Стр) - 1 Цикл
			Фрагмент1 = СокрЛП(СтрПолучитьСтроку(Стр, А1)) + СокрЛП(СтрПолучитьСтроку(Стр, А1 + 1));
			Если Не (Фрагмент1 = "//endProperty") Тогда
				СтрКонечная = СтрКонечная + Символы.ПС + СтрПолучитьСтроку(Стр, А1);
			КонецЕсли;
		КонецЦикла;
		СтрКонечная = СтрКонечная + Символы.ПС + СтрПолучитьСтроку(Стр, СтрЧислоСтрок(Стр));
		Стр = СтрКонечная;
		СтрКонечная = "";
		Для А1 = 1 По СтрЧислоСтрок(Стр) Цикл
			Если Не (СокрЛП(СтрПолучитьСтроку(Стр, А1)) = "//endProperty") Тогда
				СтрКонечная = СтрКонечная + Символы.ПС + СтрПолучитьСтроку(Стр, А1);
			КонецЕсли;
		КонецЦикла;
		
		СтрКонечная = СтрЗаменить(СтрКонечная, "//Свойства============================================================", "");
		СтрКонечная = СтрЗаменить(СтрКонечная, "//Методы============================================================", "");
		
		ПодстрокаПоиска = ">
		|    {
		|
		|        public";
		ПодстрокаЗамены = ">
		|    {
		|        public";
		СтрКонечная = СтрЗаменить(СтрКонечная, ПодстрокаПоиска, ПодстрокаЗамены);
		
		ПодстрокаПоиска = "}
		|
		|    }
		|
		|    [ContextClass";
		ПодстрокаЗамены = "}
		|    }
		|
		|    [ContextClass";
		СтрКонечная = СтрЗаменить(СтрКонечная, ПодстрокаПоиска, ПодстрокаЗамены);
		
		ПодстрокаПоиска = "osf
		|{
		|
		|    public";
		ПодстрокаЗамены = "osf
		|{
		|    public";
		СтрКонечная = СтрЗаменить(СтрКонечная, ПодстрокаПоиска, ПодстрокаЗамены);
		
		ПодстрокаПоиска = "}
		|
		|    }
		|}";
		ПодстрокаЗамены = "}
		|    }
		|}";
		СтрКонечная = СтрЗаменить(СтрКонечная, ПодстрокаПоиска, ПодстрокаЗамены);
		
		ПодстрокаПоиска = "}
		|
		|    }
		|
		|    public class";
		ПодстрокаЗамены = "}
		|    }
		|
		|    public class";
		СтрКонечная = СтрЗаменить(СтрКонечная, ПодстрокаПоиска, ПодстрокаЗамены);
		
		ПодстрокаПоиска = "}
		|
		|    }
		|
		|}";
		ПодстрокаЗамены = "}
		|    }
		|}";
		СтрКонечная = СтрЗаменить(СтрКонечная, ПодстрокаПоиска, ПодстрокаЗамены);
		
		ПодстрокаПоиска = ";
		|        }
		|
		|    }";
		ПодстрокаЗамены = ";
		|        }
		|    }";
		СтрКонечная = СтрЗаменить(СтрКонечная, ПодстрокаПоиска, ПодстрокаЗамены);
		
		
		
		
		
		
		
		
		//заменим две пустые строки подряд на одну пустую
		Стр = СтрКонечная;
		СтрКонечная = "";
		Для А1 = 1 По СтрЧислоСтрок(Стр) - 1 Цикл
			Фрагмент1 = СокрЛП(СтрПолучитьСтроку(Стр, А1)) + СокрЛП(СтрПолучитьСтроку(Стр, А1 + 1));
			Если Не (Фрагмент1 = "") Тогда
				СтрКонечная = СтрКонечная + Символы.ПС + СтрПолучитьСтроку(Стр, А1);
			КонецЕсли;
		КонецЦикла;
		СтрКонечная = СтрКонечная + Символы.ПС + СтрПолучитьСтроку(Стр, СтрЧислоСтрок(Стр));
		
		//удалим "//end_constr"
		ПодстрокаПоиска = "//end_constr";
		ПодстрокаЗамены = "";
		СтрКонечная = СтрЗаменить(СтрКонечная, ПодстрокаПоиска, ПодстрокаЗамены);
		
		СтрКонечная = СокрЛП(СтрКонечная);
		// Сообщить("" + СтрКонечная);
		
		ТекстДок.УстановитьТекст(СтрКонечная);
		ТекстДок.Записать(ВыбранныеФайлы[А].ПолноеИмя);
	КонецЦикла;
	
	ВыбранныеФайлы = НайтиФайлы(КаталогВыгрузки, "*.cs", Ложь);
	Для А = 0 По ВыбранныеФайлы.ВГраница() Цикл
		Если ВыбранныеФайлы[А].Имя = "FormsCollection.cs" или 
		    ВыбранныеФайлы[А].Имя = "DataGridViewGrouper.cs" или 
			ВыбранныеФайлы[А].Имя = "DataGridViewGrouperControl.cs" Тогда
			
			ТекстДок = Новый ТекстовыйДокумент;
			ТекстДок.Прочитать(ВыбранныеФайлы[А].ПолноеИмя);
			Стр = ТекстДок.ПолучитьТекст();
			
			ПодстрокаПоиска = "        }
			|        
			|        //endMethods
			|    }//endClass
			|
			|}//endnamespace";
			ПодстрокаЗамены = "        }
			|    }
			|}";
			Стр = СтрЗаменить(Стр, ПодстрокаПоиска, ПодстрокаЗамены);
			
			ПодстрокаПоиска = "//endProperty
			|        //Методы============================================================";
			ПодстрокаЗамены = "//Методы============================================================";
			Стр = СтрЗаменить(Стр, ПодстрокаПоиска, ПодстрокаЗамены);
			
			ТекстДок.УстановитьТекст(Стр);
			ТекстДок.Записать(ВыбранныеФайлы[А].ПолноеИмя);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Сообщить("Найдено " + ВыбранныеФайлы.Количество());
	Сообщить("Выполнено за: " + ((ТекущаяУниверсальнаяДатаВМиллисекундах() - Таймер)/1000)/60 + " мин.");
КонецПроцедуры//СортировкаКода()

Функция СортировкаКласса2Уровня(СтрКласса)
	Стр = СтрЗаменить(СтрКласса,  "}//endClass", "//end");
	
	М3 = СтрНайтиМежду(Стр, "[DllImport", ";", Ложь, );
	Для А = 0 По М3.ВГраница() Цикл
		Стр = СтрЗаменить(Стр, М3[А], "");
	КонецЦикла;
	
	//повставлять \r\n//end перед каждым private, public, [DllImport
	Стр = СтрЗаменить(Стр, "private", "//end" + Символы.ПС + "private");
	Стр = СтрЗаменить(Стр, "public", "//end" + Символы.ПС + "public");
	
	Голова = "";
	Поля = Новый СписокЗначений;
	Конструкторы = Новый СписокЗначений;
	Свойства = Новый СписокЗначений;
	Методы = Новый СписокЗначений;
	
	М = Новый Массив;
	М1 = СтрНайтиМежду(Стр, "private", "//end", , );
	М2 = СтрНайтиМежду(Стр, "public", "//end", , );
	Для А = 0 По М1.ВГраница() Цикл
		М.Добавить("private" + М1[А]);
	КонецЦикла;
	Для А = 0 По М2.ВГраница() Цикл
		М.Добавить("public" + М2[А]);
	КонецЦикла;
	Для А = 0 По М3.ВГраница() Цикл
		М.Добавить("" + М3[А]);
	КонецЦикла;
	
	Для А = 0 По М.ВГраница() Цикл
		Фрагмент = СокрЛП(М[А]);
		ВтороеСловоВоФрагменте = "";
		М125 = СтрРазделить(Фрагмент, "");
		Если М125.Количество() > 0 Тогда
			ВтороеСловоВоФрагменте = М125[1];
		КонецЕсли;
		
		ИмяКласса = "";
		СтрокаСИменемКласса = СтрПолучитьСтроку(СокрЛП(СтрКласса), 1);
		ИмяКласса = СтрРазделить(СтрПолучитьСтроку(СокрЛП(СтрКласса), 1), " ")[2];
		
		// если есть слово class тогда это Голова
		Если СтрНайти(Фрагмент, "class") > 0 Тогда
			Голова = Голова + Символы.ПС + "    " + Фрагмент;
		// если последний знак ; тогда это Поля
		ИначеЕсли (Прав(Фрагмент, 1) = ";") или (СтрНайти(Фрагмент, "DllImport") > 0) Тогда
			//создать представление
			Поля.Добавить("        " + Фрагмент, СтрРазделить(СтрПолучитьСтроку(Фрагмент, 1), " ")[2]);
		// если первая строка содержит имя класса со следующей за ним скобкой тогда это Конструкторы
		ИначеЕсли Лев(ВтороеСловоВоФрагменте, СтрДлина(ИмяКласса + "(")) = ИмяКласса + "(" Тогда
			Конструкторы.Добавить("        " + Фрагмент);
		// если есть слово set или get тогда это Свойства
		ИначеЕсли (СтрНайти(Фрагмент, "get") > 0) или (СтрНайти(Фрагмент, "set") > 0) Тогда
			Свойства.Добавить("        " + Фрагмент, СтрРазделить(СтрПолучитьСтроку(Фрагмент, 1), " ")[2]);
		// если в первой строке есть скобка ( тогда это Методы
		ИначеЕсли СтрНайти(СтрПолучитьСтроку(Фрагмент, 1), "(") > 0 Тогда
			Методы.Добавить("        " + Фрагмент, СтрРазделить(СтрПолучитьСтроку(Фрагмент, 1), " ")[2]);
		// иначе сообщить этот фрагмент
		Иначе
			Сообщить("=====================================");
			Сообщить("Не обработан фрагмент " + Символы.ПС + М[А]);
			Сообщить("=====================================");
		КонецЕсли;
	КонецЦикла;
	
	Поля.СортироватьПоПредставлению();
	Конструкторы.СортироватьПоЗначению();
	Свойства.СортироватьПоПредставлению();
	Методы.СортироватьПоПредставлению();

	Стр = Голова;
	Для А = 0 По Поля.Количество() - 1 Цикл
		Стр = Стр + Символы.ПС + Поля.Получить(А).Значение;
	КонецЦикла;
	Для А = 0 По Конструкторы.Количество() - 1 Цикл
		Стр = Стр + Символы.ПС + Символы.ПС + Конструкторы.Получить(А).Значение;
	КонецЦикла;
	Если Свойства.Количество() > 0 Тогда
		Стр = Стр + Символы.ПС + Символы.ПС + "        //Свойства============================================================";
		Для А = 0 По Свойства.Количество() - 1 Цикл
			Стр = Стр + Символы.ПС + Символы.ПС + Свойства.Получить(А).Значение;
		КонецЦикла;
	КонецЕсли;
	Если Методы.Количество() > 0 Тогда
		Стр = Стр + Символы.ПС + Символы.ПС + "        //Методы============================================================";
		Для А = 0 По Методы.Количество() - 1 Цикл
			Стр = Стр + Символы.ПС + Символы.ПС + Методы.Получить(А).Значение;
		КонецЦикла;
	КонецЕсли;
	
	ПодстрокаПоиска = "ControlRemoved = """";
	|            }";
	ПодстрокаЗамены = "ControlRemoved = """";
	|            }
	|        }
	|	";
	Стр = СтрЗаменить(Стр, ПодстрокаПоиска, ПодстрокаЗамены);
	
	Возврат Стр;
КонецФункции//СортировкаКласса2Уровня(СтрКласса)

КаталогСправки = "C:\444\OneScriptFormsru";// без слэша в конце
КаталогВыгрузки = "C:\444\ВыгруженныеОбъекты";// без слэша в конце

ВыгрузкаДляCS();
СортировкаКода();
